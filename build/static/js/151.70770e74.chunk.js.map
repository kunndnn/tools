{"version":3,"file":"static/js/151.70770e74.chunk.js","mappings":"kJAGA,MA6EA,EA7EqBA,KACnB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,KAC9BG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAS,KAEnDK,EAAAA,EAAAA,YAAU,KACR,GAAI,oBAAqBC,OAAQ,CAC/B,MAAMC,EAAYD,OAAOE,gBAEnBC,EAAiBA,KACrB,MAAMC,EAAkBH,EAAUI,YAClCT,EAAUQ,EAAgB,EAS5B,OANAD,IAEAF,EAAUK,gBAAkB,KAC1BH,GAAgB,EAGX,KACLF,EAAUK,gBAAkB,IAAI,CAEpC,CACEC,MAAM,kDACR,GACC,IAuBH,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,YACEF,UAAU,WACVG,MAAOpB,EACPqB,SAAWC,GAAMrB,EAAcqB,EAAEC,OAAOH,OACxCI,YAAY,qBACZC,KAAK,IACLC,KAAK,QAEPP,EAAAA,EAAAA,KAAA,UACEF,UAAU,SACVG,MAAOf,EACPgB,SAjBqBM,IACzBrB,EAAiBqB,EAAMJ,OAAOH,MAAM,EAgBJF,SAE3Bf,EAAOyB,KAAKC,IACXb,EAAAA,EAAAA,MAAA,UAAyBI,MAAO,GAAGS,EAAMC,SAASD,EAAME,QAAQb,SAAA,CAC7DW,EAAMC,KAAK,KAAGD,EAAME,KAAK,MADfF,EAAMC,WAKvBX,EAAAA,EAAAA,KAAA,UAAQF,UAAU,SAASe,QA1CXC,KAClB,GAAI,oBAAqBzB,OAAQ,CAC/B,MAAMC,EAAYD,OAAOE,gBACnBwB,EAAY,IAAIC,yBAAyBnC,GAGzCoC,EAAmBjC,EAAOkC,MAC7BR,GAAUA,EAAMC,KAAO,KAAOD,EAAME,KAAO,MAAQ1B,IAElD+B,IACFF,EAAUL,MAAQO,GAGpB3B,EAAU6B,MAAMJ,EAClB,GA4BkDhB,SAAC,YAG7C,C","sources":["Components/TextToSpeech.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../Styles/TextToSpeech.css\"; // Importing the external CSS file\r\n\r\nconst TextToSpeech = () => {\r\n  const [textToRead, setTextToRead] = useState(\"\");\r\n  const [voices, setVoices] = useState([]);\r\n  const [selectedVoice, setSelectedVoice] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (\"speechSynthesis\" in window) {\r\n      const synthesis = window.speechSynthesis;\r\n\r\n      const populateVoices = () => {\r\n        const availableVoices = synthesis.getVoices();\r\n        setVoices(availableVoices);\r\n      };\r\n\r\n      populateVoices(); // Populate voices when the component mounts\r\n\r\n      synthesis.onvoiceschanged = () => {\r\n        populateVoices(); // Update voices if they change\r\n      };\r\n\r\n      return () => {\r\n        synthesis.onvoiceschanged = null; // Clean up\r\n      };\r\n    } else {\r\n      alert(\"Your browser does not support speech synthesis.\");\r\n    }\r\n  }, []);\r\n\r\n  const handleSpeak = () => {\r\n    if (\"speechSynthesis\" in window) {\r\n      const synthesis = window.speechSynthesis;\r\n      const utterance = new SpeechSynthesisUtterance(textToRead);\r\n\r\n      // Find the selected voice and set it to the utterance\r\n      const selectedVoiceObj = voices.find(\r\n        (voice) => voice.name + \" (\" + voice.lang + \")\" === selectedVoice\r\n      );\r\n      if (selectedVoiceObj) {\r\n        utterance.voice = selectedVoiceObj;\r\n      }\r\n\r\n      synthesis.speak(utterance);\r\n    }\r\n  };\r\n\r\n  const handleVoiceChange = (event) => {\r\n    setSelectedVoice(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <textarea\r\n        className=\"textarea\"\r\n        value={textToRead}\r\n        onChange={(e) => setTextToRead(e.target.value)}\r\n        placeholder=\"Enter text here...\"\r\n        rows=\"4\"\r\n        cols=\"50\"\r\n      />\r\n      <select\r\n        className=\"select\"\r\n        value={selectedVoice}\r\n        onChange={handleVoiceChange}\r\n      >\r\n        {voices.map((voice) => (\r\n          <option key={voice.name} value={`${voice.name} (${voice.lang})`}>\r\n            {voice.name} ({voice.lang})\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"button\" onClick={handleSpeak}>\r\n        Speak\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextToSpeech;\r\n"],"names":["TextToSpeech","textToRead","setTextToRead","useState","voices","setVoices","selectedVoice","setSelectedVoice","useEffect","window","synthesis","speechSynthesis","populateVoices","availableVoices","getVoices","onvoiceschanged","alert","_jsxs","className","children","_jsx","value","onChange","e","target","placeholder","rows","cols","event","map","voice","name","lang","onClick","handleSpeak","utterance","SpeechSynthesisUtterance","selectedVoiceObj","find","speak"],"sourceRoot":""}