{"version":3,"file":"static/js/909.ab6b1c80.chunk.js","mappings":"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","sources":["Components/Common/CopyToClipBoard.js","Components/FileToBuffer.js","Components/Loader.js"],"sourcesContent":["import { toast, Zoom } from \"react-toastify\"; // Assuming you are using react-toastify\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nconst { success, info, dismiss } = toast;\r\n\r\nconst CopyToClipBoard = ({ textToCopy, style }) => {\r\n  const handleCopy = () => {\r\n    if (textToCopy) {\r\n      navigator.clipboard.writeText(textToCopy);\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      success(\"Text copied to clipboard\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"dark\",\r\n        transition: Zoom,\r\n      });\r\n    } else {\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      info(`Nothing to copy`, {\r\n        theme: \"dark\",\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <button style={style} onClick={handleCopy}>\r\n        Copy\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CopyToClipBoard;\r\n","import React, { useState, useRef } from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport CopyToClipBoard from \"./Common/CopyToClipBoard\";\r\nfunction FileToBuffer() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [output, setOutput] = useState(\"\"); // State to hold the output\r\n  const fileInputRef = useRef(null); // Reference to file input\r\n  const { dismiss } = toast;\r\n\r\n  const toggleLoader = () => setLoading((prevLoading) => !prevLoading); // Toggle the loading state\r\n\r\n  const convertFile = () => {\r\n    const file = fileInputRef.current.files[0]; // Get the file from the input\r\n\r\n    if (!file) {\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      toast.error(`Please choose a file !!!`, {\r\n        theme: \"dark\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = function (e) {\r\n      toggleLoader();\r\n      const base64String = e.target.result.split(\",\")[1]; // Extract base64 string\r\n      const mimeType = file.type || \"application/octet-stream\"; // Default to binary if empty\r\n\r\n      // Dynamically create data URI prefix using mimeType\r\n      const dataUriPrefix = `data:${mimeType};base64,`;\r\n\r\n      const fullDataUri = dataUriPrefix + base64String;\r\n      setOutput(fullDataUri); // Update state with the base64 string\r\n    };\r\n\r\n    reader.readAsDataURL(file); // Read the file as Data URL (base64 encoded string)\r\n    toggleLoader();\r\n  };\r\n\r\n  // Inline styles for elements\r\n  const containerStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"80vh\", // Adjust height to fit within the viewport responsively\r\n    width: \"90vw\", // Ensure responsiveness for smaller devices\r\n    maxWidth: \"600px\", // Max width for larger screens\r\n    margin: \"auto\",\r\n    padding: \"20px\",\r\n    backgroundColor: \"#f0f0f0\",\r\n    borderRadius: \"15px\",\r\n    boxShadow: \"10px 10px 30px rgba(0, 0, 0, 0.2)\", // 3D shadow effect\r\n    transform: \"rotateX(5deg) rotateY(5deg)\", // Slight 3D tilt effect\r\n    perspective: \"1000px\", // Gives a 3D feel\r\n  };\r\n\r\n  const buttonStyle = {\r\n    padding: \"10px 20px\",\r\n    backgroundColor: \"#4CAF50\",\r\n    color: \"white\",\r\n    border: \"none\",\r\n    borderRadius: \"5px\",\r\n    cursor: \"pointer\",\r\n    margin: \"10px\",\r\n  };\r\n\r\n  const fileInputStyle = {\r\n    marginBottom: \"20px\",\r\n  };\r\n\r\n  const textAreaStyle = {\r\n    width: \"100%\",\r\n    padding: \"10px\",\r\n    fontSize: \"16px\",\r\n    borderRadius: \"5px\",\r\n  };\r\n\r\n  const headingStyle = {\r\n    margin: \"20px 0\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={containerStyle}>\r\n        <input type=\"file\" ref={fileInputRef} style={fileInputStyle} />\r\n        <button style={buttonStyle} onClick={convertFile}>\r\n          Convert to Base64\r\n        </button>\r\n\r\n        <h2 style={headingStyle}>Output</h2>\r\n        <textarea value={output} rows=\"10\" style={textAreaStyle} readOnly />\r\n        <CopyToClipBoard textToCopy={output} style={buttonStyle} />\r\n      </div>\r\n      <Loader loading={loading} />\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"light\"\r\n        transition={Zoom}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FileToBuffer;\r\n","import \"../Styles/Loader.css\";\r\n\r\n// import { useState } from \"react\";\r\n// const [loading, setLoading] = useState(false); // State management here\r\n// function toggleLoader() {\r\n//   setLoading((prevLoading) => !prevLoading); // Toggle the loading state\r\n// }\r\nfunction Loader({ loading }) {\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div id=\"loader\">\r\n          <div className=\"spinner\"></div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n"],"names":["success","info","dismiss","toast","_ref","textToCopy","style","_jsx","_Fragment","children","onClick","handleCopy","navigator","clipboard","writeText","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","transition","Zoom","loading","setLoading","useState","output","setOutput","fileInputRef","useRef","toggleLoader","prevLoading","buttonStyle","padding","backgroundColor","color","border","borderRadius","cursor","margin","_jsxs","display","flexDirection","alignItems","justifyContent","height","width","maxWidth","boxShadow","transform","perspective","type","ref","marginBottom","convertFile","file","current","files","error","reader","FileReader","onload","e","base64String","target","result","split","mimeType","readAsDataURL","value","rows","fontSize","readOnly","CopyToClipBoard","Loader","ToastContainer","newestOnTop","rtl","pauseOnFocusLoss","id","className"],"sourceRoot":""}