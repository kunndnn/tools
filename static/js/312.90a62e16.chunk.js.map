{"version":3,"file":"static/js/312.90a62e16.chunk.js","mappings":"yLAMA,MAmGA,EAnGyBA,KACvB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAS,GACnDG,GAAaC,EAAAA,EAAAA,QAAO,OACpB,QAAEC,GAAYC,EAAAA,GAEdC,EAAkBA,KACtBF,IACIP,GAEFU,IAAUL,EAAWM,QAASX,EAAW,CACvCY,OAAQ,UACRC,UAAW,OACXC,MAAO,EACPC,OAAQ,IACRC,cAAc,IAEhBZ,GAAoB,GACpBI,EAAAA,GAAMS,QAAQ,2BAA4B,CAAEC,MAAO,UAEnDV,EAAAA,GAAMW,MAAM,4BAA6B,CAAED,MAAO,QACpD,EAoCF,OACEE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACxBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,UAASD,SAAC,uBACxBE,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,MAAO1B,EACP2B,SAAWC,GAAM3B,EAAa2B,EAAEC,OAAOH,OACvCI,UAVYC,IAAA,IAAC,IAAEC,GAAKD,EAAA,MAAa,UAARC,GAAmBvB,GAAiB,EAW7DwB,YAAY,aACZV,UAAU,WAEZC,EAAAA,EAAAA,KAAA,UAAQD,UAAU,SAASW,QAASzB,EAAgBa,SAAC,sBAGrDE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,oBAAmBD,UAEhCE,EAAAA,EAAAA,KAAA,OAAKW,IAAK9B,MAEXF,IACCqB,EAAAA,EAAAA,KAAA,UAAQD,UAAU,yBAAyBW,QArD3BE,KACtB,GAAI/B,EAAWM,QAAS,CACtB,MAAM0B,EAAMhC,EAAWM,QACjB2B,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAC5BC,GAAU,IAAIC,eAAgBC,kBAAkBR,GAChDS,EAAM,IAAIC,MACVC,EAAU,IAAIC,KAAK,CAACN,GAAU,CAClClB,KAAM,gCAEFyB,EAAMC,IAAIC,gBAAgBJ,GAEhCF,EAAIO,OAAS,KACXf,EAAOxB,MAAQgC,EAAIhC,MACnBwB,EAAOvB,OAAS+B,EAAI/B,OACpB0B,EAAQa,UAAUR,EAAK,EAAG,GAC1BK,IAAII,gBAAgBL,GAGpB,MAAMM,EAASlB,EAAOmB,UAAU,aAC1BC,EAAOnB,SAASC,cAAc,KACpCkB,EAAKC,KAAOH,EACZE,EAAKE,SAAW,cAChBF,EAAKG,OAAO,EAEdf,EAAIgB,IAAMZ,CACZ,MACE1C,EAAAA,GAAMW,MAAM,0BAA2B,CAAED,MAAO,QAClD,EAyB0EI,SAAC,yBAKzEE,EAAAA,EAAAA,KAACuC,EAAAA,GAAc,CACbC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,EACZtD,MAAM,QACNuD,WAAYC,EAAAA,OAEb,C","sources":["Components/BarCodeGenerator.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport JsBarcode from \"jsbarcode\";\r\nimport \"../Styles/BarCodeGenerator.css\"; // Importing the CSS file\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst BarCodeGenerator = () => {\r\n  const [inputText, setInputText] = useState(\"\"); // Store input text\r\n  const [barcodeGenerated, setBarcodeGenerated] = useState(false); // Track barcode generation\r\n  const barcodeRef = useRef(null); // Reference to the SVG element\r\n  const { dismiss } = toast;\r\n\r\n  const generateBarcode = () => {\r\n    dismiss(); // Dismiss any existing toast notifications\r\n    if (inputText) {\r\n      // Generate barcode when the button is clicked and inputText is not empty\r\n      JsBarcode(barcodeRef.current, inputText, {\r\n        format: \"CODE128\", // Barcode format\r\n        lineColor: \"#000\",\r\n        width: 2,\r\n        height: 100,\r\n        displayValue: true,\r\n      });\r\n      setBarcodeGenerated(true); // Set barcode as generated\r\n      toast.success(\"Your barcode is ready!!!\", { theme: \"dark\" });\r\n    } else {\r\n      toast.error(\"Please enter some text!!!\", { theme: \"dark\" });\r\n    }\r\n  };\r\n\r\n  const downloadBarcode = () => {\r\n    if (barcodeRef.current) {\r\n      const svg = barcodeRef.current;\r\n      const canvas = document.createElement(\"canvas\");\r\n      const context = canvas.getContext(\"2d\");\r\n      const svgData = new XMLSerializer().serializeToString(svg);\r\n      const img = new Image();\r\n      const svgBlob = new Blob([svgData], {\r\n        type: \"image/svg+xml;charset=utf-8\",\r\n      });\r\n      const url = URL.createObjectURL(svgBlob);\r\n\r\n      img.onload = () => {\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        context.drawImage(img, 0, 0);\r\n        URL.revokeObjectURL(url);\r\n\r\n        // Convert canvas to PNG\r\n        const pngUrl = canvas.toDataURL(\"image/png\");\r\n        const link = document.createElement(\"a\");\r\n        link.href = pngUrl;\r\n        link.download = \"barcode.png\";\r\n        link.click();\r\n      };\r\n      img.src = url;\r\n    } else {\r\n      toast.error(\"No barcode to download!\", { theme: \"dark\" });\r\n    }\r\n  };\r\n\r\n  const onInputCall = ({ key }) => key === \"Enter\" && generateBarcode();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h3 className=\"heading\">Barcode Generator</h3>\r\n        <input\r\n          type=\"text\"\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          onKeyDown={onInputCall}\r\n          placeholder=\"Enter text\"\r\n          className=\"input\"\r\n        />\r\n        <button className=\"button\" onClick={generateBarcode}>\r\n          Generate Barcode\r\n        </button>\r\n        <div className=\"barcode-container\">\r\n          {/* This is where the barcode will be rendered */}\r\n          <svg ref={barcodeRef}></svg>\r\n        </div>\r\n        {barcodeGenerated && ( // Show button only if barcode is generated\r\n          <button className=\"button download-button\" onClick={downloadBarcode}>\r\n            Download Barcode\r\n          </button>\r\n        )}\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"light\"\r\n        transition={Zoom}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarCodeGenerator;\r\n"],"names":["BarCodeGenerator","inputText","setInputText","useState","barcodeGenerated","setBarcodeGenerated","barcodeRef","useRef","dismiss","toast","generateBarcode","JsBarcode","current","format","lineColor","width","height","displayValue","success","theme","error","_jsxs","_Fragment","children","className","_jsx","type","value","onChange","e","target","onKeyDown","_ref","key","placeholder","onClick","ref","downloadBarcode","svg","canvas","document","createElement","context","getContext","svgData","XMLSerializer","serializeToString","img","Image","svgBlob","Blob","url","URL","createObjectURL","onload","drawImage","revokeObjectURL","pngUrl","toDataURL","link","href","download","click","src","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Zoom"],"sourceRoot":""}