{"version":3,"file":"static/js/143.67c7c52e.chunk.js","mappings":"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","sources":["Components/ChatBot.js","Components/Loader.js"],"sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport \"../Styles/ChatBot.css\";\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst { dismiss } = toast;\r\n\r\nfunction ChatBot() {\r\n  const [apiKey, setApiKey] = useState(\"\");\r\n  const [isKeySubmitted, setIsKeySubmitted] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const textAreaRef = useRef(null);\r\n\r\n  // Generate response from Google GenAI using user-provided key\r\n  const generateResponse = async (prompt) => {\r\n    try {\r\n      const genAI = new GoogleGenerativeAI(apiKey);\r\n      const { response } = await genAI\r\n        .getGenerativeModel({ model: \"gemini-1.5-flash\" })\r\n        .generateContent(prompt);\r\n      return response.text();\r\n    } catch (error) {\r\n      console.error(error);\r\n      dismiss();\r\n      toast.error(\"Some error occurred while fetching response.\", {\r\n        theme: \"dark\",\r\n      });\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const toggleLoader = () => {\r\n    setLoading((prev) => !prev);\r\n  };\r\n\r\n  const onInpuCall = (e) => {\r\n    const { key } = e;\r\n    setPrompt(e.target.value);\r\n    if (key === \"Enter\") fetchResult();\r\n  };\r\n\r\n  const fetchResult = async () => {\r\n    if (!prompt) {\r\n      dismiss();\r\n      toast.info(\"Please enter something\", {\r\n        theme: \"dark\",\r\n        transition: Zoom,\r\n      });\r\n      inputRef.current.focus();\r\n    } else {\r\n      toggleLoader();\r\n      const result = await generateResponse(prompt);\r\n      toggleLoader();\r\n      textAreaRef.current.value = result;\r\n    }\r\n  };\r\n\r\n  const CopyToClip = () => {\r\n    const response = textAreaRef.current.value;\r\n    if (response) {\r\n      navigator.clipboard.writeText(response);\r\n      dismiss();\r\n      toast.success(\"Text copied to clipboard\", {\r\n        theme: \"dark\",\r\n        transition: Zoom,\r\n      });\r\n    } else {\r\n      dismiss();\r\n      toast.info(\"Nothing to copy\", {\r\n        theme: \"dark\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleKeySubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!apiKey.trim()) {\r\n      toast.error(\"API Key is required\", { theme: \"dark\" });\r\n      return;\r\n    }\r\n    setIsKeySubmitted(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>ChatBot</h2>\r\n\r\n      {!isKeySubmitted ? (\r\n        <form onSubmit={handleKeySubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Google GenAI API Key\"\r\n            value={apiKey}\r\n            onChange={(e) => setApiKey(e.target.value)}\r\n            style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n          />\r\n          <button type=\"submit\" style={{ padding: \"10px 20px\" }}>\r\n            Set API Key\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            onInput={(e) => onInpuCall(e)}\r\n            placeholder=\"Enter your prompt\"\r\n            ref={inputRef}\r\n            onKeyDown={onInpuCall}\r\n          />\r\n          <button onClick={() => fetchResult()}>Search</button>\r\n\r\n          <textarea\r\n            ref={textAreaRef}\r\n            placeholder=\"Your Result will be shown here ...\"\r\n            readOnly\r\n          ></textarea>\r\n\r\n          <button onClick={() => CopyToClip()}>Copy Text</button>\r\n        </>\r\n      )}\r\n\r\n      <Loader loading={loading} />\r\n\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        closeOnClick\r\n        pauseOnHover\r\n        draggable\r\n        theme=\"light\"\r\n        transition={Zoom}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot;\r\n","import \"../Styles/Loader.css\";\r\n\r\n// import { useState } from \"react\";\r\n// const [loading, setLoading] = useState(false); // State management here\r\n// function toggleLoader() {\r\n//   setLoading((prevLoading) => !prevLoading); // Toggle the loading state\r\n// }\r\nfunction Loader({ loading }) {\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div id=\"loader\">\r\n          <div className=\"spinner\"></div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n"],"names":["dismiss","toast","apiKey","setApiKey","useState","isKeySubmitted","setIsKeySubmitted","loading","setLoading","prompt","setPrompt","inputRef","useRef","textAreaRef","toggleLoader","prev","onInpuCall","e","key","target","value","fetchResult","async","result","genAI","GoogleGenerativeAI","response","getGenerativeModel","model","generateContent","text","error","console","theme","generateResponse","current","info","transition","Zoom","focus","_jsxs","className","children","_jsx","_Fragment","type","onInput","placeholder","ref","onKeyDown","onClick","readOnly","CopyToClip","navigator","clipboard","writeText","success","onSubmit","preventDefault","trim","onChange","style","width","padding","marginBottom","Loader","ToastContainer","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","_ref","id"],"sourceRoot":""}