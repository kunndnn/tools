{"version":3,"file":"static/js/524.c9b0b5cb.chunk.js","mappings":"6LAMA,MAAM,QAAEA,GAAYC,EAAAA,IAEZC,kBAAmBC,GAAYC,CAAAA,EA6HvC,QAzGA,WACE,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,IAC/BG,GAAcC,EAAAA,EAAAA,QAAO,MACrBC,GAAWD,EAAAA,EAAAA,QAAO,MAGxB,SAASE,EAAWC,GAClB,MAAM,IAAEC,GAAQD,EAChBL,EAAUK,EAAEE,OAAOC,OACP,UAARF,GAAiBG,GACvB,CAGA,SAASC,IACPb,GAAYc,IAAiBA,GAC/B,CAGA,MAAMF,EAAcG,UAClB,GAAKb,EAcE,CACLW,IACA,MAAMG,OAtDaD,WACvB,IACE,MAAME,EAAQ,IAAIC,EAAAA,GAAmBrB,IAE/B,SAAEsB,SAAmBF,EACxBG,mBAAmB,CAAEC,MAAO,qBAC5BC,gBAAgBpB,GAEnB,OADaiB,EAASI,MAExB,CAAE,MAAOC,GAKP,OAJA9B,IACAC,EAAAA,GAAM6B,MAAM,yBAA0B,CACpCC,MAAO,SAEF,EACT,GAuCyBC,CAAiBxB,GACtCW,IACAT,EAAYuB,QAAQhB,MAAQK,CAC9B,MAlBEtB,IACAC,EAAAA,GAAMiC,KAAK,yBAA0B,CACnCC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVX,MAAO,OACPY,WAAYC,EAAAA,KAEdhC,EAASqB,QAAQY,OAMnB,EA6BF,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,aACJF,EAAAA,EAAAA,KAAA,SACEK,KAAK,OACLC,QAAUtC,GAAMD,EAAWC,GAC3BuC,YAAY,oBACZC,IAAK1C,EACL2C,UAAW1C,KAEbiC,EAAAA,EAAAA,KAAA,UAAQU,QAASA,IAAMtC,IAAc8B,SAAC,aACtCF,EAAAA,EAAAA,KAAA,YACEQ,IAAK5C,EACL2C,YAAY,qCACZI,UAAQ,KAEVX,EAAAA,EAAAA,KAAA,UAAQU,QAASA,IA1CJE,MACjB,MAAMjC,EAAWf,EAAYuB,QAAQhB,MAEjCQ,GACFkC,UAAUC,UAAUC,UAAUpC,GAC9BzB,IACAC,EAAAA,GAAM6D,QAAQ,2BAA4B,CACxC3B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVX,MAAO,OACPY,WAAYC,EAAAA,OAGd5C,IACAC,EAAAA,GAAMiC,KAAK,kBAAmB,CAC5BH,MAAO,SAEX,EAoB2B2B,GAAaV,SAAC,eACrCF,EAAAA,EAAAA,KAACiB,EAAAA,QAAM,CAAC1D,QAASA,IAAW,KAC5ByC,EAAAA,EAAAA,KAACkB,EAAAA,GAAc,CACb7B,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjB4B,aAAa,EACb3B,cAAY,EACZ4B,KAAK,EACLC,kBAAgB,EAChB3B,WAAS,EACTD,cAAY,EACZR,MAAM,QACNY,WAAYC,EAAAA,SAKtB,C,4DChHA,QAZA,SAAewB,GAAe,IAAd,QAAE/D,GAAS+D,EACzB,OACEtB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACG3C,IACCyC,EAAAA,EAAAA,KAAA,OAAKuB,GAAG,SAAQrB,UACdF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAKzB,C","sources":["Components/ChatBot.js","Components/Loader.js"],"sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport \"../Styles/ChatBot.css\";\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nconst { dismiss } = toast;\r\n\r\nconst { REACT_APP_API_KEY: API_KEY } = process.env; // api key\r\n// generate the response from generative AI\r\nconst generateResponse = async (prompt) => {\r\n  try {\r\n    const genAI = new GoogleGenerativeAI(API_KEY);\r\n    //   const prompt = \"who is harry potter.\";\r\n    const { response } = await genAI\r\n      .getGenerativeModel({ model: \"gemini-1.5-flash\" })\r\n      .generateContent(prompt);\r\n    const text = response.text();\r\n    return text;\r\n  } catch (error) {\r\n    dismiss(); // Dismiss any existing toast notifications\r\n    toast.error(`Some Error occured !!!`, {\r\n      theme: \"dark\",\r\n    });\r\n    return \"\";\r\n  }\r\n};\r\n\r\nfunction ChatBot() {\r\n  const [loading, setLoading] = useState(false); // State management here\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const textAreaRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  //on input\r\n  function onInpuCall(e) {\r\n    const { key } = e;\r\n    setPrompt(e.target.value);\r\n    if (key === \"Enter\") fetchResult();\r\n  }\r\n\r\n  // toggle loader\r\n  function toggleLoader() {\r\n    setLoading((prevLoading) => !prevLoading); // Toggle the loading state\r\n  }\r\n\r\n  // fetch & set result from AI\r\n  const fetchResult = async () => {\r\n    if (!prompt) {\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      toast.info(\"Please enter something\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"dark\",\r\n        transition: Zoom,\r\n      });\r\n      inputRef.current.focus();\r\n    } else {\r\n      toggleLoader();\r\n      const result = await generateResponse(prompt);\r\n      toggleLoader();\r\n      textAreaRef.current.value = result;\r\n    }\r\n  };\r\n\r\n  //   copy to clipboard\r\n  const CopyToClip = () => {\r\n    const response = textAreaRef.current.value;\r\n\r\n    if (response) {\r\n      navigator.clipboard.writeText(response);\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      toast.success(\"Text copied to clipboard\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"dark\",\r\n        transition: Zoom,\r\n      });\r\n    } else {\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      toast.info(`Nothing to copy`, {\r\n        theme: \"dark\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatbot-container\">\r\n        <h2>ChatBot</h2>\r\n        <input\r\n          type=\"text\"\r\n          onInput={(e) => onInpuCall(e)}\r\n          placeholder=\"Enter your prompt\"\r\n          ref={inputRef}\r\n          onKeyDown={onInpuCall}\r\n        />\r\n        <button onClick={() => fetchResult()}>Search </button>\r\n        <textarea\r\n          ref={textAreaRef}\r\n          placeholder=\"Your Result will be shown here ...\"\r\n          readOnly\r\n        ></textarea>\r\n        <button onClick={() => CopyToClip()}>Copy Text</button>\r\n        <Loader loading={loading} /> {/* Pass loading state to Loader */}\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss\r\n          draggable\r\n          pauseOnHover\r\n          theme=\"light\"\r\n          transition={Zoom}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChatBot;\r\n","import \"../Styles/Loader.css\";\r\n\r\n// import { useState } from \"react\";\r\n// const [loading, setLoading] = useState(false); // State management here\r\n// function toggleLoader() {\r\n//   setLoading((prevLoading) => !prevLoading); // Toggle the loading state\r\n// }\r\nfunction Loader({ loading }) {\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div id=\"loader\">\r\n          <div className=\"spinner\"></div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n"],"names":["dismiss","toast","REACT_APP_API_KEY","API_KEY","process","loading","setLoading","useState","prompt","setPrompt","textAreaRef","useRef","inputRef","onInpuCall","e","key","target","value","fetchResult","toggleLoader","prevLoading","async","result","genAI","GoogleGenerativeAI","response","getGenerativeModel","model","generateContent","text","error","theme","generateResponse","current","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","Zoom","focus","_jsx","_Fragment","children","_jsxs","className","type","onInput","placeholder","ref","onKeyDown","onClick","readOnly","CopyToClip","navigator","clipboard","writeText","success","Loader","ToastContainer","newestOnTop","rtl","pauseOnFocusLoss","_ref","id"],"sourceRoot":""}