{"version":3,"file":"static/js/419.961dc8ea.chunk.js","mappings":"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","sources":["Components/Weather/Card.js","helpers/common.js","Components/Weather/Weather.js"],"sourcesContent":["import { formatTimestampToLocalDateTime } from \"../../helpers/common\";\r\nconst Card = ({ tempInfo }) => {\r\n  const {\r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset,\r\n  } = tempInfo;\r\n\r\n  return (\r\n    <>\r\n      <article className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className=\"wi wi-day-sunny\"></i>\r\n        </div>\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span>{temp} &deg;</span>\r\n          </div>\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{weathermood}</div>\r\n            <div className=\"place\">\r\n              {name},{country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"date\">{new Date().toLocaleString()}</div>\r\n        {/* our four divided section */}\r\n        <div className=\"extra-temp\">\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-sunset\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {formatTimestampToLocalDateTime(sunset)} <br />\r\n                Sunset\r\n              </p>\r\n            </div>\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-humidity\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {humidity}\r\n                <br />\r\n                humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className=\"wi wi-humidity\"></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">\r\n              {speed} <br />\r\n              Speed\r\n            </p>\r\n          </div>\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className=\"wi wi-humidity\"></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">\r\n              {pressure}\r\n              <br />\r\n              pressure\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","// import { genSalt } from \"bcryptjs\";\r\n// import crypto from \"crypto\";\r\n\r\n// export const randomString = async (salt = 12) => await genSalt(salt);\r\n// const string = await randomString();\r\n\r\nexport const reverseString = (str) => str.split(\"\").reverse().join(\"\");\r\n// const revStr = reverseString(\"hello world!\");\r\n\r\n// export const generateRandomString = (length = 6) =>\r\n//   crypto.randomBytes(length).toString(\"hex\").slice(0, length);\r\n// const mystring = generateRandomString(10);\r\n\r\nexport const deepCopy = (obj) => JSON.parse(JSON.stringify(obj)); // deep clone\r\n\r\nexport const randomNumber = (min, max) =>\r\n  Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nexport const isEmptyArray = (arr) => Array.isArray(arr) && !arr.length;\r\n\r\nexport const uniqueArray = (arr) => [...new Set(arr)];\r\n\r\nexport const camelToSnake = (str) => str.replace(/[A-Z]/g, \"_$&\").toLowerCase();\r\n\r\nexport const getUrlParams = () =>\r\n  Object.fromEntries(new URLSearchParams(window.location.search));\r\n\r\nexport const capitalizeFirstWord = (str) =>\r\n  str.replace(/\\b\\w/g, (char) => char.toUpperCase());\r\n\r\nexport const isEmptyObject = (obj) => Object.keys(obj).length === 0;\r\n\r\nexport const isPalindrome = (str) => {\r\n  const cleaned = str.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase();\r\n  return cleaned === cleaned.reverse().join(\"\");\r\n};\r\n\r\nexport const fetchJson = async (url) => await fetch(url).json();\r\n\r\nexport const getRandomColor = () =>\r\n  `#${Math.floor(Math.random() * 16777215).toString(16)}`;\r\n\r\nexport const toTitleCase = (str) =>\r\n  str\r\n    .toLowerCase()\r\n    .split(\" \")\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\" \");\r\n\r\nexport const getCurrentDateTime = () => new Date().toLocaleString();\r\n\r\nexport const flatArray = (arr) => arr.flat(Infinity);\r\n\r\nexport const sortByKey = (array, key) =>\r\n  array.sort((a, b) => (a[key] > b[key] ? a : -1));\r\n\r\nexport const isEven = (num) => num % 2 === 0;\r\n\r\nexport const genereteUUID = () =>\r\n  \"xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx\".replace(/[xy]/g, (c) =>\r\n    ((Math.random() * 16) | 0).toString(16)\r\n  );\r\n\r\nexport const getRandomElement = (arr) =>\r\n  arr[Math.floor(Math.random() * arr.length)];\r\n\r\nexport const celsisuToFarhenheit = (celsius) => (celsius * 9) / 5 + 32;\r\n\r\nexport const sumArray = (arr) => arr.reduce((acc, curr) => acc + curr, 0);\r\n\r\nexport const distinctCharacters = (str) => [...new Set(str)].join(\"\");\r\n\r\nexport const arrayToObject = (arr, key) =>\r\n  arr.reduce((obj, item) => {\r\n    obj[item[key]] = item;\r\n    return obj;\r\n  }, {});\r\n\r\nexport const countOccurences = (arr) =>\r\n  arr.reduce((acc, item) => {\r\n    acc[item] = (acc[item] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\nexport const removeItem = (arr, item) => arr((i) => i !== item);\r\n\r\nexport const areAnagrams = (str1, str2) => {\r\n  const normalize = (str) => str.split(\"\").sort().join(\"\");\r\n  return normalize(str1) === normalize(str2);\r\n};\r\n\r\nexport const toQueryString = (obj) =>\r\n  Object.keys(obj)\r\n    .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\r\n    .join(\"&\");\r\n\r\nexport const delay = (func, ms) => setTimeout(func, ms);\r\n\r\nexport const formatTimestampToLocalDateTime = (timestamp) =>\r\n  new Date(timestamp * 1000).toLocaleString();\r\n\r\n// Convert the timestamp to milliseconds\r\n\r\n// console.log(this.areAnagrams(\"hii\", \"iih\"));\r\n\r\n// nodemon .\\src\\utils\\helpers\\common.js\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./style.css\";\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nconst { REACT_APP_WEATHER_KEY } = process.env;\r\nconst Weather = () => {\r\n  const [searchValue, setSearchValue] = useState(\"chandigarh\");\r\n  const [tempInfo, setTempInfo] = useState({});\r\n  const [city, setCity] = useState(\"\");\r\n  const { dismiss } = toast;\r\n\r\n  const getCityName = async (latitude, longitude) => {\r\n    try {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${REACT_APP_WEATHER_KEY}`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setCity(data.name); // Set city name from the response\r\n    } catch (error) {\r\n      console.error(\"Error fetching city name:\", error);\r\n    }\r\n  };\r\n  const getWeatherInfo = async () => {\r\n    dismiss(); // Dismiss any existing toast notifications\r\n    try {\r\n      let url = ` https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=${REACT_APP_WEATHER_KEY}`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      const { temp, humidity, pressure } = data.main;\r\n      const { main: weathermood } = data.weather[0];\r\n      const { name } = data;\r\n      const { speed } = data.wind;\r\n      const { country, sunset } = data.sys;\r\n\r\n      const myNewWeather = {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n      };\r\n      setTempInfo(myNewWeather);\r\n    } catch (error) {\r\n      // console.log({ error });\r\n      toast.error(\"An error Occured\", { theme: \"dark\" });\r\n\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      getWeatherInfo();\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          getCityName(latitude, longitude); // Pass coordinates to get city name\r\n        },\r\n        (error) => {\r\n          console.error(\"Error fetching location:\", error);\r\n        }\r\n      );\r\n    }\r\n    getWeatherInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <div className=\"wrap\">\r\n          <div className=\"search\">\r\n            <input\r\n              type=\"search\"\r\n              placeholder=\"search ....\"\r\n              autoFocus\r\n              id=\"search\"\r\n              value={searchValue}\r\n              onChange={(e) => setSearchValue(e.target.value)}\r\n              onKeyDown={handleKeyPress}\r\n              className=\"searchTerm\"\r\n            />\r\n\r\n            <button\r\n              className=\"searchButton\"\r\n              type=\"button\"\r\n              onClick={() => getWeatherInfo()}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <Card tempInfo={tempInfo} />\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"light\"\r\n        transition={Zoom}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"names":["_ref","tempInfo","temp","humidity","pressure","weathermood","name","speed","country","sunset","_jsx","_Fragment","children","_jsxs","className","Date","toLocaleString","timestamp","REACT_APP_WEATHER_KEY","process","Weather","searchValue","setSearchValue","useState","setTempInfo","city","setCity","dismiss","toast","getWeatherInfo","async","url","res","fetch","data","json","main","weather","wind","sys","error","theme","useEffect","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","console","getCityName","type","placeholder","autoFocus","id","value","onChange","e","target","onKeyDown","event","key","onClick","Card","ToastContainer","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Zoom"],"sourceRoot":""}