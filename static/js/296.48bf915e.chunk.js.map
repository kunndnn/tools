{"version":3,"file":"static/js/296.48bf915e.chunk.js","mappings":"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","sources":["Components/ImageConverter.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from \"file-saver\";\r\nimport \"../Styles/ImageConverter.css\";\r\n\r\nfunction ImageConverter() {\r\n  const [images, setImages] = useState([]);\r\n  const [selectedFormat, setSelectedFormat] = useState(\"jpeg\");\r\n\r\n  const supportedFormats = [\r\n    \"jpeg\",\r\n    \"png\",\r\n    \"gif\",\r\n    \"webp\",\r\n    \"bmp\",\r\n    \"tiff\",\r\n    \"ico\",\r\n    \"svg\",\r\n    \"heif\",\r\n    \"heic\",\r\n    \"apng\",\r\n    \"raw\",\r\n    \"jp2\",\r\n    \"tga\",\r\n    \"xbm\",\r\n  ];\r\n\r\n  const handleImageUpload = (event) => {\r\n    const files = Array.from(event.target.files);\r\n    const validImages = files.filter((file) => file.type.startsWith(\"image/\"));\r\n\r\n    if (validImages.length === 0) {\r\n      alert(\"Please upload valid image files!\");\r\n      return;\r\n    }\r\n\r\n    const newImages = validImages.map((file) => {\r\n      const format = file.type.split(\"/\")[1];\r\n      const reader = new FileReader();\r\n      const image = {\r\n        src: null,\r\n        uploadedFormat: format,\r\n        converted: null,\r\n        name: file.name,\r\n      };\r\n\r\n      reader.onload = (e) => {\r\n        image.src = e.target.result;\r\n        setImages((prevImages) => [...prevImages, image]);\r\n      };\r\n      reader.readAsDataURL(file);\r\n\r\n      return image;\r\n    });\r\n  };\r\n\r\n  const convertAllImages = () => {\r\n    if (images.length === 0) return;\r\n\r\n    const updatedImages = images.map((image) => {\r\n      if (!image.src || !selectedFormat) return image;\r\n\r\n      const canvas = document.createElement(\"canvas\");\r\n      const img = new Image();\r\n\r\n      img.onload = () => {\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        const newImage = canvas.toDataURL(`image/${selectedFormat}`);\r\n        image.converted = newImage;\r\n      };\r\n\r\n      img.src = image.src;\r\n      return image;\r\n    });\r\n\r\n    setImages(updatedImages);\r\n  };\r\n\r\n  const downloadAll = async () => {\r\n    if (images.some((image) => !image.converted)) {\r\n      alert(\"Please convert all images first!\");\r\n      return;\r\n    }\r\n\r\n    const zip = new JSZip();\r\n\r\n    images.forEach((image) => {\r\n      const base64Data = image.converted.split(\",\")[1];\r\n      const fileName = `${image.name.split(\".\")[0]}.${selectedFormat}`;\r\n      zip.file(fileName, base64Data, { base64: true });\r\n    });\r\n\r\n    const zipBlob = await zip.generateAsync({ type: \"blob\" });\r\n    saveAs(zipBlob, \"converted-images.zip\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"title\">Image Converter</h2>\r\n\r\n      <div className=\"upload-section\">\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={handleImageUpload}\r\n          multiple\r\n          id=\"file-upload\"\r\n          className=\"file-input\"\r\n        />\r\n        <label htmlFor=\"file-upload\" className=\"file-input-label\">\r\n          Choose Images\r\n        </label>\r\n      </div>\r\n\r\n      {images.length > 0 && (\r\n        <>\r\n          <div className=\"convert-all-section\">\r\n            <select\r\n              value={selectedFormat}\r\n              onChange={(e) => setSelectedFormat(e.target.value)}\r\n              className=\"format-select\"\r\n            >\r\n              {supportedFormats.map((format) => (\r\n                <option key={format} value={format}>\r\n                  {format.toUpperCase()}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button onClick={convertAllImages} className=\"convert-button\">\r\n              Convert\r\n            </button>\r\n            {images.every((image) => image.converted) && (\r\n              <button onClick={downloadAll} className=\"download-button\">\r\n                Download All\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"images-container\">\r\n            {images.map((image, index) => (\r\n              <div key={index} className=\"image-card\">\r\n                <img\r\n                  src={image.src}\r\n                  alt={`Uploaded ${index + 1}`}\r\n                  className=\"image-preview\"\r\n                />\r\n                {image.converted && (\r\n                  <p>Converted to {selectedFormat.toUpperCase()}</p>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageConverter;\r\n"],"names":["images","setImages","useState","selectedFormat","setSelectedFormat","_jsxs","className","children","_jsx","type","accept","onChange","event","validImages","Array","from","target","files","filter","file","startsWith","length","alert","map","format","split","reader","FileReader","image","src","uploadedFormat","converted","name","onload","e","result","prevImages","readAsDataURL","multiple","id","htmlFor","_Fragment","value","toUpperCase","onClick","convertAllImages","updatedImages","canvas","document","createElement","img","Image","width","height","getContext","drawImage","newImage","toDataURL","every","async","some","zip","JSZip","forEach","base64Data","fileName","base64","zipBlob","generateAsync","saveAs","index","alt"],"sourceRoot":""}