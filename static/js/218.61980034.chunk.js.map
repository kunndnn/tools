{"version":3,"file":"static/js/218.61980034.chunk.js","mappings":"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","sources":["Components/TexttoImage.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst TextToImage = () => {\r\n  const [apiKey, setApiKey] = useState(\"\");\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [imageSrc, setImageSrc] = useState(\"\");\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const generateImage = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setImageSrc(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent?key=${apiKey}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [\r\n              {\r\n                parts: [\r\n                  {\r\n                    text: prompt,\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n            generationConfig: {\r\n              responseModalities: [\"TEXT\", \"IMAGE\"],\r\n            },\r\n          }),\r\n        }\r\n      );\r\n\r\n      const json = await response.json();\r\n      const parts = json?.candidates?.[0]?.content?.parts || [];\r\n      const imageData = parts.find((p) => p.inlineData?.data)?.inlineData?.data;\r\n\r\n      if (imageData) {\r\n        setImageSrc(`data:image/png;base64,${imageData}`);\r\n      } else {\r\n        alert(\"Image generation failed or no image returned.\");\r\n        console.error(json);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error:\", err);\r\n      alert(\"Something went wrong.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    if (!imageSrc) return;\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = imageSrc;\r\n    link.download = \"generated-image.png\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        maxWidth: \"600px\",\r\n        margin: \"40px auto\",\r\n        padding: \"20px\",\r\n        border: \"1px solid #ccc\",\r\n        borderRadius: \"8px\",\r\n      }}\r\n    >\r\n      {!submitted ? (\r\n        <form onSubmit={() => setSubmitted(true)}>\r\n          <label\r\n            style={{\r\n              display: \"block\",\r\n              marginBottom: \"8px\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            API Key\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            value={apiKey}\r\n            onChange={(e) => setApiKey(e.target.value)}\r\n            placeholder=\"Enter Google GenAI API Key\"\r\n            required\r\n            style={{\r\n              width: \"100%\",\r\n              padding: \"10px\",\r\n              marginBottom: \"16px\",\r\n              borderRadius: \"4px\",\r\n              border: \"1px solid #999\",\r\n            }}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            style={{\r\n              padding: \"10px 20px\",\r\n              background: \"#007BFF\",\r\n              color: \"#fff\",\r\n              border: \"none\",\r\n              borderRadius: \"4px\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          >\r\n            Continue\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <form onSubmit={generateImage}>\r\n          <label\r\n            style={{\r\n              display: \"block\",\r\n              marginBottom: \"8px\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            Prompt\r\n          </label>\r\n          <textarea\r\n            value={prompt}\r\n            onChange={(e) => setPrompt(e.target.value)}\r\n            placeholder=\"Enter your image prompt...\"\r\n            required\r\n            rows=\"5\"\r\n            style={{\r\n              width: \"100%\",\r\n              padding: \"10px\",\r\n              borderRadius: \"4px\",\r\n              border: \"1px solid #999\",\r\n              marginBottom: \"16px\",\r\n            }}\r\n          ></textarea>\r\n          <button\r\n            type=\"submit\"\r\n            disabled={loading}\r\n            style={{\r\n              padding: \"10px 20px\",\r\n              background: loading ? \"#ccc\" : \"#28a745\",\r\n              color: \"#fff\",\r\n              border: \"none\",\r\n              borderRadius: \"4px\",\r\n              cursor: loading ? \"not-allowed\" : \"pointer\",\r\n            }}\r\n          >\r\n            {loading ? \"Generating...\" : \"Generate Image\"}\r\n          </button>\r\n        </form>\r\n      )}\r\n\r\n      {imageSrc && (\r\n        <div style={{ marginTop: \"30px\", textAlign: \"center\" }}>\r\n          <h3>Generated Image:</h3>\r\n          <img\r\n            src={imageSrc}\r\n            alt=\"Generated\"\r\n            style={{ maxWidth: \"100%\", borderRadius: \"8px\", marginTop: \"10px\" }}\r\n          />\r\n          <div style={{ marginTop: \"15px\" }}>\r\n            <button\r\n              onClick={handleDownload}\r\n              style={{\r\n                padding: \"10px 20px\",\r\n                background: \"#444\",\r\n                color: \"#fff\",\r\n                border: \"none\",\r\n                borderRadius: \"4px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              Download Image\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextToImage;\r\n"],"names":["TextToImage","apiKey","setApiKey","useState","prompt","setPrompt","imageSrc","setImageSrc","submitted","setSubmitted","loading","setLoading","_jsxs","style","maxWidth","margin","padding","border","borderRadius","children","onSubmit","async","e","preventDefault","_json$candidates","_json$candidates$","_json$candidates$$con","_parts$find","_parts$find$inlineDat","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","generationConfig","responseModalities","json","imageData","candidates","content","find","p","_p$inlineData","inlineData","data","alert","console","error","err","_jsx","display","marginBottom","fontWeight","value","onChange","target","placeholder","required","rows","width","type","disabled","background","color","cursor","marginTop","textAlign","src","alt","onClick","handleDownload","link","document","createElement","href","download","appendChild","click","removeChild"],"sourceRoot":""}