{"version":3,"file":"static/js/909.1279300e.chunk.js","mappings":"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","sources":["Components/Common/CopyToClipBoard.js","Components/FileToBuffer.js","Components/Loader.js"],"sourcesContent":["import { toast, Zoom } from \"react-toastify\"; // Assuming you are using react-toastify\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nconst { success, info, dismiss } = toast;\r\n\r\nconst CopyToClipBoard = ({ textToCopy, style }) => {\r\n  const handleCopy = () => {\r\n    if (textToCopy) {\r\n      navigator.clipboard.writeText(textToCopy);\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      success(\"Text copied to clipboard\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"dark\",\r\n        transition: Zoom,\r\n      });\r\n    } else {\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      info(`Nothing to copy`, {\r\n        theme: \"dark\",\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <button style={style} onClick={handleCopy}>\r\n        Copy\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CopyToClipBoard;\r\n","import React, { useState, useRef } from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport CopyToClipBoard from \"./Common/CopyToClipBoard\";\r\n\r\nfunction FileToBuffer() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [output, setOutput] = useState(\"\"); // State to hold the output base64 string\r\n  const [bufferInput, setBufferInput] = useState(\"\"); // State to hold the input buffer for conversion\r\n  const fileInputRef = useRef(null); // Reference to file input\r\n  const { dismiss } = toast;\r\n\r\n  const toggleLoader = () => setLoading((prevLoading) => !prevLoading); // Toggle the loading state\r\n\r\n  const convertFile = () => {\r\n    const file = fileInputRef.current.files[0]; // Get the file from the input\r\n\r\n    if (!file) {\r\n      dismiss(); // Dismiss any existing toast notifications\r\n      toast.error(`Please choose a file !!!`, {\r\n        theme: \"dark\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = function (e) {\r\n      toggleLoader();\r\n      const base64String = e.target.result.split(\",\")[1]; // Extract base64 string\r\n      const mimeType = file.type || \"application/octet-stream\"; // Default to binary if empty\r\n\r\n      // Dynamically create data URI prefix using mimeType\r\n      const dataUriPrefix = `data:${mimeType};base64,`;\r\n\r\n      const fullDataUri = dataUriPrefix + base64String;\r\n      setOutput(fullDataUri); // Update state with the base64 string\r\n    };\r\n\r\n    reader.readAsDataURL(file); // Read the file as Data URL (base64 encoded string)\r\n    toggleLoader();\r\n  };\r\n\r\n  const handleBufferInputChange = (e) => {\r\n    setBufferInput(e.target.value); // Update the buffer input state\r\n  };\r\n\r\n  const convertBufferToFile = () => {\r\n    if (!bufferInput) {\r\n      toast.error(\"Please enter a valid base64 string!\", { theme: \"dark\" });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Extract base64 string (after the comma) and mime type (before the semicolon)\r\n      const base64Data = bufferInput.split(\",\")[1];\r\n      const mimeType = bufferInput.split(\":\")[1].split(\";\")[0];\r\n\r\n      // Decode the base64 string to byte characters\r\n      const byteCharacters = atob(base64Data);\r\n      const byteArrays = [];\r\n\r\n      // Convert the decoded base64 string into a byte array\r\n      for (let offset = 0; offset < byteCharacters.length; offset += 1024) {\r\n        const slice = byteCharacters.slice(offset, offset + 1024);\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n          byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n      }\r\n\r\n      // Create a Blob from the byte array and mime type\r\n      const blob = new Blob(byteArrays, { type: mimeType });\r\n\r\n      // Create a temporary download link\r\n      const link = document.createElement(\"a\");\r\n      link.href = URL.createObjectURL(blob);\r\n\r\n      // Generate a filename based on mime type (e.g., .png, .jpg, etc.)\r\n      const fileName = `downloaded-file.${mimeType.split(\"/\")[1]}`;\r\n      link.download = fileName; // Set the download file name\r\n\r\n      // Trigger the download\r\n      link.click();\r\n    } catch (error) {\r\n      // In case of an error, show a toast message\r\n      toast.error(\r\n        \"Error while processing the download. Please check your input!\",\r\n        {\r\n          theme: \"dark\",\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  // Inline styles for elements\r\n  const containerStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"80vh\", // Adjust height to fit within the viewport responsively\r\n    width: \"90vw\", // Ensure responsiveness for smaller devices\r\n    maxWidth: \"600px\", // Max width for larger screens\r\n    margin: \"auto\",\r\n    padding: \"20px\",\r\n    backgroundColor: \"#f0f0f0\",\r\n    borderRadius: \"15px\",\r\n    boxShadow: \"10px 10px 30px rgba(0, 0, 0, 0.2)\", // 3D shadow effect\r\n    transform: \"rotateX(5deg) rotateY(5deg)\", // Slight 3D tilt effect\r\n    perspective: \"1000px\", // Gives a 3D feel\r\n    overflowY: \"auto\", // Enables vertical scrolling when content exceeds the container's height\r\n    maxHeight: \"80vh\", // Limit the max height to 80% of the viewport height\r\n  };\r\n\r\n  const buttonStyle = {\r\n    padding: \"10px 20px\",\r\n    backgroundColor: \"#4CAF50\",\r\n    color: \"white\",\r\n    border: \"none\",\r\n    borderRadius: \"5px\",\r\n    cursor: \"pointer\",\r\n    margin: \"10px\",\r\n    whiteSpace: \"nowrap\", // Prevent text wrapping\r\n  };\r\n\r\n  const fileInputStyle = {\r\n    marginBottom: \"20px\",\r\n  };\r\n\r\n  const textAreaStyle = {\r\n    width: \"100%\",\r\n    padding: \"10px\",\r\n    fontSize: \"16px\",\r\n    borderRadius: \"5px\",\r\n    resize: \"none\", // Disable resize\r\n  };\r\n\r\n  const headingStyle = {\r\n    margin: \"20px 0\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={containerStyle}>\r\n        <input type=\"file\" ref={fileInputRef} style={fileInputStyle} />\r\n        <button style={buttonStyle} onClick={convertFile}>\r\n          Convert to Base64\r\n        </button>\r\n\r\n        <h2 style={headingStyle}>Output</h2>\r\n        <textarea value={output} rows=\"10\" style={textAreaStyle} readOnly />\r\n        <CopyToClipBoard textToCopy={output} style={buttonStyle} />\r\n\r\n        <h2 style={headingStyle}>Convert Buffer to File</h2>\r\n        <textarea\r\n          value={bufferInput}\r\n          onChange={handleBufferInputChange}\r\n          rows=\"10\"\r\n          style={textAreaStyle}\r\n          placeholder=\"Paste base64 data here\"\r\n        />\r\n        <button style={buttonStyle} onClick={convertBufferToFile}>\r\n          Convert Buffer to File\r\n        </button>\r\n      </div>\r\n      <Loader loading={loading} />\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"light\"\r\n        transition={Zoom}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FileToBuffer;\r\n","import \"../Styles/Loader.css\";\r\n\r\n// import { useState } from \"react\";\r\n// const [loading, setLoading] = useState(false); // State management here\r\n// function toggleLoader() {\r\n//   setLoading((prevLoading) => !prevLoading); // Toggle the loading state\r\n// }\r\nfunction Loader({ loading }) {\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div id=\"loader\">\r\n          <div className=\"spinner\"></div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n"],"names":["success","info","dismiss","toast","_ref","textToCopy","style","_jsx","_Fragment","children","onClick","handleCopy","navigator","clipboard","writeText","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","transition","Zoom","loading","setLoading","useState","output","setOutput","bufferInput","setBufferInput","fileInputRef","useRef","toggleLoader","prevLoading","buttonStyle","padding","backgroundColor","color","border","borderRadius","cursor","margin","whiteSpace","textAreaStyle","width","fontSize","resize","headingStyle","_jsxs","display","flexDirection","alignItems","justifyContent","height","maxWidth","boxShadow","transform","perspective","overflowY","maxHeight","type","ref","marginBottom","convertFile","file","current","files","error","reader","FileReader","onload","e","base64String","target","result","split","mimeType","readAsDataURL","value","rows","readOnly","CopyToClipBoard","onChange","placeholder","convertBufferToFile","base64Data","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","blob","Blob","link","document","createElement","href","URL","createObjectURL","fileName","download","click","Loader","ToastContainer","newestOnTop","rtl","pauseOnFocusLoss","id","className"],"sourceRoot":""}