{"version":3,"file":"static/js/928.1331026a.chunk.js","mappings":"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A,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,MACA,OACA,UACA,OACA,WACA,QACA,MACA,OACA,KACA,WACA,SACA,SACA,IACA,UACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,UACA,SACA,SACA,QACA,SACA,SACA,OACA,SACA,SACA,QACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,KACA,QACA,KACA,IACA,KACA,MACA,QACA,QAGW2E,EAAM3E,EAAO,CACxB,MACA,IACA,WACA,cACA,eACA,eACA,gBACA,mBACA,SACA,WACA,OACA,OACA,UACA,SACA,OACA,IACA,QACA,WACA,QACA,QACA,OACA,iBACA,SACA,OACA,WACA,QACA,OACA,UACA,UACA,WACA,iBACA,OACA,OACA,QACA,SACA,SACA,OACA,WACA,QACA,OACA,QACA,OACA,UAGW4E,EAAa5E,EAAO,CAC/B,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,iBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,iBAOW6E,EAAgB7E,EAAO,CAClC,UACA,gBACA,SACA,UACA,YACA,mBACA,iBACA,gBACA,gBACA,gBACA,QACA,YACA,OACA,eACA,YACA,UACA,gBACA,SACA,MACA,aACA,UACA,QAGW8E,EAAS9E,EAAO,CAC3B,OACA,WACA,SACA,UACA,QACA,SACA,KACA,aACA,gBACA,KACA,KACA,QACA,UACA,WACA,QACA,OACA,KACA,SACA,QACA,SACA,OACA,OACA,UACA,SACA,MACA,QACA,MACA,SACA,aACA,gBAKW+E,EAAmB/E,EAAO,CACrC,UACA,cACA,aACA,WACA,YACA,UACA,UACA,SACA,SACA,QACA,YACA,aACA,iBACA,cACA,SAGWgF,EAAOhF,EAAO,CAAC,UCpRfiF,EAAOjF,EAAO,CACzB,SACA,SACA,QACA,MACA,iBACA,eACA,uBACA,WACA,aACA,UACA,SACA,UACA,cACA,cACA,UACA,OACA,QACA,QACA,QACA,OACA,UACA,WACA,eACA,SACA,cACA,WACA,WACA,UACA,MACA,WACA,0BACA,wBACA,WACA,YACA,UACA,eACA,OACA,MACA,UACA,SACA,SACA,OACA,OACA,WACA,KACA,YACA,YACA,QACA,OACA,QACA,OACA,OACA,UACA,OACA,MACA,MACA,YACA,QACA,SACA,MACA,YACA,WACA,QACA,OACA,QACA,UACA,aACA,SACA,OACA,UACA,UACA,cACA,cACA,UACA,gBACA,sBACA,SACA,UACA,UACA,aACA,WACA,MACA,WACA,MACA,WACA,OACA,OACA,UACA,aACA,QACA,WACA,QACA,OACA,QACA,OACA,UACA,QACA,MACA,SACA,OACA,QACA,UACA,WACA,QACA,YACA,OACA,SACA,SACA,QACA,QACA,OACA,QACA,SAGWkF,EAAMlF,EAAO,CACxB,gBACA,aACA,WACA,qBACA,YACA,SACA,gBACA,gBACA,UACA,gBACA,iBACA,QACA,OACA,KACA,QACA,OACA,gBACA,YACA,YACA,QACA,sBACA,8BACA,gBACA,kBACA,KACA,KACA,IACA,KACA,KACA,kBACA,YACA,UACA,UACA,MACA,WACA,YACA,MACA,WACA,OACA,eACA,YACA,SACA,cACA,cACA,gBACA,cACA,YACA,mBACA,eACA,aACA,eACA,cACA,KACA,KACA,KACA,KACA,aACA,WACA,gBACA,oBACA,SACA,OACA,KACA,kBACA,KACA,MACA,YACA,IACA,KACA,KACA,KACA,KACA,UACA,YACA,aACA,WACA,OACA,eACA,iBACA,eACA,mBACA,iBACA,QACA,aACA,aACA,eACA,eACA,cACA,cACA,mBACA,YACA,MACA,OACA,QACA,SACA,OACA,MACA,OACA,aACA,SACA,WACA,UACA,QACA,SACA,cACA,SACA,WACA,cACA,OACA,aACA,sBACA,mBACA,eACA,SACA,gBACA,sBACA,iBACA,IACA,KACA,KACA,SACA,OACA,OACA,cACA,YACA,UACA,SACA,SACA,QACA,OACA,kBACA,QACA,mBACA,mBACA,eACA,cACA,eACA,cACA,aACA,eACA,mBACA,oBACA,iBACA,kBACA,oBACA,iBACA,SACA,eACA,QACA,eACA,iBACA,WACA,cACA,UACA,UACA,YACA,mBACA,cACA,kBACA,iBACA,aACA,OACA,KACA,KACA,UACA,SACA,UACA,aACA,UACA,aACA,gBACA,gBACA,QACA,eACA,OACA,eACA,mBACA,mBACA,IACA,KACA,KACA,QACA,IACA,KACA,KACA,IACA,eAGWmF,EAASnF,EAAO,CAC3B,SACA,cACA,QACA,WACA,QACA,eACA,cACA,aACA,aACA,QACA,MACA,UACA,eACA,WACA,QACA,QACA,SACA,OACA,KACA,UACA,SACA,gBACA,SACA,SACA,iBACA,YACA,WACA,cACA,UACA,UACA,gBACA,WACA,WACA,OACA,WACA,WACA,aACA,UACA,SACA,SACA,cACA,gBACA,uBACA,YACA,YACA,aACA,WACA,iBACA,iBACA,YACA,UACA,QACA,UAGWoF,EAAMpF,EAAO,CACxB,aACA,SACA,cACA,YACA,gBC9WWqF,EAAgBpF,EAAK,6BACrBqF,EAAWrF,EAAK,yBAChBsF,EAActF,EAAK,iBACnBuF,EAAYvF,EAAK,gCACjBwF,EAAYxF,EAAK,kBACjByF,EAAiBzF,EAC5B,6FAEW0F,EAAoB1F,EAAK,yBACzB2F,EAAkB3F,EAC7B,+DAEW4F,EAAe5F,EAAK,WACpB6F,EAAiB7F,EAAK,2NCmBnC,MAAM8F,GACK,EADLA,GAGE,EAHFA,GAOoB,EAPpBA,GAQK,EARLA,GASM,EAMNC,GAAY,WAChB,MAAyB,qBAAXC,OAAyB,KAAOA,MAChD,EA4kDA,IAAAC,GA1gDA,SAASC,IAAgD,IAAhCF,EAAqBnD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAAkD,KAC5C,MAAMI,EAAwBC,GAAqBF,EAAgBE,GAMnE,GAJAD,EAAUE,QAAU,QAEpBF,EAAUG,QAAU,IAGjBN,IACAA,EAAOO,UACRP,EAAOO,SAASC,WAAaV,KAC5BE,EAAOS,QAMR,OAFAN,EAAUO,aAAc,EAEjBP,EAGT,IAAI,SAAEI,GAAaP,EAEnB,MAAMW,EAAmBJ,EACnBK,EACJD,EAAiBC,eACb,iBACJC,EAAgB,oBAChBC,EAAmB,KACnBC,EAAI,QACJN,EAAO,WACPO,EAAU,aACVC,EAAejB,EAAOiB,cAAiBjB,EAAekB,gBAAe,gBACrEC,EAAe,UACfC,EAAS,aACTC,GACErB,EAEEsB,EAAmBb,EAAQ5F,UAE3B0G,EAAYlD,EAAaiD,EAAkB,aAC3CE,EAASnD,EAAaiD,EAAkB,UACxCG,EAAiBpD,EAAaiD,EAAkB,eAChDI,EAAgBrD,EAAaiD,EAAkB,cAC/CK,EAAgBtD,EAAaiD,EAAkB,cAQrD,GAAmC,oBAAxBR,EAAoC,CAC7C,MAAMc,EAAWrB,EAASsB,cAAc,YACpCD,EAASE,SAAWF,EAASE,QAAQC,gBACvCxB,EAAWqB,EAASE,QAAQC,cAEhC,CAEA,IAAIC,GACAC,GAAY,GAEhB,MAAM,eACJC,GAAc,mBACdC,GAAkB,uBAClBC,GAAsB,qBACtBC,IACE9B,GACE,WAAE+B,IAAe3B,EAEvB,IAAI4B,GAlFG,CACLC,wBAAyB,GACzBC,sBAAuB,GACvBC,uBAAwB,GACxBC,yBAA0B,GAC1BC,uBAAwB,GACxBC,wBAAyB,GACzBC,sBAAuB,GACvBC,oBAAqB,GACrBC,uBAAwB,IA8E1B7C,EAAUO,YACW,oBAAZjH,GACkB,oBAAlBkI,GACPO,SACsC1E,IAAtC0E,GAAee,mBAEjB,MAAM,cACJ7D,GAAa,SACbC,GAAQ,YACRC,GAAW,UACXC,GAAS,UACTC,GAAS,kBACTE,GAAiB,gBACjBC,GAAe,eACfE,IACEqD,GAEJ,IAAMzD,eAAA0D,IAAmBD,GAQrBE,GAAe,KACnB,MAAMC,GAAuBjG,EAAS,CAAC,EAAG,IACrCqB,KACAC,KACAC,KACAE,KACAE,IAIL,IAAIuE,GAAe,KACnB,MAAMC,GAAuBnG,EAAS,CAAC,EAAG,IACrC4B,KACAC,KACAC,KACAC,IASL,IAAIqE,GAA0B1J,OAAOE,KACnCC,EAAO,KAAM,CACXwJ,aAAc,CACZC,UAAU,EACVC,cAAc,EACdC,YAAY,EACZ1F,MAAO,MAET2F,mBAAoB,CAClBH,UAAU,EACVC,cAAc,EACdC,YAAY,EACZ1F,MAAO,MAET4F,+BAAgC,CAC9BJ,UAAU,EACVC,cAAc,EACdC,YAAY,EACZ1F,OAAO,MAMT6F,GAAc,KAGdC,GAAc,KAGdC,IAAkB,EAGlBC,IAAkB,EAGlBC,IAA0B,EAI1BC,IAA2B,EAK3BC,IAAqB,EAKrBC,IAAe,EAGfC,IAAiB,EAGjBC,IAAa,EAIbC,IAAa,EAMbC,IAAa,EAIbC,IAAsB,EAItBC,IAAsB,EAKtBC,IAAe,EAefC,IAAuB,EAIvBC,IAAe,EAIfC,IAAW,EAGXC,GAA0C,CAAC,EAG3CC,GAAkB,KACtB,MAAMC,GAA0B/H,EAAS,CAAC,EAAG,CAC3C,iBACA,QACA,WACA,OACA,gBACA,OACA,SACA,OACA,KACA,KACA,KACA,KACA,QACA,UACA,WACA,WACA,YACA,SACA,QACA,MACA,WACA,QACA,QACA,QACA,QAIF,IAAIgI,GAAgB,KACpB,MAAMC,GAAwBjI,EAAS,CAAC,EAAG,CACzC,QACA,QACA,MACA,SACA,QACA,UAIF,IAAIkI,GAAsB,KAC1B,MAAMC,GAA8BnI,EAAS,CAAC,EAAG,CAC/C,MACA,QACA,MACA,KACA,QACA,OACA,UACA,cACA,OACA,UACA,QACA,QACA,QACA,UAGIoI,GAAmB,qCACnBC,GAAgB,6BAChBC,GAAiB,+BAEvB,IAAIC,GAAYD,GACZE,IAAiB,EAGjBC,GAAqB,KACzB,MAAMC,GAA6B1I,EACjC,CAAC,EACD,CAACoI,GAAkBC,GAAeC,IAClChK,GAGF,IAAIqK,GAAiC3I,EAAS,CAAC,EAAG,CAChD,KACA,KACA,KACA,KACA,UAGE4I,GAA0B5I,EAAS,CAAC,EAAG,CAAC,mBAM5C,MAAM6I,GAA+B7I,EAAS,CAAC,EAAG,CAChD,QACA,QACA,OACA,IACA,WAIF,IAAI8I,GAAmD,KACvD,MAAMC,GAA+B,CAAC,wBAAyB,aAE/D,IAAI5I,GAA2D,KAG3D6I,GAAwB,KAK5B,MAAMC,GAAc9F,EAASsB,cAAc,QAErCyE,GAAoB,SACxBC,GAEA,OAAOA,aAAqBhK,QAAUgK,aAAqBC,UASvDC,GAAe,WAA0B,IAAhBC,EAAA7J,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAc,CAAC,EAC5C,IAAIuJ,IAAUA,KAAWM,EAAzB,CA6LA,GAxLKA,GAAsB,kBAARA,IACjBA,EAAM,CAAC,GAITA,EAAM5I,EAAM4I,GAEZR,IAEmE,IAAjEC,GAA6BlK,QAAQyK,EAAIR,mBAtCX,YAwC1BQ,EAAIR,kBAGV3I,GACwB,0BAAtB2I,GACIxK,EACAH,EAGN6H,GAAehH,EAAqBsK,EAAK,gBACrCtJ,EAAS,CAAC,EAAGsJ,EAAItD,aAAc7F,IAC/B8F,GACJC,GAAelH,EAAqBsK,EAAK,gBACrCtJ,EAAS,CAAC,EAAGsJ,EAAIpD,aAAc/F,IAC/BgG,GACJsC,GAAqBzJ,EAAqBsK,EAAK,sBAC3CtJ,EAAS,CAAC,EAAGsJ,EAAIb,mBAAoBnK,GACrCoK,GACJR,GAAsBlJ,EAAqBsK,EAAK,qBAC5CtJ,EACEU,EAAMyH,IACNmB,EAAIC,kBACJpJ,IAEFgI,GACJH,GAAgBhJ,EAAqBsK,EAAK,qBACtCtJ,EACEU,EAAMuH,IACNqB,EAAIE,kBACJrJ,IAEF8H,GACJH,GAAkB9I,EAAqBsK,EAAK,mBACxCtJ,EAAS,CAAC,EAAGsJ,EAAIxB,gBAAiB3H,IAClC4H,GACJpB,GAAc3H,EAAqBsK,EAAK,eACpCtJ,EAAS,CAAC,EAAGsJ,EAAI3C,YAAaxG,IAC9B,CAAC,EACLyG,GAAc5H,EAAqBsK,EAAK,eACpCtJ,EAAS,CAAC,EAAGsJ,EAAI1C,YAAazG,IAC9B,CAAC,EACL0H,KAAe7I,EAAqBsK,EAAK,iBACrCA,EAAIzB,aAERhB,IAA0C,IAAxByC,EAAIzC,gBACtBC,IAA0C,IAAxBwC,EAAIxC,gBACtBC,GAA0BuC,EAAIvC,0BAA2B,EACzDC,IAA4D,IAAjCsC,EAAItC,yBAC/BC,GAAqBqC,EAAIrC,qBAAsB,EAC/CC,IAAoC,IAArBoC,EAAIpC,aACnBC,GAAiBmC,EAAInC,iBAAkB,EACvCG,GAAagC,EAAIhC,aAAc,EAC/BC,GAAsB+B,EAAI/B,sBAAuB,EACjDC,GAAsB8B,EAAI9B,sBAAuB,EACjDH,GAAaiC,EAAIjC,aAAc,EAC/BI,IAAoC,IAArB6B,EAAI7B,aACnBC,GAAuB4B,EAAI5B,uBAAwB,EACnDC,IAAoC,IAArB2B,EAAI3B,aACnBC,GAAW0B,EAAI1B,WAAY,EAC3B7B,GAAiBuD,EAAIG,oBAAsBpH,EAC3CkG,GAAYe,EAAIf,WAAaD,GAC7BK,GACEW,EAAIX,gCAAkCA,GACxCC,GACEU,EAAIV,yBAA2BA,GAEjCxC,GAA0BkD,EAAIlD,yBAA2B,CAAC,EAExDkD,EAAIlD,yBACJ8C,GAAkBI,EAAIlD,wBAAwBC,gBAE9CD,GAAwBC,aACtBiD,EAAIlD,wBAAwBC,cAI9BiD,EAAIlD,yBACJ8C,GAAkBI,EAAIlD,wBAAwBK,sBAE9CL,GAAwBK,mBACtB6C,EAAIlD,wBAAwBK,oBAI9B6C,EAAIlD,yBAEF,mBADKkD,EAAIlD,wBAAwBM,iCAGnCN,GAAwBM,+BACtB4C,EAAIlD,wBAAwBM,gCAG5BO,KACFH,IAAkB,GAGhBS,KACFD,IAAa,GAIXO,KACF7B,GAAehG,EAAS,CAAC,EAAG2B,GAC5BuE,GAAe,IACW,IAAtB2B,GAAajG,OACf5B,EAASgG,GAAc3E,GACvBrB,EAASkG,GAActE,KAGA,IAArBiG,GAAahG,MACf7B,EAASgG,GAAc1E,GACvBtB,EAASkG,GAAcrE,GACvB7B,EAASkG,GAAcnE,KAGO,IAA5B8F,GAAatG,aACfvB,EAASgG,GAAczE,GACvBvB,EAASkG,GAAcrE,GACvB7B,EAASkG,GAAcnE,KAGG,IAAxB8F,GAAa/F,SACf9B,EAASgG,GAAcvE,GACvBzB,EAASkG,GAAcpE,GACvB9B,EAASkG,GAAcnE,KAKvBuH,EAAII,WACF1D,KAAiBC,KACnBD,GAAetF,EAAMsF,KAGvBhG,EAASgG,GAAcsD,EAAII,SAAUvJ,KAGnCmJ,EAAIK,WACFzD,KAAiBC,KACnBD,GAAexF,EAAMwF,KAGvBlG,EAASkG,GAAcoD,EAAIK,SAAUxJ,KAGnCmJ,EAAIC,mBACNvJ,EAASkI,GAAqBoB,EAAIC,kBAAmBpJ,IAGnDmJ,EAAIxB,kBACFA,KAAoBC,KACtBD,GAAkBpH,EAAMoH,KAG1B9H,EAAS8H,GAAiBwB,EAAIxB,gBAAiB3H,KAI7CwH,KACF3B,GAAa,UAAW,GAItBmB,IACFnH,EAASgG,GAAc,CAAC,OAAQ,OAAQ,SAItCA,GAAa4D,QACf5J,EAASgG,GAAc,CAAC,iBACjBW,GAAYkD,OAGjBP,EAAIQ,qBAAsB,CAC5B,GAAmD,oBAAxCR,EAAIQ,qBAAqBC,WAClC,MAAM1K,EACJ,+EAIJ,GAAwD,oBAA7CiK,EAAIQ,qBAAqBE,gBAClC,MAAM3K,EACJ,oFAKJuF,GAAqB0E,EAAIQ,qBAGzBjF,GAAYD,GAAmBmF,WAAW,GAC5C,WAE6B3J,IAAvBwE,KACFA,GA5mB0B,SAChCX,EACAgG,GAEA,GAC0B,kBAAjBhG,GAC8B,oBAA9BA,EAAaiG,aAEpB,OAAO,KAMT,IAAIC,EAAS,KACb,MAAMC,EAAY,wBACdH,GAAqBA,EAAkBI,aAAaD,KACtDD,EAASF,EAAkBK,aAAaF,IAG1C,MAAMG,EAAa,aAAeJ,EAAS,IAAMA,EAAS,IAE1D,IACE,OAAOlG,EAAaiG,aAAaK,EAAY,CAC3CR,WAAWnI,GACFA,EAEToI,gBAAgBQ,GACPA,IAGX,MAAOC,GAOP,OAHAC,QAAQC,KACN,uBAAyBJ,EAAa,0BAEjC,IACT,CACF,CAokB6BK,CACnB3G,EACAT,IAKuB,OAAvBoB,IAAoD,kBAAdC,KACxCA,GAAYD,GAAmBmF,WAAW,KAM1CpN,GACFA,EAAO2M,GAGTN,GAASM,CAlOT,GAwOIuB,GAAe7K,EAAS,CAAC,EAAG,IAC7BsB,KACAC,KACAC,IAECsJ,GAAkB9K,EAAS,CAAC,EAAG,IAChCyB,KACAC,IAqHCqJ,GAAe,SAAUC,GAC7BjN,EAAUgF,EAAUG,QAAS,CAAE5C,QAAS0K,IAExC,IAEEzG,EAAcyG,GAAMC,YAAYD,GAChC,MAAOP,GACPrG,EAAO4G,EACT,GASIE,GAAmB,SAAUC,EAAc7K,GAC/C,IACEvC,EAAUgF,EAAUG,QAAS,CAC3BkI,UAAW9K,EAAQ+K,iBAAiBF,GACpCG,KAAMhL,IAER,MAAOmK,GACP1M,EAAUgF,EAAUG,QAAS,CAC3BkI,UAAW,KACXE,KAAMhL,GAEV,CAKA,GAHAA,EAAQiL,gBAAgBJ,GAGX,OAATA,EACF,GAAI7D,IAAcC,GAChB,IACEwD,GAAazK,EACf,CAAE,MAAOmK,GAAI,MAEb,IACEnK,EAAQkL,aAAaL,EAAM,GAC7B,CAAE,MAAOV,GAAI,GAWbgB,GAAgB,SAAUC,GAE9B,IAAIC,EAAM,KACNC,EAAoB,KAExB,GAAIvE,GACFqE,EAAQ,oBAAsBA,MACzB,CAEL,MAAMG,EAAUrN,EAAYkN,EAAO,eACnCE,EAAoBC,GAAWA,EAAQ,EACzC,CAGwB,0BAAtB/C,IACAP,KAAcD,KAGdoD,EACE,iEACAA,EACA,kBAGJ,MAAMI,EAAelH,GACjBA,GAAmBmF,WAAW2B,GAC9BA,EAKJ,GAAInD,KAAcD,GAChB,IACEqD,GAAM,IAAI3H,GAAY+H,gBAAgBD,EAAchD,GACtD,CAAE,MAAO2B,GAAI,CAIf,IAAKkB,IAAQA,EAAIK,gBAAiB,CAChCL,EAAM7G,GAAemH,eAAe1D,GAAW,WAAY,MAC3D,IACEoD,EAAIK,gBAAgBE,UAAY1D,GAC5B3D,GACAiH,EACJ,MAAOrB,GACP,CAEJ,CAEA,MAAM0B,EAAOR,EAAIQ,MAAQR,EAAIK,gBAU7B,OARIN,GAASE,GACXO,EAAKC,aACHjJ,EAASkJ,eAAeT,GACxBO,EAAKG,WAAW,IAAM,MAKtB/D,KAAcD,GACTrD,GAAqBsH,KAC1BZ,EACAxE,GAAiB,OAAS,QAC1B,GAGGA,GAAiBwE,EAAIK,gBAAkBG,GAS1CK,GAAsB,SAAUxJ,GACpC,OAAO+B,GAAmBwH,KACxBvJ,EAAK2B,eAAiB3B,EACtBA,EAEAY,EAAW6I,aACT7I,EAAW8I,aACX9I,EAAW+I,UACX/I,EAAWgJ,4BACXhJ,EAAWiJ,mBACb,OAUEC,GAAe,SAAUxM,GAC7B,OACEA,aAAmByD,IACU,kBAArBzD,EAAQyM,UACiB,kBAAxBzM,EAAQ0M,aACgB,oBAAxB1M,EAAQ2K,eACb3K,EAAQ2M,sBAAsBpJ,IACG,oBAA5BvD,EAAQiL,iBACiB,oBAAzBjL,EAAQkL,cACiB,kBAAzBlL,EAAQ4M,cACiB,oBAAzB5M,EAAQ8L,cACkB,oBAA1B9L,EAAQ6M,gBAUfC,GAAU,SAAUtM,GACxB,MAAuB,oBAAT6C,GAAuB7C,aAAiB6C,GAGxD,SAAS0J,GAOPlI,EAAYmI,EAA+BC,GAC3CjQ,EAAa6H,GAAQqI,IACnBA,EAAKjB,KAAKxJ,EAAWuK,EAAaC,EAAMvE,GAAO,GAEnD,CAWA,MAAMyE,GAAoB,SAAUH,GAClC,IAAI5I,EAAU,KAMd,GAHA2I,GAAclI,GAAMK,uBAAwB8H,EAAa,MAGrDR,GAAaQ,GAEf,OADAvC,GAAauC,IACN,EAIT,MAAMI,EAAUvN,GAAkBmN,EAAYP,UAS9C,GANAM,GAAclI,GAAMQ,oBAAqB2H,EAAa,CACpDI,UACAC,YAAa3H,KAKbsH,EAAYH,kBACXC,GAAQE,EAAYM,oBACrB1O,EAAW,WAAYoO,EAAYpB,YACnChN,EAAW,WAAYoO,EAAYN,aAGnC,OADAjC,GAAauC,IACN,EAIT,GAAIA,EAAYlK,WAAaV,GAE3B,OADAqI,GAAauC,IACN,EAIT,GACEpG,IACAoG,EAAYlK,WAAaV,IACzBxD,EAAW,UAAWoO,EAAYC,MAGlC,OADAxC,GAAauC,IACN,EAIT,IAAKtH,GAAa0H,IAAY/G,GAAY+G,GAAU,CAElD,IAAK/G,GAAY+G,IAAYG,GAAsBH,GAAU,CAC3D,GACEtH,GAAwBC,wBAAwBlH,QAChDD,EAAWkH,GAAwBC,aAAcqH,GAEjD,OAAO,EAGT,GACEtH,GAAwBC,wBAAwB+C,UAChDhD,GAAwBC,aAAaqH,GAErC,OAAO,CAEX,CAGA,GAAI/F,KAAiBG,GAAgB4F,GAAU,CAC7C,MAAMI,EAAavJ,EAAc+I,IAAgBA,EAAYQ,WACvDxB,EAAahI,EAAcgJ,IAAgBA,EAAYhB,WAE7D,GAAIA,GAAcwB,EAAY,CAG5B,IAAK,IAAIC,EAFUzB,EAAW5M,OAEJ,EAAGqO,GAAK,IAAKA,EAAG,CACxC,MAAMC,EAAa7J,EAAUmI,EAAWyB,IAAI,GAC5CC,EAAWC,gBAAkBX,EAAYW,gBAAkB,GAAK,EAChEH,EAAW1B,aAAa4B,EAAY3J,EAAeiJ,GACrD,CACF,CACF,CAGA,OADAvC,GAAauC,IACN,CACT,CAGA,OAAIA,aAAuBjK,IAtYA,SAAU/C,GACrC,IAAI4N,EAAS3J,EAAcjE,GAItB4N,GAAWA,EAAOR,UACrBQ,EAAS,CACPhB,aAAc3E,GACdmF,QAAS,aAIb,MAAMA,EAAUvP,EAAkBmC,EAAQoN,SACpCS,EAAgBhQ,EAAkB+P,EAAOR,SAE/C,QAAKjF,GAAmBnI,EAAQ4M,gBAI5B5M,EAAQ4M,eAAiB7E,GAIvB6F,EAAOhB,eAAiB5E,GACP,QAAZoF,EAMLQ,EAAOhB,eAAiB9E,GAEZ,QAAZsF,IACmB,mBAAlBS,GACCxF,GAA+BwF,IAM9BC,QAAQvD,GAAa6C,IAG1BpN,EAAQ4M,eAAiB9E,GAIvB8F,EAAOhB,eAAiB5E,GACP,SAAZoF,EAKLQ,EAAOhB,eAAiB7E,GACP,SAAZqF,GAAsB9E,GAAwBuF,GAKhDC,QAAQtD,GAAgB4C,IAG7BpN,EAAQ4M,eAAiB5E,KAKzB4F,EAAOhB,eAAiB7E,KACvBO,GAAwBuF,OAMzBD,EAAOhB,eAAiB9E,KACvBO,GAA+BwF,MAQ/BrD,GAAgB4C,KAChB7E,GAA6B6E,KAAa7C,GAAa6C,MAMpC,0BAAtB5E,KACAL,GAAmBnI,EAAQ4M,gBA2SUmB,CAAqBf,IAC1DvC,GAAauC,IACN,GAKM,aAAZI,GACa,YAAZA,GACY,aAAZA,IACFxO,EAAW,8BAA+BoO,EAAYpB,YAOpDjF,IAAsBqG,EAAYlK,WAAaV,KAEjDgC,EAAU4I,EAAYN,YAEtB1P,EAAa,CAAC0E,GAAeC,GAAUC,KAAeoM,IACpD5J,EAAUhG,EAAcgG,EAAS4J,EAAM,IAAI,IAGzChB,EAAYN,cAAgBtI,IAC9B3G,EAAUgF,EAAUG,QAAS,CAAE5C,QAASgN,EAAYnJ,cACpDmJ,EAAYN,YAActI,IAK9B2I,GAAclI,GAAME,sBAAuBiI,EAAa,OAEjD,IAtBLvC,GAAauC,IACN,IAiCLiB,GAAoB,SACxBC,EACAC,EACA3N,GAGA,GACE2G,KACY,OAAXgH,GAA8B,SAAXA,KACnB3N,KAASqC,GAAYrC,KAASmI,IAE/B,OAAO,EAOT,GACEnC,KACCF,GAAY6H,IACbvP,EAAWiD,GAAWsM,SAGjB,GAAI5H,IAAmB3H,EAAWkD,GAAWqM,SAG7C,IAAKvI,GAAauI,IAAW7H,GAAY6H,IAC9C,KAIGZ,GAAsBW,KACnBpI,GAAwBC,wBAAwBlH,QAChDD,EAAWkH,GAAwBC,aAAcmI,IAChDpI,GAAwBC,wBAAwB+C,UAC/ChD,GAAwBC,aAAamI,MACvCpI,GAAwBK,8BAA8BtH,QACtDD,EAAWkH,GAAwBK,mBAAoBgI,IACtDrI,GAAwBK,8BAA8B2C,UACrDhD,GAAwBK,mBAAmBgI,KAGrC,OAAXA,GACCrI,GAAwBM,iCACtBN,GAAwBC,wBAAwBlH,QAChDD,EAAWkH,GAAwBC,aAAcvF,IAChDsF,GAAwBC,wBAAwB+C,UAC/ChD,GAAwBC,aAAavF,KAK3C,OAAO,OAGJ,GAAIoH,GAAoBuG,SAIxB,GACLvP,EAAW6G,GAAgBrH,EAAcoC,EAAOyB,GAAiB,WAK5D,GACO,QAAXkM,GAA+B,eAAXA,GAAsC,SAAXA,GACtC,WAAVD,GACkC,IAAlC5P,EAAckC,EAAO,WACrBkH,GAAcwG,IAMT,GACLzH,KACC7H,EAAWoD,GAAmB5D,EAAcoC,EAAOyB,GAAiB,WAIhE,GAAIzB,EACT,OAAO,OAMT,OAAO,GAWH+M,GAAwB,SAAUH,GACtC,MAAmB,mBAAZA,GAAgClP,EAAYkP,EAASjL,KAaxDiM,GAAsB,SAAUpB,GAEpCD,GAAclI,GAAMI,yBAA0B+H,EAAa,MAE3D,MAAM,WAAEL,GAAeK,EAGvB,IAAKL,GAAcH,GAAaQ,GAC9B,OAGF,MAAMqB,EAAY,CAChBC,SAAU,GACVC,UAAW,GACXC,UAAU,EACVC,kBAAmB7I,GACnB8I,mBAAe5O,GAEjB,IAAIC,EAAI4M,EAAWvN,OAGnB,KAAOW,KAAK,CACV,MAAM4O,EAAOhC,EAAW5M,IAClB,KAAE8K,EAAI,aAAE+B,EAAcpM,MAAO+N,GAAcI,EAC3CR,EAAStO,GAAkBgL,GAEjC,IAAIrK,EAAiB,UAATqK,EAAmB0D,EAAY/P,EAAW+P,GAsBtD,GAnBAF,EAAUC,SAAWH,EACrBE,EAAUE,UAAY/N,EACtB6N,EAAUG,UAAW,EACrBH,EAAUK,mBAAgB5O,EAC1BiN,GAAclI,GAAMO,sBAAuB4H,EAAaqB,GACxD7N,EAAQ6N,EAAUE,WAKdnH,IAAoC,OAAX+G,GAA8B,SAAXA,IAE9CvD,GAAiBC,EAAMmC,GAGvBxM,EAp9B8B,gBAo9BQA,GAIpCoG,IAAgBhI,EAAW,gCAAiC4B,GAAQ,CACtEoK,GAAiBC,EAAMmC,GACvB,QACF,CAGA,GAAIqB,EAAUK,cACZ,SAOF,GAHA9D,GAAiBC,EAAMmC,IAGlBqB,EAAUG,SACb,SAIF,IAAK9H,IAA4B9H,EAAW,OAAQ4B,GAAQ,CAC1DoK,GAAiBC,EAAMmC,GACvB,QACF,CAGIrG,IACF3J,EAAa,CAAC0E,GAAeC,GAAUC,KAAeoM,IACpDxN,EAAQpC,EAAcoC,EAAOwN,EAAM,IAAI,IAK3C,MAAME,EAAQrO,GAAkBmN,EAAYP,UAC5C,GAAKwB,GAAkBC,EAAOC,EAAQ3N,GAAtC,CAKA,GACE8D,IACwB,kBAAjBX,GACkC,oBAAlCA,EAAaiL,iBAEpB,GAAIhC,QAGF,OAAQjJ,EAAaiL,iBAAiBV,EAAOC,IAC3C,IAAK,cACH3N,EAAQ8D,GAAmBmF,WAAWjJ,GACtC,MAGF,IAAK,mBACHA,EAAQ8D,GAAmBoF,gBAAgBlJ,GAYnD,IACMoM,EACFI,EAAY6B,eAAejC,EAAc/B,EAAMrK,GAG/CwM,EAAY9B,aAAaL,EAAMrK,GAG7BgM,GAAaQ,GACfvC,GAAauC,GAEbzP,EAASkF,EAAUG,QAEvB,CAAE,MAAOuH,GAAI,CA3Cb,CA4CF,CAGA4C,GAAclI,GAAMC,wBAAyBkI,EAAa,OAQtD8B,GAAqB,SAArBA,EAA+BC,GACnC,IAAIC,EAAa,KACjB,MAAMC,EAAiB/C,GAAoB6C,GAK3C,IAFAhC,GAAclI,GAAMM,wBAAyB4J,EAAU,MAE/CC,EAAaC,EAAeC,YAElCnC,GAAclI,GAAMS,uBAAwB0J,EAAY,MAGxD7B,GAAkB6B,GAGlBZ,GAAoBY,GAGhBA,EAAW5K,mBAAmBjB,GAChC2L,EAAmBE,EAAW5K,SAKlC2I,GAAclI,GAAMG,uBAAwB+J,EAAU,OAmOxD,OA/NAtM,EAAU0M,SAAW,SAAU/D,GAAe,IAARpC,EAAG7J,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvC0M,EAAO,KACPuD,EAAe,KACfpC,EAAc,KACdqC,EAAa,KAUjB,GANAnH,IAAkBkD,EACdlD,KACFkD,EAAQ,eAIW,kBAAVA,IAAuB0B,GAAQ1B,GAAQ,CAChD,GAA8B,oBAAnBA,EAAMnN,SAMf,MAAMc,EAAgB,8BAJtB,GAAqB,kBADrBqM,EAAQA,EAAMnN,YAEZ,MAAMc,EAAgB,kCAK5B,CAGA,IAAK0D,EAAUO,YACb,OAAOoI,EAgBT,GAZKtE,IACHiC,GAAaC,GAIfvG,EAAUG,QAAU,GAGC,kBAAVwI,IACT9D,IAAW,GAGTA,IAEF,GAAK8D,EAAeqB,SAAU,CAC5B,MAAMW,EAAUvN,GAAmBuL,EAAeqB,UAClD,IAAK/G,GAAa0H,IAAY/G,GAAY+G,GACxC,MAAMrO,EACJ,0DAGN,OACK,GAAIqM,aAAiB/H,EAG1BwI,EAAOV,GAAc,iBACrBiE,EAAevD,EAAKxH,cAAcO,WAAWwG,GAAO,GAElDgE,EAAatM,WAAaV,IACA,SAA1BgN,EAAa3C,UAIsB,SAA1B2C,EAAa3C,SADtBZ,EAAOuD,EAKPvD,EAAKyD,YAAYF,OAEd,CAEL,IACGpI,KACAL,KACAE,KAEuB,IAAxBuE,EAAM7M,QAAQ,KAEd,OAAO+F,IAAsB4C,GACzB5C,GAAmBmF,WAAW2B,GAC9BA,EAON,GAHAS,EAAOV,GAAcC,IAGhBS,EACH,OAAO7E,GAAa,KAAOE,GAAsB3C,GAAY,EAEjE,CAGIsH,GAAQ9E,IACV0D,GAAaoB,EAAK0D,YAIpB,MAAMC,EAAetD,GAAoB5E,GAAW8D,EAAQS,GAG5D,KAAQmB,EAAcwC,EAAaN,YAEjC/B,GAAkBH,GAGlBoB,GAAoBpB,GAGhBA,EAAY5I,mBAAmBjB,GACjC2L,GAAmB9B,EAAY5I,SAKnC,GAAIkD,GACF,OAAO8D,EAIT,GAAIpE,GAAY,CACd,GAAIC,GAGF,IAFAoI,EAAa3K,GAAuBuH,KAAKJ,EAAKxH,eAEvCwH,EAAK0D,YAEVF,EAAWC,YAAYzD,EAAK0D,iBAG9BF,EAAaxD,EAcf,OAXIjG,GAAa6J,YAAc7J,GAAa8J,kBAQ1CL,EAAazK,GAAWqH,KAAKhJ,EAAkBoM,GAAY,IAGtDA,CACT,CAEA,IAAIM,EAAiB9I,GAAiBgF,EAAK+D,UAAY/D,EAAKD,UAsB5D,OAlBE/E,IACAnB,GAAa,aACbmG,EAAKxH,eACLwH,EAAKxH,cAAcwL,SACnBhE,EAAKxH,cAAcwL,QAAQhF,MAC3BjM,EAAWsD,EAA0B2J,EAAKxH,cAAcwL,QAAQhF,QAEhE8E,EACE,aAAe9D,EAAKxH,cAAcwL,QAAQhF,KAAO,MAAQ8E,GAIzDhJ,IACF3J,EAAa,CAAC0E,GAAeC,GAAUC,KAAeoM,IACpD2B,EAAiBvR,EAAcuR,EAAgB3B,EAAM,IAAI,IAItD1J,IAAsB4C,GACzB5C,GAAmBmF,WAAWkG,GAC9BA,GAGNlN,EAAUqN,UAAY,WACpB/G,GADiC5J,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,GAErC2H,IAAa,GAGfrE,EAAUsN,YAAc,WACtBrH,GAAS,KACT5B,IAAa,GAGfrE,EAAUuN,iBAAmB,SAAUC,EAAKtB,EAAMnO,GAE3CkI,IACHK,GAAa,CAAC,GAGhB,MAAMmF,EAAQrO,GAAkBoQ,GAC1B9B,EAAStO,GAAkB8O,GACjC,OAAOV,GAAkBC,EAAOC,EAAQ3N,IAG1CiC,EAAUyN,QAAU,SAAUC,EAAYC,GACZ,oBAAjBA,GAIX3S,EAAUoH,GAAMsL,GAAaC,IAG/B3N,EAAU4N,WAAa,SAAUF,EAAYC,GAC3C,QAAqBtQ,IAAjBsQ,EAA4B,CAC9B,MAAMjQ,EAAQ9C,EAAiBwH,GAAMsL,GAAaC,GAElD,OAAkB,IAAXjQ,OACHL,EACAnC,EAAYkH,GAAMsL,GAAahQ,EAAO,GAAG,EAC/C,CAEA,OAAO5C,EAASsH,GAAMsL,KAGxB1N,EAAU6N,YAAc,SAAUH,GAChCtL,GAAMsL,GAAc,IAGtB1N,EAAU8N,eAAiB,WACzB1L,GAjhDK,CACLC,wBAAyB,GACzBC,sBAAuB,GACvBC,uBAAwB,GACxBC,yBAA0B,GAC1BC,uBAAwB,GACxBC,wBAAyB,GACzBC,sBAAuB,GACvBC,oBAAqB,GACrBC,uBAAwB,KA2gDnB7C,CACT,CAEeD,iBC7nDR,SAASgO,IACZ,MAAO,CACHC,OAAO,EACPC,QAAQ,EACRC,WAAY,KACZC,KAAK,EACL/L,MAAO,KACPgM,UAAU,EACVC,SAAU,KACVC,QAAQ,EACRC,UAAW,KACXC,WAAY,KAEpB,oBACU,IAACC,EAbA,CACHT,OAAO,EACPC,QAAQ,EACRC,WAAY,KACZC,KAAK,EACL/L,MAAO,KACPgM,UAAU,EACVC,SAAU,KACVC,QAAQ,EACRC,UAAW,KACXC,WAAY,MAIb,SAASE,EAAeC,GAC3BF,EAAYE,CAChB,CCpBA,MAAMC,EAAW,CAAEC,KAAMA,IAAM,MAC/B,SAASC,EAAKC,GAAiB,IAAVC,EAAGtS,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GACnBuS,EAA0B,kBAAVF,EAAqBA,EAAQA,EAAME,OACvD,MAAMC,EAAM,CACRtT,QAASA,CAACwM,EAAM+G,KACZ,IAAIC,EAA2B,kBAARD,EAAmBA,EAAMA,EAAIF,OAGpD,OAFAG,EAAYA,EAAUxT,QAAQyT,EAAMC,MAAO,MAC3CL,EAASA,EAAOrT,QAAQwM,EAAMgH,GACvBF,CAAG,EAEdK,SAAUA,IACC,IAAInT,OAAO6S,EAAQD,IAGlC,OAAOE,CACX,CACO,MAAMG,EAAQ,CACjBG,iBAAkB,yBAClBC,kBAAmB,cACnBC,uBAAwB,gBACxBC,eAAgB,OAChBC,WAAY,KACZC,kBAAmB,KACnBC,gBAAiB,KACjBC,aAAc,OACdC,kBAAmB,MACnBC,cAAe,MACfC,oBAAqB,OACrBC,UAAW,WACXC,gBAAiB,oBACjBC,gBAAiB,WACjBC,wBAAyB,iCACzBC,yBAA0B,mBAC1BC,gBAAiB,OACjBC,mBAAoB,0BACpBC,WAAY,cACZC,gBAAiB,eACjBC,QAAS,SACTC,aAAc,WACdC,eAAgB,OAChBC,gBAAiB,aACjBC,kBAAmB,YACnBC,gBAAiB,YACjBC,iBAAkB,aAClBC,eAAgB,YAChBC,UAAW,QACXC,QAAS,UACTC,kBAAmB,iCACnBC,gBAAiB,mCACjBC,kBAAmB,KACnBC,gBAAiB,KACjBC,kBAAmB,gCACnBC,oBAAqB,gBACrBC,WAAY,UACZC,cAAe,WACfC,mBAAoB,oDACpBC,sBAAuB,qDACvBC,aAAc,6CACd1C,MAAO,eACP2C,cAAe,OACfC,SAAU,MACVC,UAAW,MACXC,UAAW,QACXC,eAAgB,WAChBC,UAAW,SACXC,cAAe,OACfC,cAAe,MACfC,cAAgBC,GAAS,IAAItW,OAAO,WAAWsW,kCAC/CC,gBAAkBC,GAAW,IAAIxW,OAAO,QAAQyW,KAAKC,IAAI,EAAGF,EAAS,yDACrEG,QAAUH,GAAW,IAAIxW,OAAO,QAAQyW,KAAKC,IAAI,EAAGF,EAAS,wDAC7DI,iBAAmBJ,GAAW,IAAIxW,OAAO,QAAQyW,KAAKC,IAAI,EAAGF,EAAS,qBACtEK,kBAAoBL,GAAW,IAAIxW,OAAO,QAAQyW,KAAKC,IAAI,EAAGF,EAAS,QACvEM,eAAiBN,GAAW,IAAIxW,OAAO,QAAQyW,KAAKC,IAAI,EAAGF,EAAS,uBAAwB,MAQ1FO,EAAK,qEAELC,EAAS,wBACTC,EAAe,iKACfC,EAAWxE,EAAKuE,GACjBzX,QAAQ,QAASwX,GACjBxX,QAAQ,aAAc,qBACtBA,QAAQ,UAAW,yBACnBA,QAAQ,cAAe,WACvBA,QAAQ,WAAY,gBACpBA,QAAQ,QAAS,qBACjBA,QAAQ,WAAY,IACpB2T,WACCgE,EAAczE,EAAKuE,GACpBzX,QAAQ,QAASwX,GACjBxX,QAAQ,aAAc,qBACtBA,QAAQ,UAAW,yBACnBA,QAAQ,cAAe,WACvBA,QAAQ,WAAY,gBACpBA,QAAQ,QAAS,qBACjBA,QAAQ,SAAU,qCAClB2T,WACCiE,EAAa,uFAEbC,EAAc,8BACdC,EAAM5E,EAAK,+GACZlT,QAAQ,QAAS6X,GACjB7X,QAAQ,QAAS,gEACjB2T,WACCoE,EAAO7E,EAAK,wCACblT,QAAQ,QAASwX,GACjB7D,WACCqE,EAAO,gWAMPC,EAAW,gCACXhV,EAAOiQ,EAAK,+dASP,KACNlT,QAAQ,UAAWiY,GACnBjY,QAAQ,MAAOgY,GACfhY,QAAQ,YAAa,4EACrB2T,WACCuE,EAAYhF,EAAK0E,GAClB5X,QAAQ,KAAMuX,GACdvX,QAAQ,UAAW,yBACnBA,QAAQ,YAAa,IACrBA,QAAQ,SAAU,IAClBA,QAAQ,aAAc,WACtBA,QAAQ,SAAU,kDAClBA,QAAQ,OAAQ,0BAChBA,QAAQ,OAAQ,+DAChBA,QAAQ,MAAOgY,GACfrE,WAOCwE,EAAc,CAChBC,WAPelF,EAAK,2CACnBlT,QAAQ,YAAakY,GACrBvE,WAMD0E,KA1Ec,wDA2EdP,MACAQ,OA3EW,8GA4EXC,QA1EY,uCA2EZhB,KACAtU,OACAyU,WACAK,OACAS,QAnFY,uBAoFZN,YACAjN,MAAO+H,EACPhQ,KA5Dc,WAiEZyV,EAAWvF,EAAK,+JAGjBlT,QAAQ,KAAMuX,GACdvX,QAAQ,UAAW,yBACnBA,QAAQ,aAAc,WACtBA,QAAQ,OAAQ,2BAChBA,QAAQ,SAAU,kDAClBA,QAAQ,OAAQ,0BAChBA,QAAQ,OAAQ,+DAChBA,QAAQ,MAAOgY,GACfrE,WACC+E,EAAW,IACVP,EACHT,SAAUC,EACV1M,MAAOwN,EACPP,UAAWhF,EAAK0E,GACX5X,QAAQ,KAAMuX,GACdvX,QAAQ,UAAW,yBACnBA,QAAQ,YAAa,IACrBA,QAAQ,QAASyY,GACjBzY,QAAQ,aAAc,WACtBA,QAAQ,SAAU,kDAClBA,QAAQ,OAAQ,0BAChBA,QAAQ,OAAQ,+DAChBA,QAAQ,MAAOgY,GACfrE,YAKHgF,EAAgB,IACfR,EACHlV,KAAMiQ,EAAK,8IAGNlT,QAAQ,UAAWiY,GACnBjY,QAAQ,OAAQ,qKAIhB2T,WACLmE,IAAK,oEACLS,QAAS,yBACTD,OAAQtF,EACR0E,SAAU,mCACVQ,UAAWhF,EAAK0E,GACX5X,QAAQ,KAAMuX,GACdvX,QAAQ,UAAW,mBACnBA,QAAQ,WAAY0X,GACpB1X,QAAQ,SAAU,IAClBA,QAAQ,aAAc,WACtBA,QAAQ,UAAW,IACnBA,QAAQ,QAAS,IACjBA,QAAQ,QAAS,IACjBA,QAAQ,OAAQ,IAChB2T,YAOHiF,EAAK,wBAGLC,EAAe,gBACfC,EAAsB,kBACtBC,EAAyB,mBACzBC,EAAc9F,EAAK,wBAAyB,KAC7ClT,QAAQ,cAAe8Y,GAAqBnF,WAE3CsF,EAA0B,qBAK1BC,EAAqB,gEACrBC,EAAiBjG,EAAKgG,EAAoB,KAC3ClZ,QAAQ,SAAU6Y,GAClBlF,WACCyF,EAAoBlG,EAAKgG,EAAoB,KAC9ClZ,QAAQ,SAAUiZ,GAClBtF,WACC0F,EAAwB,wQAQxBC,EAAoBpG,EAAKmG,EAAuB,MACjDrZ,QAAQ,iBAAkB+Y,GAC1B/Y,QAAQ,cAAe8Y,GACvB9Y,QAAQ,SAAU6Y,GAClBlF,WACC4F,EAAuBrG,EAAKmG,EAAuB,MACpDrZ,QAAQ,iBAxB6B,0BAyBrCA,QAAQ,cA1B0B,wBA2BlCA,QAAQ,SAAUiZ,GAClBtF,WAEC6F,EAAoBtG,EAAK,mNAMQ,MAClClT,QAAQ,iBAAkB+Y,GAC1B/Y,QAAQ,cAAe8Y,GACvB9Y,QAAQ,SAAU6Y,GAClBlF,WACC8F,EAAiBvG,EAAK,YAAa,MACpClT,QAAQ,SAAU6Y,GAClBlF,WACC+F,EAAWxG,EAAK,uCACjBlT,QAAQ,SAAU,gCAClBA,QAAQ,QAAS,gJACjB2T,WACCgG,EAAiBzG,EAAK+E,GAAUjY,QAAQ,eAAa,UAAO2T,WAC5D/B,EAAMsB,EAAK,4JAMZlT,QAAQ,UAAW2Z,GACnB3Z,QAAQ,YAAa,+EACrB2T,WACCiG,EAAe,sDACfC,EAAO3G,EAAK,iDACblT,QAAQ,QAAS4Z,GACjB5Z,QAAQ,OAAQ,wCAChBA,QAAQ,QAAS,+DACjB2T,WACCmG,EAAU5G,EAAK,2BAChBlT,QAAQ,QAAS4Z,GACjB5Z,QAAQ,MAAO6X,GACflE,WACCoG,EAAS7G,EAAK,yBACflT,QAAQ,MAAO6X,GACflE,WAQCqG,EAAe,CACjBC,WAAYjH,EACZyG,iBACAC,WACAQ,UA/Ec,gFAgFdtB,KACAP,KA/Fe,sCAgGf8B,IAAKnH,EACLmG,iBACAG,oBACAE,oBACJY,OArGe,8CAsGXP,OACAE,SACAf,cACAc,UACAO,cAvBkBnH,EAAK,wBAAyB,KAC/ClT,QAAQ,UAAW8Z,GACnB9Z,QAAQ,SAAU+Z,GAClBpG,WAqBD/B,MACA5O,KAzGe,8EA0GfsX,IAAKtH,GAKHuH,EAAiB,IAChBP,EACHH,KAAM3G,EAAK,2BACNlT,QAAQ,QAAS4Z,GACjBjG,WACLmG,QAAS5G,EAAK,iCACTlT,QAAQ,QAAS4Z,GACjBjG,YAKH6G,EAAY,IACXR,EACHV,kBAAmBC,EACnBJ,eAAgBC,EAChBkB,IAAKpH,EAAK,mEAAoE,KACzElT,QAAQ,QAAS,6EACjB2T,WACLsG,WAAY,6EACZE,IAAK,gEACLnX,KAAM,8NAKJyX,EAAe,IACdD,EACH5B,GAAI1F,EAAK0F,GAAI5Y,QAAQ,OAAQ,KAAK2T,WAClC3Q,KAAMkQ,EAAKsH,EAAUxX,MAChBhD,QAAQ,OAAQ,iBAChBA,QAAQ,UAAW,KACnB2T,YAKI+G,EAAQ,CACjBC,OAAQxC,EACR5F,IAAKmG,EACLlG,SAAUmG,GAEDiC,EAAS,CAClBD,OAAQX,EACRzH,IAAKiI,EACLnI,OAAQoI,EACRjI,SAAU+H,GCjYRM,EAAqB,CACvB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,SAEHC,GAAwBC,GAAOF,EAAmBE,GACjD,SAASX,GAAOnX,EAAM+X,GACzB,GAAIA,GACA,GAAIvH,EAAMuC,WAAWvV,KAAKwC,GACtB,OAAOA,EAAKjD,QAAQyT,EAAMwC,cAAe6E,SAI7C,GAAIrH,EAAMyC,mBAAmBzV,KAAKwC,GAC9B,OAAOA,EAAKjD,QAAQyT,EAAM0C,sBAAuB2E,IAGzD,OAAO7X,CACX,CAeO,SAASgY,GAASC,GACrB,IACIA,EAAOC,UAAUD,GAAMlb,QAAQyT,EAAM4C,cAAe,IAC5D,CACI,MACI,OAAO,IACf,CACI,OAAO6E,CACX,CACO,SAASE,GAAWC,EAAUC,GAGjC,MAcIC,EAdQF,EAASrb,QAAQyT,EAAM6C,UAAU,CAACxW,EAAO0b,EAAQC,KACzD,IAAIC,GAAU,EACVC,EAAOH,EACX,OAASG,GAAQ,GAAmB,OAAdF,EAAIE,IACtBD,GAAWA,EACf,OAAIA,EAGO,IAIA,IACnB,IACoBE,MAAMnI,EAAM8C,WAC5B,IAAInH,EAAI,EAQR,GANKmM,EAAM,GAAGnb,QACVmb,EAAMM,QAENN,EAAMxa,OAAS,IAAMwa,EAAMO,IAAI,IAAI1b,QACnCmb,EAAMpc,MAENmc,EACA,GAAIC,EAAMxa,OAASua,EACfC,EAAMhc,OAAO+b,QAGb,KAAOC,EAAMxa,OAASua,GAClBC,EAAMlc,KAAK,IAGvB,KAAO+P,EAAImM,EAAMxa,OAAQqO,IAErBmM,EAAMnM,GAAKmM,EAAMnM,GAAGhP,OAAOJ,QAAQyT,EAAM+C,UAAW,KAExD,OAAO+E,CACX,CASO,SAASQ,GAAMN,EAAKO,EAAGC,GAC1B,MAAMva,EAAI+Z,EAAI1a,OACd,GAAU,IAANW,EACA,MAAO,GAGX,IAAIwa,EAAU,EAEd,KAAOA,EAAUxa,GAAG,CAEhB,GADiB+Z,EAAIU,OAAOza,EAAIwa,EAAU,KACzBF,EAOb,MANAE,GAQZ,CACI,OAAOT,EAAIW,MAAM,EAAG1a,EAAIwa,EAC5B,CCpHA,SAASG,GAAWC,EAAKzC,EAAM0C,EAAKC,EAAOC,GACvC,MAAMvB,EAAOrB,EAAKqB,KACZwB,EAAQ7C,EAAK6C,OAAS,KACtB1Z,EAAOsZ,EAAI,GAAGtc,QAAQyc,EAAMhJ,MAAMI,kBAAmB,MAC3D,GAAyB,MAArByI,EAAI,GAAGH,OAAO,GAAY,CAC1BK,EAAMG,MAAMC,QAAS,EACrB,MAAMC,EAAQ,CACVC,KAAM,OACNP,MACArB,OACAwB,QACA1Z,OACA+Z,OAAQP,EAAMQ,aAAaha,IAG/B,OADAwZ,EAAMG,MAAMC,QAAS,EACdC,CACf,CACI,MAAO,CACHC,KAAM,QACNP,MACArB,OACAwB,QACA1Z,OAER,CAyBO,MAAMia,GACTC,QACAT,MACAD,MACAna,WAAAA,CAAY6a,GACRC,KAAKD,QAAUA,GAAWrK,CAClC,CACIuK,KAAAA,CAAMC,GACF,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMlC,QAAQvF,KAAKoK,GAC1C,GAAIf,GAAOA,EAAI,GAAGvb,OAAS,EACvB,MAAO,CACH+b,KAAM,QACNP,IAAKD,EAAI,GAGzB,CACIjE,IAAAA,CAAKgF,GACD,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMrC,KAAKpF,KAAKoK,GACvC,GAAIf,EAAK,CACL,MAAMtZ,EAAOsZ,EAAI,GAAGtc,QAAQmd,KAAKV,MAAMhJ,MAAMG,iBAAkB,IAC/D,MAAO,CACHkJ,KAAM,OACNP,IAAKD,EAAI,GACTgB,eAAgB,WAChBta,KAAOma,KAAKD,QAAQ1K,SAEdxP,EADA+Y,GAAM/Y,EAAM,MAGlC,CACA,CACIsV,MAAAA,CAAO+E,GACH,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMpC,OAAOrF,KAAKoK,GACzC,GAAIf,EAAK,CACL,MAAMC,EAAMD,EAAI,GACVtZ,EA1DlB,SAAgCuZ,EAAKvZ,EAAMyZ,GACvC,MAAMc,EAAoBhB,EAAIzc,MAAM2c,EAAMhJ,MAAMK,wBAChD,GAA0B,OAAtByJ,EACA,OAAOva,EAEX,MAAMwa,EAAeD,EAAkB,GACvC,OAAOva,EACF4Y,MAAM,MACN6B,KAAIpR,IACL,MAAMqR,EAAoBrR,EAAKvM,MAAM2c,EAAMhJ,MAAMM,gBACjD,GAA0B,OAAtB2J,EACA,OAAOrR,EAEX,MAAOsR,GAAgBD,EACvB,OAAIC,EAAa5c,QAAUyc,EAAazc,OAC7BsL,EAAK+P,MAAMoB,EAAazc,QAE5BsL,CAAI,IAEVuR,KAAK,KACd,CAsCyB9J,CAAuByI,EAAKD,EAAI,IAAM,GAAIa,KAAKV,OAC5D,MAAO,CACHK,KAAM,OACNP,MACAsB,KAAMvB,EAAI,GAAKA,EAAI,GAAGlc,OAAOJ,QAAQmd,KAAKV,MAAM7B,OAAOnB,eAAgB,MAAQ6C,EAAI,GACnFtZ,OAEhB,CACA,CACIuV,OAAAA,CAAQ8E,GACJ,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMnC,QAAQtF,KAAKoK,GAC1C,GAAIf,EAAK,CACL,IAAItZ,EAAOsZ,EAAI,GAAGlc,OAElB,GAAI+c,KAAKV,MAAMhJ,MAAMO,WAAWvT,KAAKuC,GAAO,CACxC,MAAM8a,EAAU/B,GAAM/Y,EAAM,KACxBma,KAAKD,QAAQ1K,SACbxP,EAAO8a,EAAQ1d,OAET0d,IAAWX,KAAKV,MAAMhJ,MAAMS,gBAAgBzT,KAAKqd,KAEvD9a,EAAO8a,EAAQ1d,OAEnC,CACY,MAAO,CACH0c,KAAM,UACNP,IAAKD,EAAI,GACTyB,MAAOzB,EAAI,GAAGvb,OACdiC,OACA+Z,OAAQI,KAAKX,MAAM5B,OAAO5X,GAE1C,CACA,CACIuU,EAAAA,CAAG8F,GACC,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMnD,GAAGtE,KAAKoK,GACrC,GAAIf,EACA,MAAO,CACHQ,KAAM,KACNP,IAAKR,GAAMO,EAAI,GAAI,MAGnC,CACIlE,UAAAA,CAAWiF,GACP,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMtC,WAAWnF,KAAKoK,GAC7C,GAAIf,EAAK,CACL,IAAI0B,EAAQjC,GAAMO,EAAI,GAAI,MAAMV,MAAM,MAClCW,EAAM,GACNvZ,EAAO,GACX,MAAM+Z,EAAS,GACf,KAAOiB,EAAMjd,OAAS,GAAG,CACrB,IAAIkd,GAAe,EACnB,MAAMC,EAAe,GACrB,IAAI9O,EACJ,IAAKA,EAAI,EAAGA,EAAI4O,EAAMjd,OAAQqO,IAE1B,GAAI+N,KAAKV,MAAMhJ,MAAMgB,gBAAgBhU,KAAKud,EAAM5O,IAC5C8O,EAAa7e,KAAK2e,EAAM5O,IACxB6O,GAAe,MAEd,IAAKA,EAIN,MAHAC,EAAa7e,KAAK2e,EAAM5O,GAIhD,CAEgB4O,EAAQA,EAAM5B,MAAMhN,GACpB,MAAM+O,EAAaD,EAAaN,KAAK,MAC/BQ,EAAcD,EAEfne,QAAQmd,KAAKV,MAAMhJ,MAAMiB,wBAAyB,YAClD1U,QAAQmd,KAAKV,MAAMhJ,MAAMkB,yBAA0B,IACxD4H,EAAMA,EAAM,GAAGA,MAAQ4B,IAAeA,EACtCnb,EAAOA,EAAO,GAAGA,MAASob,IAAgBA,EAG1C,MAAMC,EAAMlB,KAAKX,MAAMG,MAAM0B,IAK7B,GAJAlB,KAAKX,MAAMG,MAAM0B,KAAM,EACvBlB,KAAKX,MAAM8B,YAAYF,EAAarB,GAAQ,GAC5CI,KAAKX,MAAMG,MAAM0B,IAAMA,EAEF,IAAjBL,EAAMjd,OACN,MAEJ,MAAMwd,EAAYxB,EAAOjB,IAAI,GAC7B,GAAwB,SAApByC,GAAWzB,KAEX,MAEC,GAAwB,eAApByB,GAAWzB,KAAuB,CAEvC,MAAM0B,EAAWD,EACXE,EAAUD,EAASjC,IAAM,KAAOyB,EAAMJ,KAAK,MAC3Cc,EAAWvB,KAAK/E,WAAWqG,GACjC1B,EAAOA,EAAOhc,OAAS,GAAK2d,EAC5BnC,EAAMA,EAAIoC,UAAU,EAAGpC,EAAIxb,OAASyd,EAASjC,IAAIxb,QAAU2d,EAASnC,IACpEvZ,EAAOA,EAAK2b,UAAU,EAAG3b,EAAKjC,OAASyd,EAASxb,KAAKjC,QAAU2d,EAAS1b,KACxE,KACpB,CACqB,GAAwB,SAApBub,GAAWzB,UAAf,CAED,MAAM0B,EAAWD,EACXE,EAAUD,EAASjC,IAAM,KAAOyB,EAAMJ,KAAK,MAC3Cc,EAAWvB,KAAKpF,KAAK0G,GAC3B1B,EAAOA,EAAOhc,OAAS,GAAK2d,EAC5BnC,EAAMA,EAAIoC,UAAU,EAAGpC,EAAIxb,OAASwd,EAAUhC,IAAIxb,QAAU2d,EAASnC,IACrEvZ,EAAOA,EAAK2b,UAAU,EAAG3b,EAAKjC,OAASyd,EAASjC,IAAIxb,QAAU2d,EAASnC,IACvEyB,EAAQS,EAAQE,UAAU5B,EAAOjB,IAAI,GAAGS,IAAIxb,QAAQ6a,MAAM,KAE9E,CACA,CACY,MAAO,CACHkB,KAAM,aACNP,MACAQ,SACA/Z,OAEhB,CACA,CACI+U,IAAAA,CAAKsF,GACD,IAAIf,EAAMa,KAAKV,MAAM/B,MAAM3C,KAAK9E,KAAKoK,GACrC,GAAIf,EAAK,CACL,IAAIxF,EAAOwF,EAAI,GAAGlc,OAClB,MAAMwe,EAAY9H,EAAK/V,OAAS,EAC1BgX,EAAO,CACT+E,KAAM,OACNP,IAAK,GACLsC,QAASD,EACTE,MAAOF,GAAa9H,EAAKsF,MAAM,GAAI,GAAK,GACxC2C,OAAO,EACPC,MAAO,IAEXlI,EAAO8H,EAAY,aAAa9H,EAAKsF,OAAO,KAAO,KAAKtF,IACpDqG,KAAKD,QAAQ1K,WACbsE,EAAO8H,EAAY9H,EAAO,SAG9B,MAAMmI,EAAY9B,KAAKV,MAAMhJ,MAAMoD,cAAcC,GACjD,IAAIoI,GAAoB,EAExB,KAAO7B,GAAK,CACR,IAAI8B,GAAW,EACX5C,EAAM,GACN6C,EAAe,GACnB,KAAM9C,EAAM2C,EAAUhM,KAAKoK,IACvB,MAEJ,GAAIF,KAAKV,MAAM/B,MAAMnD,GAAG9W,KAAK4c,GACzB,MAEJd,EAAMD,EAAI,GACVe,EAAMA,EAAIsB,UAAUpC,EAAIxb,QACxB,IAAIse,EAAO/C,EAAI,GAAGV,MAAM,KAAM,GAAG,GAAG5b,QAAQmd,KAAKV,MAAMhJ,MAAMmB,iBAAkB0K,GAAM,IAAIC,OAAO,EAAID,EAAEve,UAClGye,EAAWnC,EAAIzB,MAAM,KAAM,GAAG,GAC9BrH,GAAa8K,EAAKjf,OAClB4W,EAAS,EAmBb,GAlBImG,KAAKD,QAAQ1K,UACbwE,EAAS,EACToI,EAAeC,EAAKI,aAEflL,EACLyC,EAASsF,EAAI,GAAGvb,OAAS,GAGzBiW,EAASsF,EAAI,GAAGoD,OAAOvC,KAAKV,MAAMhJ,MAAMU,cACxC6C,EAASA,EAAS,EAAI,EAAIA,EAC1BoI,EAAeC,EAAKjD,MAAMpF,GAC1BA,GAAUsF,EAAI,GAAGvb,QAEjBwT,GAAa4I,KAAKV,MAAMhJ,MAAMc,UAAU9T,KAAK+e,KAC7CjD,GAAOiD,EAAW,KAClBnC,EAAMA,EAAIsB,UAAUa,EAASze,OAAS,GACtCoe,GAAW,IAEVA,EAAU,CACX,MAAMpI,EAAkBoG,KAAKV,MAAMhJ,MAAMsD,gBAAgBC,GACnDG,EAAUgG,KAAKV,MAAMhJ,MAAM0D,QAAQH,GACnCI,EAAmB+F,KAAKV,MAAMhJ,MAAM2D,iBAAiBJ,GACrDK,EAAoB8F,KAAKV,MAAMhJ,MAAM4D,kBAAkBL,GACvDM,EAAiB6F,KAAKV,MAAMhJ,MAAM6D,eAAeN,GAEvD,KAAOqG,GAAK,CACR,MAAMsC,EAAUtC,EAAIzB,MAAM,KAAM,GAAG,GACnC,IAAIgE,EAWJ,GAVAJ,EAAWG,EAEPxC,KAAKD,QAAQ1K,UACbgN,EAAWA,EAASxf,QAAQmd,KAAKV,MAAMhJ,MAAMoB,mBAAoB,MACjE+K,EAAsBJ,GAGtBI,EAAsBJ,EAASxf,QAAQmd,KAAKV,MAAMhJ,MAAMY,cAAe,QAGvE+C,EAAiB3W,KAAK+e,GACtB,MAGJ,GAAInI,EAAkB5W,KAAK+e,GACvB,MAGJ,GAAIlI,EAAe7W,KAAK+e,GACpB,MAGJ,GAAIzI,EAAgBtW,KAAK+e,GACrB,MAGJ,GAAIrI,EAAQ1W,KAAK+e,GACb,MAEJ,GAAII,EAAoBF,OAAOvC,KAAKV,MAAMhJ,MAAMU,eAAiB6C,IAAWwI,EAASpf,OACjFgf,GAAgB,KAAOQ,EAAoBxD,MAAMpF,OAEhD,CAED,GAAIzC,EACA,MAGJ,GAAI8K,EAAKrf,QAAQmd,KAAKV,MAAMhJ,MAAMY,cAAe,QAAQqL,OAAOvC,KAAKV,MAAMhJ,MAAMU,eAAiB,EAC9F,MAEJ,GAAIiD,EAAiB3W,KAAK4e,GACtB,MAEJ,GAAIhI,EAAkB5W,KAAK4e,GACvB,MAEJ,GAAIlI,EAAQ1W,KAAK4e,GACb,MAEJD,GAAgB,KAAOI,CACnD,CAC6BjL,GAAciL,EAASpf,SACxBmU,GAAY,GAEhBgI,GAAOoD,EAAU,KACjBtC,EAAMA,EAAIsB,UAAUgB,EAAQ5e,OAAS,GACrCse,EAAOO,EAAoBxD,MAAMpF,EACzD,CACA,CACqBe,EAAKgH,QAEFG,EACAnH,EAAKgH,OAAQ,EAER5B,KAAKV,MAAMhJ,MAAMe,gBAAgB/T,KAAK8b,KAC3C2C,GAAoB,IAG5B,IACIW,EADAC,EAAS,KAGT3C,KAAKD,QAAQ3K,MACbuN,EAAS3C,KAAKV,MAAMhJ,MAAMqB,WAAW7B,KAAKmM,GACtCU,IACAD,EAA0B,SAAdC,EAAO,GACnBV,EAAeA,EAAapf,QAAQmd,KAAKV,MAAMhJ,MAAMsB,gBAAiB,MAG9EgD,EAAKiH,MAAM3f,KAAK,CACZyd,KAAM,YACNP,MACAwD,OAAQD,EACRE,QAASH,EACTd,OAAO,EACP/b,KAAMoc,EACNrC,OAAQ,KAEZhF,EAAKwE,KAAOA,CAC5B,CAEY,MAAM0D,EAAWlI,EAAKiH,MAAMlD,IAAI,GAChC,IAAImE,EAMA,OALAA,EAAS1D,IAAM0D,EAAS1D,IAAI2D,UAC5BD,EAASjd,KAAOid,EAASjd,KAAKkd,UAMlCnI,EAAKwE,IAAMxE,EAAKwE,IAAI2D,UAEpB,IAAK,IAAI9Q,EAAI,EAAGA,EAAI2I,EAAKiH,MAAMje,OAAQqO,IAGnC,GAFA+N,KAAKX,MAAMG,MAAM0B,KAAM,EACvBtG,EAAKiH,MAAM5P,GAAG2N,OAASI,KAAKX,MAAM8B,YAAYvG,EAAKiH,MAAM5P,GAAGpM,KAAM,KAC7D+U,EAAKgH,MAAO,CAEb,MAAMoB,EAAUpI,EAAKiH,MAAM5P,GAAG2N,OAAOqD,QAAOd,GAAgB,UAAXA,EAAExC,OAC7CuD,EAAwBF,EAAQpf,OAAS,GAAKof,EAAQG,MAAKhB,GAAKnC,KAAKV,MAAMhJ,MAAMuB,QAAQvU,KAAK6e,EAAE/C,OACtGxE,EAAKgH,MAAQsB,CACjC,CAGY,GAAItI,EAAKgH,MACL,IAAK,IAAI3P,EAAI,EAAGA,EAAI2I,EAAKiH,MAAMje,OAAQqO,IACnC2I,EAAKiH,MAAM5P,GAAG2P,OAAQ,EAG9B,OAAOhH,CACnB,CACA,CACI9U,IAAAA,CAAKoa,GACD,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMzX,KAAKgQ,KAAKoK,GACvC,GAAIf,EAAK,CAQL,MAPc,CACVQ,KAAM,OACNpC,OAAO,EACP6B,IAAKD,EAAI,GACTiE,IAAgB,QAAXjE,EAAI,IAA2B,WAAXA,EAAI,IAA8B,UAAXA,EAAI,GACpDtZ,KAAMsZ,EAAI,GAG1B,CACA,CACIxE,GAAAA,CAAIuF,GACA,MAAMf,EAAMa,KAAKV,MAAM/B,MAAM5C,IAAI7E,KAAKoK,GACtC,GAAIf,EAAK,CACL,MAAM1K,EAAM0K,EAAI,GAAG5c,cAAcM,QAAQmd,KAAKV,MAAMhJ,MAAMa,oBAAqB,KACzE4G,EAAOoB,EAAI,GAAKA,EAAI,GAAGtc,QAAQmd,KAAKV,MAAMhJ,MAAMwB,aAAc,MAAMjV,QAAQmd,KAAKV,MAAM7B,OAAOnB,eAAgB,MAAQ,GACtHiD,EAAQJ,EAAI,GAAKA,EAAI,GAAGqC,UAAU,EAAGrC,EAAI,GAAGvb,OAAS,GAAGf,QAAQmd,KAAKV,MAAM7B,OAAOnB,eAAgB,MAAQ6C,EAAI,GACpH,MAAO,CACHQ,KAAM,MACNlL,MACA2K,IAAKD,EAAI,GACTpB,OACAwB,QAEhB,CACA,CACIzR,KAAAA,CAAMoS,GACF,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMzP,MAAMgI,KAAKoK,GACxC,IAAKf,EACD,OAEJ,IAAKa,KAAKV,MAAMhJ,MAAMyB,eAAezU,KAAK6b,EAAI,IAE1C,OAEJ,MAAMkE,EAAUpF,GAAWkB,EAAI,IACzBmE,EAASnE,EAAI,GAAGtc,QAAQmd,KAAKV,MAAMhJ,MAAM0B,gBAAiB,IAAIyG,MAAM,KACpE8E,EAAOpE,EAAI,IAAIlc,OAASkc,EAAI,GAAGtc,QAAQmd,KAAKV,MAAMhJ,MAAM2B,kBAAmB,IAAIwG,MAAM,MAAQ,GAC7F+E,EAAO,CACT7D,KAAM,QACNP,IAAKD,EAAI,GACTsE,OAAQ,GACRC,MAAO,GACPH,KAAM,IAEV,GAAIF,EAAQzf,SAAW0f,EAAO1f,OAA9B,CAIA,IAAK,MAAM8f,KAASJ,EACZtD,KAAKV,MAAMhJ,MAAM4B,gBAAgB5U,KAAKogB,GACtCF,EAAKE,MAAMxhB,KAAK,SAEX8d,KAAKV,MAAMhJ,MAAM6B,iBAAiB7U,KAAKogB,GAC5CF,EAAKE,MAAMxhB,KAAK,UAEX8d,KAAKV,MAAMhJ,MAAM8B,eAAe9U,KAAKogB,GAC1CF,EAAKE,MAAMxhB,KAAK,QAGhBshB,EAAKE,MAAMxhB,KAAK,MAGxB,IAAK,IAAI+P,EAAI,EAAGA,EAAIoR,EAAQzf,OAAQqO,IAChCuR,EAAKC,OAAOvhB,KAAK,CACb2D,KAAMwd,EAAQpR,GACd2N,OAAQI,KAAKX,MAAM5B,OAAO4F,EAAQpR,IAClCwR,QAAQ,EACRC,MAAOF,EAAKE,MAAMzR,KAG1B,IAAK,MAAM0R,KAAOJ,EACdC,EAAKD,KAAKrhB,KAAK+b,GAAW0F,EAAKH,EAAKC,OAAO7f,QAAQ0c,KAAI,CAACsD,EAAM3R,KACnD,CACHpM,KAAM+d,EACNhE,OAAQI,KAAKX,MAAM5B,OAAOmG,GAC1BH,QAAQ,EACRC,MAAOF,EAAKE,MAAMzR,QAI9B,OAAOuR,CAjCf,CAkCA,CACIjJ,QAAAA,CAAS2F,GACL,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMhD,SAASzE,KAAKoK,GAC3C,GAAIf,EACA,MAAO,CACHQ,KAAM,UACNP,IAAKD,EAAI,GACTyB,MAA4B,MAArBzB,EAAI,GAAGH,OAAO,GAAa,EAAI,EACtCnZ,KAAMsZ,EAAI,GACVS,OAAQI,KAAKX,MAAM5B,OAAO0B,EAAI,IAG9C,CACIpE,SAAAA,CAAUmF,GACN,MAAMf,EAAMa,KAAKV,MAAM/B,MAAMxC,UAAUjF,KAAKoK,GAC5C,GAAIf,EAAK,CACL,MAAMtZ,EAA4C,OAArCsZ,EAAI,GAAGH,OAAOG,EAAI,GAAGvb,OAAS,GACrCub,EAAI,GAAGF,MAAM,GAAI,GACjBE,EAAI,GACV,MAAO,CACHQ,KAAM,YACNP,IAAKD,EAAI,GACTtZ,OACA+Z,OAAQI,KAAKX,MAAM5B,OAAO5X,GAE1C,CACA,CACIA,IAAAA,CAAKqa,GACD,MAAMf,EAAMa,KAAKV,MAAM/B,MAAM1X,KAAKiQ,KAAKoK,GACvC,GAAIf,EACA,MAAO,CACHQ,KAAM,OACNP,IAAKD,EAAI,GACTtZ,KAAMsZ,EAAI,GACVS,OAAQI,KAAKX,MAAM5B,OAAO0B,EAAI,IAG9C,CACIlC,MAAAA,CAAOiD,GACH,MAAMf,EAAMa,KAAKV,MAAM7B,OAAOR,OAAOnH,KAAKoK,GAC1C,GAAIf,EACA,MAAO,CACHQ,KAAM,SACNP,IAAKD,EAAI,GACTtZ,KAAMsZ,EAAI,GAG1B,CACI1K,GAAAA,CAAIyL,GACA,MAAMf,EAAMa,KAAKV,MAAM7B,OAAOhJ,IAAIqB,KAAKoK,GACvC,GAAIf,EAaA,OAZKa,KAAKX,MAAMG,MAAMC,QAAUO,KAAKV,MAAMhJ,MAAM+B,UAAU/U,KAAK6b,EAAI,IAChEa,KAAKX,MAAMG,MAAMC,QAAS,EAErBO,KAAKX,MAAMG,MAAMC,QAAUO,KAAKV,MAAMhJ,MAAMgC,QAAQhV,KAAK6b,EAAI,MAClEa,KAAKX,MAAMG,MAAMC,QAAS,IAEzBO,KAAKX,MAAMG,MAAMqE,YAAc7D,KAAKV,MAAMhJ,MAAMiC,kBAAkBjV,KAAK6b,EAAI,IAC5Ea,KAAKX,MAAMG,MAAMqE,YAAa,EAEzB7D,KAAKX,MAAMG,MAAMqE,YAAc7D,KAAKV,MAAMhJ,MAAMkC,gBAAgBlV,KAAK6b,EAAI,MAC9Ea,KAAKX,MAAMG,MAAMqE,YAAa,GAE3B,CACHlE,KAAM,OACNP,IAAKD,EAAI,GACTM,OAAQO,KAAKX,MAAMG,MAAMC,OACzBoE,WAAY7D,KAAKX,MAAMG,MAAMqE,WAC7BtG,OAAO,EACP1X,KAAMsZ,EAAI,GAG1B,CACIzC,IAAAA,CAAKwD,GACD,MAAMf,EAAMa,KAAKV,MAAM7B,OAAOf,KAAK5G,KAAKoK,GACxC,GAAIf,EAAK,CACL,MAAM2E,EAAa3E,EAAI,GAAGlc,OAC1B,IAAK+c,KAAKD,QAAQ1K,UAAY2K,KAAKV,MAAMhJ,MAAMmC,kBAAkBnV,KAAKwgB,GAAa,CAE/E,IAAM9D,KAAKV,MAAMhJ,MAAMoC,gBAAgBpV,KAAKwgB,GACxC,OAGJ,MAAMC,EAAanF,GAAMkF,EAAW7E,MAAM,GAAI,GAAI,MAClD,IAAK6E,EAAWlgB,OAASmgB,EAAWngB,QAAU,IAAM,EAChD,MAEpB,KACiB,CAED,MAAMogB,ED7bf,SAA4B1F,EAAK2F,GACpC,IAA2B,IAAvB3F,EAAIvb,QAAQkhB,EAAE,IACd,OAAQ,EAEZ,IAAIC,EAAQ,EACZ,IAAK,IAAIjS,EAAI,EAAGA,EAAIqM,EAAI1a,OAAQqO,IAC5B,GAAe,OAAXqM,EAAIrM,GACJA,SAEC,GAAIqM,EAAIrM,KAAOgS,EAAE,GAClBC,SAEC,GAAI5F,EAAIrM,KAAOgS,EAAE,KAClBC,IACIA,EAAQ,GACR,OAAOjS,EAInB,OAAQ,CACZ,CCyauCkS,CAAmBhF,EAAI,GAAI,MAClD,GAAI6E,GAAkB,EAAG,CACrB,MACMI,GADgC,IAAxBjF,EAAI,GAAGpc,QAAQ,KAAa,EAAI,GACtBoc,EAAI,GAAGvb,OAASogB,EACxC7E,EAAI,GAAKA,EAAI,GAAGqC,UAAU,EAAGwC,GAC7B7E,EAAI,GAAKA,EAAI,GAAGqC,UAAU,EAAG4C,GAASnhB,OACtCkc,EAAI,GAAK,EAC7B,CACA,CACY,IAAIpB,EAAOoB,EAAI,GACXI,EAAQ,GACZ,GAAIS,KAAKD,QAAQ1K,SAAU,CAEvB,MAAMqH,EAAOsD,KAAKV,MAAMhJ,MAAMqC,kBAAkB7C,KAAKiI,GACjDrB,IACAqB,EAAOrB,EAAK,GACZ6C,EAAQ7C,EAAK,GAEjC,MAEgB6C,EAAQJ,EAAI,GAAKA,EAAI,GAAGF,MAAM,GAAI,GAAK,GAY3C,OAVAlB,EAAOA,EAAK9a,OACR+c,KAAKV,MAAMhJ,MAAMmC,kBAAkBnV,KAAKya,KAGpCA,EAFAiC,KAAKD,QAAQ1K,WAAc2K,KAAKV,MAAMhJ,MAAMoC,gBAAgBpV,KAAKwgB,GAE1D/F,EAAKkB,MAAM,GAGXlB,EAAKkB,MAAM,GAAI,IAGvBC,GAAWC,EAAK,CACnBpB,KAAMA,EAAOA,EAAKlb,QAAQmd,KAAKV,MAAM7B,OAAOnB,eAAgB,MAAQyB,EACpEwB,MAAOA,EAAQA,EAAM1c,QAAQmd,KAAKV,MAAM7B,OAAOnB,eAAgB,MAAQiD,GACxEJ,EAAI,GAAIa,KAAKX,MAAOW,KAAKV,MACxC,CACA,CACI3C,OAAAA,CAAQuD,EAAKmE,GACT,IAAIlF,EACJ,IAAKA,EAAMa,KAAKV,MAAM7B,OAAOd,QAAQ7G,KAAKoK,MAClCf,EAAMa,KAAKV,MAAM7B,OAAOb,OAAO9G,KAAKoK,IAAO,CAC/C,MACMxD,EAAO2H,GADOlF,EAAI,IAAMA,EAAI,IAAItc,QAAQmd,KAAKV,MAAMhJ,MAAMa,oBAAqB,KACtD5U,eAC9B,IAAKma,EAAM,CACP,MAAM7W,EAAOsZ,EAAI,GAAGH,OAAO,GAC3B,MAAO,CACHW,KAAM,OACNP,IAAKvZ,EACLA,OAEpB,CACY,OAAOqZ,GAAWC,EAAKzC,EAAMyC,EAAI,GAAIa,KAAKX,MAAOW,KAAKV,MAClE,CACA,CACIgF,QAAAA,CAASpE,EAAKqE,GAA0B,IAAfC,EAAQ7gB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAC5BhB,EAAQqd,KAAKV,MAAM7B,OAAOzB,eAAelG,KAAKoK,GAClD,IAAKvd,EACD,OAEJ,GAAIA,EAAM,IAAM6hB,EAAS7hB,MAAMqd,KAAKV,MAAMhJ,MAAMsC,qBAC5C,OAEJ,KADiBjW,EAAM,IAAMA,EAAM,IAAM,MACvB6hB,GAAYxE,KAAKV,MAAM7B,OAAO5B,YAAY/F,KAAK0O,GAAW,CAExE,MAAMC,EAAU,IAAI9hB,EAAM,IAAIiB,OAAS,EACvC,IAAI8gB,EAAQC,EAASC,EAAaH,EAASI,EAAgB,EAC3D,MAAMC,EAAyB,MAAhBniB,EAAM,GAAG,GAAaqd,KAAKV,MAAM7B,OAAOtB,kBAAoB6D,KAAKV,MAAM7B,OAAOpB,kBAI7F,IAHAyI,EAAO/gB,UAAY,EAEnBwgB,EAAYA,EAAUtF,OAAO,EAAIiB,EAAItc,OAAS6gB,GACH,OAAnC9hB,EAAQmiB,EAAOhP,KAAKyO,KAAqB,CAE7C,GADAG,EAAS/hB,EAAM,IAAMA,EAAM,IAAMA,EAAM,IAAMA,EAAM,IAAMA,EAAM,IAAMA,EAAM,IACtE+hB,EACD,SAEJ,GADAC,EAAU,IAAID,GAAQ9gB,OAClBjB,EAAM,IAAMA,EAAM,GAAI,CACtBiiB,GAAcD,EACd,QACpB,CACqB,IAAIhiB,EAAM,IAAMA,EAAM,KACnB8hB,EAAU,MAAQA,EAAUE,GAAW,GAAI,CAC3CE,GAAiBF,EACjB,QACxB,CAGgB,GADAC,GAAcD,EACVC,EAAa,EACb,SAEJD,EAAU7K,KAAKC,IAAI4K,EAASA,EAAUC,EAAaC,GAEnD,MAAME,EAAiB,IAAIpiB,EAAM,IAAI,GAAGiB,OAClCwb,EAAMc,EAAIjB,MAAM,EAAGwF,EAAU9hB,EAAMgC,MAAQogB,EAAiBJ,GAElE,GAAI7K,KAAKC,IAAI0K,EAASE,GAAW,EAAG,CAChC,MAAM9e,EAAOuZ,EAAIH,MAAM,GAAI,GAC3B,MAAO,CACHU,KAAM,KACNP,MACAvZ,OACA+Z,OAAQI,KAAKX,MAAMQ,aAAaha,GAExD,CAEgB,MAAMA,EAAOuZ,EAAIH,MAAM,GAAI,GAC3B,MAAO,CACHU,KAAM,SACNP,MACAvZ,OACA+Z,OAAQI,KAAKX,MAAMQ,aAAaha,GAEpD,CACA,CACA,CACImf,QAAAA,CAAS9E,GACL,MAAMf,EAAMa,KAAKV,MAAM7B,OAAOvC,KAAKpF,KAAKoK,GACxC,GAAIf,EAAK,CACL,IAAItZ,EAAOsZ,EAAI,GAAGtc,QAAQmd,KAAKV,MAAMhJ,MAAMW,kBAAmB,KAC9D,MAAMgO,EAAmBjF,KAAKV,MAAMhJ,MAAMU,aAAa1T,KAAKuC,GACtDqf,EAA0BlF,KAAKV,MAAMhJ,MAAMQ,kBAAkBxT,KAAKuC,IAASma,KAAKV,MAAMhJ,MAAMS,gBAAgBzT,KAAKuC,GAIvH,OAHIof,GAAoBC,IACpBrf,EAAOA,EAAK2b,UAAU,EAAG3b,EAAKjC,OAAS,IAEpC,CACH+b,KAAM,WACNP,IAAKD,EAAI,GACTtZ,OAEhB,CACA,CACI4V,EAAAA,CAAGyE,GACC,MAAMf,EAAMa,KAAKV,MAAM7B,OAAOhC,GAAG3F,KAAKoK,GACtC,GAAIf,EACA,MAAO,CACHQ,KAAM,KACNP,IAAKD,EAAI,GAGzB,CACInC,GAAAA,CAAIkD,GACA,MAAMf,EAAMa,KAAKV,MAAM7B,OAAOT,IAAIlH,KAAKoK,GACvC,GAAIf,EACA,MAAO,CACHQ,KAAM,MACNP,IAAKD,EAAI,GACTtZ,KAAMsZ,EAAI,GACVS,OAAQI,KAAKX,MAAMQ,aAAaV,EAAI,IAGpD,CACI5C,QAAAA,CAAS2D,GACL,MAAMf,EAAMa,KAAKV,MAAM7B,OAAOlB,SAASzG,KAAKoK,GAC5C,GAAIf,EAAK,CACL,IAAItZ,EAAMkY,EASV,MARe,MAAXoB,EAAI,IACJtZ,EAAOsZ,EAAI,GACXpB,EAAO,UAAYlY,IAGnBA,EAAOsZ,EAAI,GACXpB,EAAOlY,GAEJ,CACH8Z,KAAM,OACNP,IAAKD,EAAI,GACTtZ,OACAkY,OACA6B,OAAQ,CACJ,CACID,KAAM,OACNP,IAAKvZ,EACLA,SAIxB,CACA,CACIsX,GAAAA,CAAI+C,GACA,IAAIf,EACJ,GAAIA,EAAMa,KAAKV,MAAM7B,OAAON,IAAIrH,KAAKoK,GAAM,CACvC,IAAIra,EAAMkY,EACV,GAAe,MAAXoB,EAAI,GACJtZ,EAAOsZ,EAAI,GACXpB,EAAO,UAAYlY,MAElB,CAED,IAAIsf,EACJ,GACIA,EAAchG,EAAI,GAClBA,EAAI,GAAKa,KAAKV,MAAM7B,OAAOX,WAAWhH,KAAKqJ,EAAI,MAAM,IAAM,SACtDgG,IAAgBhG,EAAI,IAC7BtZ,EAAOsZ,EAAI,GAEPpB,EADW,SAAXoB,EAAI,GACG,UAAYA,EAAI,GAGhBA,EAAI,EAE/B,CACY,MAAO,CACHQ,KAAM,OACNP,IAAKD,EAAI,GACTtZ,OACAkY,OACA6B,OAAQ,CACJ,CACID,KAAM,OACNP,IAAKvZ,EACLA,SAIxB,CACA,CACIuf,UAAAA,CAAWlF,GACP,MAAMf,EAAMa,KAAKV,MAAM7B,OAAO5X,KAAKiQ,KAAKoK,GACxC,GAAIf,EAAK,CACL,MAAMZ,EAAUyB,KAAKX,MAAMG,MAAMqE,WACjC,MAAO,CACHlE,KAAM,OACNP,IAAKD,EAAI,GACTtZ,KAAMsZ,EAAI,GACVZ,UAEhB,CACA,ECjxBO,MAAM8G,GACTzF,OACAG,QACAP,MACAhK,UACA8P,YACApgB,WAAAA,CAAY6a,GAERC,KAAKJ,OAAS,GACdI,KAAKJ,OAAOyE,MAAQzjB,OAAOG,OAAO,MAClCif,KAAKD,QAAUA,GAAWrK,EAC1BsK,KAAKD,QAAQvK,UAAYwK,KAAKD,QAAQvK,WAAa,IAAIsK,GACvDE,KAAKxK,UAAYwK,KAAKD,QAAQvK,UAC9BwK,KAAKxK,UAAUuK,QAAUC,KAAKD,QAC9BC,KAAKxK,UAAU6J,MAAQW,KACvBA,KAAKsF,YAAc,GACnBtF,KAAKR,MAAQ,CACTC,QAAQ,EACRoE,YAAY,EACZ3C,KAAK,GAET,MAAM5B,EAAQ,CACVhJ,QACAiH,MAAOA,EAAMC,OACbC,OAAQA,EAAOD,QAEfwC,KAAKD,QAAQ1K,UACbiK,EAAM/B,MAAQA,EAAMlI,SACpBiK,EAAM7B,OAASA,EAAOpI,UAEjB2K,KAAKD,QAAQ3K,MAClBkK,EAAM/B,MAAQA,EAAMnI,IAChB4K,KAAKD,QAAQ7K,OACboK,EAAM7B,OAASA,EAAOvI,OAGtBoK,EAAM7B,OAASA,EAAOrI,KAG9B4K,KAAKxK,UAAU8J,MAAQA,CAC/B,CAII,gBAAWA,GACP,MAAO,CACH/B,QACAE,SAEZ,CAII,UAAO8H,CAAIrF,EAAKH,GAEZ,OADc,IAAIsF,GAAOtF,GACZwF,IAAIrF,EACzB,CAII,gBAAOsF,CAAUtF,EAAKH,GAElB,OADc,IAAIsF,GAAOtF,GACZF,aAAaK,EAClC,CAIIqF,GAAAA,CAAIrF,GACAA,EAAMA,EAAIrd,QAAQyT,EAAMgD,eAAgB,MACxC0G,KAAKmB,YAAYjB,EAAKF,KAAKJ,QAC3B,IAAK,IAAI3N,EAAI,EAAGA,EAAI+N,KAAKsF,YAAY1hB,OAAQqO,IAAK,CAC9C,MAAMwT,EAAOzF,KAAKsF,YAAYrT,GAC9B+N,KAAKH,aAAa4F,EAAKvF,IAAKuF,EAAK7F,OAC7C,CAEQ,OADAI,KAAKsF,YAAc,GACZtF,KAAKJ,MACpB,CACIuB,WAAAA,CAAYjB,GAAgD,IAA3CN,EAAMjc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAAI+hB,EAAoB/hB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAI9C,IAHIqc,KAAKD,QAAQ1K,WACb6K,EAAMA,EAAIrd,QAAQyT,EAAMY,cAAe,QAAQrU,QAAQyT,EAAMiD,UAAW,KAErE2G,GAAK,CACR,IAAIR,EACJ,GAAIM,KAAKD,QAAQ5K,YAAYoI,OAAO4F,MAAMwC,MAClCjG,EAAQiG,EAAalV,KAAK,CAAE4O,MAAOW,MAAQE,EAAKN,MAChDM,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,IACL,KAIX,SAGJ,GAAIA,EAAQM,KAAKxK,UAAUyK,MAAMC,GAAM,CACnCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9B,MAAMwd,EAAYxB,EAAOjB,IAAI,GACJ,IAArBe,EAAMN,IAAIxb,aAA8BU,IAAd8c,EAG1BA,EAAUhC,KAAO,KAGjBQ,EAAO1d,KAAKwd,GAEhB,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU0F,KAAKgF,GAAM,CAClCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9B,MAAMwd,EAAYxB,EAAOjB,IAAI,GAEL,cAApByC,GAAWzB,MAA4C,SAApByB,GAAWzB,MAC9CyB,EAAUhC,KAAO,KAAOM,EAAMN,IAC9BgC,EAAUvb,MAAQ,KAAO6Z,EAAM7Z,KAC/Bma,KAAKsF,YAAY3G,IAAI,GAAGuB,IAAMkB,EAAUvb,MAGxC+Z,EAAO1d,KAAKwd,GAEhB,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU2F,OAAO+E,GAAM,CACpCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU4F,QAAQ8E,GAAM,CACrCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU4E,GAAG8F,GAAM,CAChCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUyF,WAAWiF,GAAM,CACxCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUoF,KAAKsF,GAAM,CAClCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU1P,KAAKoa,GAAM,CAClCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUmF,IAAIuF,GAAM,CACjCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9B,MAAMwd,EAAYxB,EAAOjB,IAAI,GACL,cAApByC,GAAWzB,MAA4C,SAApByB,GAAWzB,MAC9CyB,EAAUhC,KAAO,KAAOM,EAAMN,IAC9BgC,EAAUvb,MAAQ,KAAO6Z,EAAMN,IAC/BY,KAAKsF,YAAY3G,IAAI,GAAGuB,IAAMkB,EAAUvb,MAElCma,KAAKJ,OAAOyE,MAAM3E,EAAMjL,OAC9BuL,KAAKJ,OAAOyE,MAAM3E,EAAMjL,KAAO,CAC3BsJ,KAAM2B,EAAM3B,KACZwB,MAAOG,EAAMH,QAGrB,QAChB,CAEY,GAAIG,EAAQM,KAAKxK,UAAU1H,MAAMoS,GAAM,CACnCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU+E,SAAS2F,GAAM,CACtCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAGY,IAAIkG,EAAS1F,EACb,GAAIF,KAAKD,QAAQ5K,YAAY0Q,WAAY,CACrC,IAAIC,EAAaC,IACjB,MAAMC,EAAU9F,EAAIjB,MAAM,GAC1B,IAAIgH,EACJjG,KAAKD,QAAQ5K,WAAW0Q,WAAWjkB,SAASskB,IACxCD,EAAYC,EAAczV,KAAK,CAAE4O,MAAOW,MAAQgG,GACvB,kBAAdC,GAA0BA,GAAa,IAC9CH,EAAahM,KAAKC,IAAI+L,EAAYG,GAC1D,IAEoBH,EAAaC,KAAYD,GAAc,IACvCF,EAAS1F,EAAIsB,UAAU,EAAGsE,EAAa,GAE3D,CACY,GAAI9F,KAAKR,MAAM0B,MAAQxB,EAAQM,KAAKxK,UAAUuF,UAAU6K,IAAxD,CACI,MAAMxE,EAAYxB,EAAOjB,IAAI,GACzB+G,GAA4C,cAApBtE,GAAWzB,MACnCyB,EAAUhC,KAAO,KAAOM,EAAMN,IAC9BgC,EAAUvb,MAAQ,KAAO6Z,EAAM7Z,KAC/Bma,KAAKsF,YAAYtjB,MACjBge,KAAKsF,YAAY3G,IAAI,GAAGuB,IAAMkB,EAAUvb,MAGxC+Z,EAAO1d,KAAKwd,GAEhBgG,EAAuBE,EAAOhiB,SAAWsc,EAAItc,OAC7Csc,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,OAE9C,MAEY,GAAI8b,EAAQM,KAAKxK,UAAU3P,KAAKqa,GAAhC,CACIA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9B,MAAMwd,EAAYxB,EAAOjB,IAAI,GACL,SAApByC,GAAWzB,MACXyB,EAAUhC,KAAO,KAAOM,EAAMN,IAC9BgC,EAAUvb,MAAQ,KAAO6Z,EAAM7Z,KAC/Bma,KAAKsF,YAAYtjB,MACjBge,KAAKsF,YAAY3G,IAAI,GAAGuB,IAAMkB,EAAUvb,MAGxC+Z,EAAO1d,KAAKwd,EAGhC,MACY,GAAIQ,EAAK,CACL,MAAMiG,EAAS,0BAA4BjG,EAAIkG,WAAW,GAC1D,GAAIpG,KAAKD,QAAQxK,OAAQ,CACrB3G,QAAQyX,MAAMF,GACd,KACpB,CAEoB,MAAM,IAAIG,MAAMH,EAEpC,CACA,CAEQ,OADAnG,KAAKR,MAAM0B,KAAM,EACVtB,CACf,CACInC,MAAAA,CAAOyC,GAAkB,IAAbN,EAAMjc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAEjB,OADAqc,KAAKsF,YAAYpjB,KAAK,CAAEge,MAAKN,WACtBA,CACf,CAIIC,YAAAA,CAAaK,GAAkB,IAAbN,EAAMjc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAEnB4gB,EAAYrE,EACZvd,EAAQ,KAEZ,GAAIqd,KAAKJ,OAAOyE,MAAO,CACnB,MAAMA,EAAQzjB,OAAO2lB,KAAKvG,KAAKJ,OAAOyE,OACtC,GAAIA,EAAMzgB,OAAS,EACf,KAA8E,OAAtEjB,EAAQqd,KAAKxK,UAAU8J,MAAM7B,OAAOP,cAAcpH,KAAKyO,KACvDF,EAAMmC,SAAS7jB,EAAM,GAAGsc,MAAMtc,EAAM,GAAGb,YAAY,KAAO,GAAI,MAC9DyiB,EAAYA,EAAUtF,MAAM,EAAGtc,EAAMgC,OAC/B,IAAM,IAAIyd,OAAOzf,EAAM,GAAGiB,OAAS,GAAK,IACxC2gB,EAAUtF,MAAMe,KAAKxK,UAAU8J,MAAM7B,OAAOP,cAAcnZ,WAIxF,CAEQ,KAA+E,OAAvEpB,EAAQqd,KAAKxK,UAAU8J,MAAM7B,OAAOnB,eAAexG,KAAKyO,KAC5DA,EAAYA,EAAUtF,MAAM,EAAGtc,EAAMgC,OAAS,KAAO4f,EAAUtF,MAAMe,KAAKxK,UAAU8J,MAAM7B,OAAOnB,eAAevY,WAGpH,KAA0E,OAAlEpB,EAAQqd,KAAKxK,UAAU8J,MAAM7B,OAAOV,UAAUjH,KAAKyO,KACvDA,EAAYA,EAAUtF,MAAM,EAAGtc,EAAMgC,OAAS,IAAM,IAAIyd,OAAOzf,EAAM,GAAGiB,OAAS,GAAK,IAAM2gB,EAAUtF,MAAMe,KAAKxK,UAAU8J,MAAM7B,OAAOV,UAAUhZ,WAEtJ,IAAI0iB,GAAe,EACfjC,EAAW,GACf,KAAOtE,GAAK,CAKR,IAAIR,EAEJ,GANK+G,IACDjC,EAAW,IAEfiC,GAAe,EAGXzG,KAAKD,QAAQ5K,YAAYsI,QAAQ0F,MAAMwC,MACnCjG,EAAQiG,EAAalV,KAAK,CAAE4O,MAAOW,MAAQE,EAAKN,MAChDM,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,IACL,KAIX,SAGJ,GAAIA,EAAQM,KAAKxK,UAAUyH,OAAOiD,GAAM,CACpCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUf,IAAIyL,GAAM,CACjCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUkH,KAAKwD,GAAM,CAClCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUmH,QAAQuD,EAAKF,KAAKJ,OAAOyE,OAAQ,CACxDnE,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9B,MAAMwd,EAAYxB,EAAOjB,IAAI,GACV,SAAfe,EAAMC,MAAuC,SAApByB,GAAWzB,MACpCyB,EAAUhC,KAAOM,EAAMN,IACvBgC,EAAUvb,MAAQ6Z,EAAM7Z,MAGxB+Z,EAAO1d,KAAKwd,GAEhB,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU8O,SAASpE,EAAKqE,EAAWC,GAAW,CAC3DtE,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUwP,SAAS9E,GAAM,CACtCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUiG,GAAGyE,GAAM,CAChCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAUwH,IAAIkD,GAAM,CACjCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,GAAIA,EAAQM,KAAKxK,UAAU+G,SAAS2D,GAAM,CACtCA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAEY,IAAKM,KAAKR,MAAMC,SAAWC,EAAQM,KAAKxK,UAAU2H,IAAI+C,IAAO,CACzDA,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QAC9Bgc,EAAO1d,KAAKwd,GACZ,QAChB,CAGY,IAAIkG,EAAS1F,EACb,GAAIF,KAAKD,QAAQ5K,YAAYuR,YAAa,CACtC,IAAIZ,EAAaC,IACjB,MAAMC,EAAU9F,EAAIjB,MAAM,GAC1B,IAAIgH,EACJjG,KAAKD,QAAQ5K,WAAWuR,YAAY9kB,SAASskB,IACzCD,EAAYC,EAAczV,KAAK,CAAE4O,MAAOW,MAAQgG,GACvB,kBAAdC,GAA0BA,GAAa,IAC9CH,EAAahM,KAAKC,IAAI+L,EAAYG,GAC1D,IAEoBH,EAAaC,KAAYD,GAAc,IACvCF,EAAS1F,EAAIsB,UAAU,EAAGsE,EAAa,GAE3D,CACY,GAAIpG,EAAQM,KAAKxK,UAAU4P,WAAWQ,GAAtC,CACI1F,EAAMA,EAAIsB,UAAU9B,EAAMN,IAAIxb,QACF,MAAxB8b,EAAMN,IAAIH,OAAO,KACjBuF,EAAW9E,EAAMN,IAAIH,OAAO,IAEhCwH,GAAe,EACf,MAAMrF,EAAYxB,EAAOjB,IAAI,GACL,SAApByC,GAAWzB,MACXyB,EAAUhC,KAAOM,EAAMN,IACvBgC,EAAUvb,MAAQ6Z,EAAM7Z,MAGxB+Z,EAAO1d,KAAKwd,EAGhC,MACY,GAAIQ,EAAK,CACL,MAAMiG,EAAS,0BAA4BjG,EAAIkG,WAAW,GAC1D,GAAIpG,KAAKD,QAAQxK,OAAQ,CACrB3G,QAAQyX,MAAMF,GACd,KACpB,CAEoB,MAAM,IAAIG,MAAMH,EAEpC,CACA,CACQ,OAAOvG,CACf,EC3ZO,MAAM+G,GACT5G,QACA6G,OACA1hB,WAAAA,CAAY6a,GACRC,KAAKD,QAAUA,GAAWrK,CAClC,CACIuK,KAAAA,CAAMP,GACF,MAAO,EACf,CACIxE,IAAAA,CAAI2L,GAA0B,IAAzB,KAAEhhB,EAAI,KAAE6a,EAAI,QAAEnC,GAASsI,EACxB,MAAMC,GAAcpG,GAAQ,IAAI/d,MAAM2T,EAAMkD,iBAAiB,GACvD0B,EAAOrV,EAAKhD,QAAQyT,EAAMmD,cAAe,IAAM,KACrD,OAAKqN,EAKE,8BACD7J,GAAO6J,GACP,MACCvI,EAAUrD,EAAO+B,GAAO/B,GAAM,IAC/B,kBARK,eACAqD,EAAUrD,EAAO+B,GAAO/B,GAAM,IAC/B,iBAOlB,CACID,UAAAA,CAAU8L,GAAa,IAAZ,OAAEnH,GAAQmH,EAEjB,MAAO,iBADM/G,KAAK4G,OAAOI,MAAMpH,mBAEvC,CACI9Z,IAAAA,CAAImhB,GAAW,IAAV,KAAEphB,GAAMohB,EACT,OAAOphB,CACf,CACIuV,OAAAA,CAAO8L,GAAoB,IAAnB,OAAEtH,EAAM,MAAEgB,GAAOsG,EACrB,MAAO,KAAKtG,KAASZ,KAAK4G,OAAOO,YAAYvH,QAAagB,MAClE,CACIxG,EAAAA,CAAGsF,GACC,MAAO,QACf,CACI9E,IAAAA,CAAK8E,GACD,MAAMgC,EAAUhC,EAAMgC,QAChBC,EAAQjC,EAAMiC,MACpB,IAAItR,EAAO,GACX,IAAK,IAAI+W,EAAI,EAAGA,EAAI1H,EAAMmC,MAAMje,OAAQwjB,IAAK,CACzC,MAAM5D,EAAO9D,EAAMmC,MAAMuF,GACzB/W,GAAQ2P,KAAKqH,SAAS7D,EAClC,CACQ,MAAM7D,EAAO+B,EAAU,KAAO,KAE9B,MAAO,IAAM/B,GADM+B,GAAqB,IAAVC,EAAgB,WAAaA,EAAQ,IAAO,IAC1C,MAAQtR,EAAO,KAAOsP,EAAO,KACrE,CACI0H,QAAAA,CAAS7D,GACL,IAAI8D,EAAW,GACf,GAAI9D,EAAKZ,KAAM,CACX,MAAM2E,EAAWvH,KAAKuH,SAAS,CAAE1E,UAAWW,EAAKX,UAC7CW,EAAK5B,MACwB,cAAzB4B,EAAK5D,OAAO,IAAID,MAChB6D,EAAK5D,OAAO,GAAG/Z,KAAO0hB,EAAW,IAAM/D,EAAK5D,OAAO,GAAG/Z,KAClD2d,EAAK5D,OAAO,GAAGA,QAAU4D,EAAK5D,OAAO,GAAGA,OAAOhc,OAAS,GAAuC,SAAlC4f,EAAK5D,OAAO,GAAGA,OAAO,GAAGD,OACtF6D,EAAK5D,OAAO,GAAGA,OAAO,GAAG/Z,KAAO0hB,EAAW,IAAMtK,GAAOuG,EAAK5D,OAAO,GAAGA,OAAO,GAAG/Z,MACjF2d,EAAK5D,OAAO,GAAGA,OAAO,GAAGrB,SAAU,IAIvCiF,EAAK5D,OAAO4H,QAAQ,CAChB7H,KAAM,OACNP,IAAKmI,EAAW,IAChB1hB,KAAM0hB,EAAW,IACjBhJ,SAAS,IAKjB+I,GAAYC,EAAW,GAEvC,CAEQ,OADAD,GAAYtH,KAAK4G,OAAOI,MAAMxD,EAAK5D,SAAU4D,EAAK5B,OAC3C,OAAO0F,UACtB,CACIC,QAAAA,CAAQE,GAAc,IAAb,QAAE5E,GAAS4E,EAChB,MAAO,WACA5E,EAAU,cAAgB,IAC3B,8BACd,CACI9H,SAAAA,CAAS2M,GAAa,IAAZ,OAAE9H,GAAQ8H,EAChB,MAAO,MAAM1H,KAAK4G,OAAOO,YAAYvH,UAC7C,CACI9R,KAAAA,CAAM4R,GACF,IAAI+D,EAAS,GAETG,EAAO,GACX,IAAK,IAAIwD,EAAI,EAAGA,EAAI1H,EAAM+D,OAAO7f,OAAQwjB,IACrCxD,GAAQ5D,KAAK2H,UAAUjI,EAAM+D,OAAO2D,IAExC3D,GAAUzD,KAAK4H,SAAS,CAAE/hB,KAAM+d,IAChC,IAAIvT,EAAO,GACX,IAAK,IAAI+W,EAAI,EAAGA,EAAI1H,EAAM6D,KAAK3f,OAAQwjB,IAAK,CACxC,MAAMzD,EAAMjE,EAAM6D,KAAK6D,GACvBxD,EAAO,GACP,IAAK,IAAIiE,EAAI,EAAGA,EAAIlE,EAAI/f,OAAQikB,IAC5BjE,GAAQ5D,KAAK2H,UAAUhE,EAAIkE,IAE/BxX,GAAQ2P,KAAK4H,SAAS,CAAE/hB,KAAM+d,GAC1C,CAGQ,OAFIvT,IACAA,EAAO,UAAUA,aACd,qBAEDoT,EACA,aACApT,EACA,YACd,CACIuX,QAAAA,CAAQE,GAAW,IAAV,KAAEjiB,GAAMiiB,EACb,MAAO,SAASjiB,UACxB,CACI8hB,SAAAA,CAAUjI,GACN,MAAM9W,EAAUoX,KAAK4G,OAAOO,YAAYzH,EAAME,QACxCD,EAAOD,EAAM+D,OAAS,KAAO,KAInC,OAHY/D,EAAMgE,MACZ,IAAI/D,YAAeD,EAAMgE,UACzB,IAAI/D,MACG/W,EAAU,KAAK+W,MACpC,CAIIoI,MAAAA,CAAMC,GAAa,IAAZ,OAAEpI,GAAQoI,EACb,MAAO,WAAWhI,KAAK4G,OAAOO,YAAYvH,aAClD,CACIqI,EAAAA,CAAEC,GAAa,IAAZ,OAAEtI,GAAQsI,EACT,MAAO,OAAOlI,KAAK4G,OAAOO,YAAYvH,SAC9C,CACIoF,QAAAA,CAAQmD,GAAW,IAAV,KAAEtiB,GAAMsiB,EACb,MAAO,SAASlL,GAAOpX,GAAM,WACrC,CACI4V,EAAAA,CAAGiE,GACC,MAAO,MACf,CACI1C,GAAAA,CAAGoL,GAAa,IAAZ,OAAExI,GAAQwI,EACV,MAAO,QAAQpI,KAAK4G,OAAOO,YAAYvH,UAC/C,CACIlD,IAAAA,CAAI2L,GAA0B,IAAzB,KAAEtK,EAAI,MAAEwB,EAAK,OAAEK,GAAQyI,EACxB,MAAMxiB,EAAOma,KAAK4G,OAAOO,YAAYvH,GAC/B0I,EAAYxK,GAASC,GAC3B,GAAkB,OAAduK,EACA,OAAOziB,EAEXkY,EAAOuK,EACP,IAAIC,EAAM,YAAcxK,EAAO,IAK/B,OAJIwB,IACAgJ,GAAO,WAActL,GAAOsC,GAAU,KAE1CgJ,GAAO,IAAM1iB,EAAO,OACb0iB,CACf,CACIC,KAAAA,CAAKC,GAAwB,IAAvB,KAAE1K,EAAI,MAAEwB,EAAK,KAAE1Z,GAAM4iB,EACvB,MAAMH,EAAYxK,GAASC,GAC3B,GAAkB,OAAduK,EACA,OAAOrL,GAAOpX,GAElBkY,EAAOuK,EACP,IAAIC,EAAM,aAAaxK,WAAclY,KAKrC,OAJI0Z,IACAgJ,GAAO,WAAWtL,GAAOsC,OAE7BgJ,GAAO,IACAA,CACf,CACI1iB,IAAAA,CAAK6Z,GACD,MAAO,WAAYA,GAASA,EAAME,OAC5BI,KAAK4G,OAAOO,YAAYzH,EAAME,QAC7B,YAAaF,GAASA,EAAMnB,QAAUmB,EAAM7Z,KAAOoX,GAAOyC,EAAM7Z,KAC/E,EC5KO,MAAM6iB,GAETX,MAAAA,CAAMY,GAAW,IAAV,KAAE9iB,GAAM8iB,EACX,OAAO9iB,CACf,CACIoiB,EAAAA,CAAEW,GAAW,IAAV,KAAE/iB,GAAM+iB,EACP,OAAO/iB,CACf,CACImf,QAAAA,CAAQ6D,GAAW,IAAV,KAAEhjB,GAAMgjB,EACb,OAAOhjB,CACf,CACImX,GAAAA,CAAG8L,GAAW,IAAV,KAAEjjB,GAAMijB,EACR,OAAOjjB,CACf,CACIC,IAAAA,CAAIijB,GAAW,IAAV,KAAEljB,GAAMkjB,EACT,OAAOljB,CACf,CACIA,IAAAA,CAAImjB,GAAW,IAAV,KAAEnjB,GAAMmjB,EACT,OAAOnjB,CACf,CACI6W,IAAAA,CAAIuM,GAAW,IAAV,KAAEpjB,GAAMojB,EACT,MAAO,GAAKpjB,CACpB,CACI2iB,KAAAA,CAAKU,GAAW,IAAV,KAAErjB,GAAMqjB,EACV,MAAO,GAAKrjB,CACpB,CACI4V,EAAAA,GACI,MAAO,EACf,EC1BO,MAAM0N,GACTpJ,QACAzK,SACA8T,aACAlkB,WAAAA,CAAY6a,GACRC,KAAKD,QAAUA,GAAWrK,EAC1BsK,KAAKD,QAAQzK,SAAW0K,KAAKD,QAAQzK,UAAY,IAAIqR,GACrD3G,KAAK1K,SAAW0K,KAAKD,QAAQzK,SAC7B0K,KAAK1K,SAASyK,QAAUC,KAAKD,QAC7BC,KAAK1K,SAASsR,OAAS5G,KACvBA,KAAKoJ,aAAe,IAAIV,EAChC,CAII,YAAO1B,CAAMpH,EAAQG,GAEjB,OADe,IAAIoJ,GAAQpJ,GACbiH,MAAMpH,EAC5B,CAII,kBAAOuH,CAAYvH,EAAQG,GAEvB,OADe,IAAIoJ,GAAQpJ,GACboH,YAAYvH,EAClC,CAIIoH,KAAAA,CAAMpH,GAAoB,IAAZsB,IAAGvd,UAAAC,OAAA,QAAAU,IAAAX,UAAA,KAAAA,UAAA,GACT4kB,EAAM,GACV,IAAK,IAAItW,EAAI,EAAGA,EAAI2N,EAAOhc,OAAQqO,IAAK,CACpC,MAAMoX,EAAWzJ,EAAO3N,GAExB,GAAI+N,KAAKD,QAAQ5K,YAAYmU,YAAYD,EAAS1J,MAAO,CACrD,MAAM4J,EAAeF,EACfG,EAAMxJ,KAAKD,QAAQ5K,WAAWmU,UAAUC,EAAa5J,MAAMlP,KAAK,CAAEmW,OAAQ5G,MAAQuJ,GACxF,IAAY,IAARC,IAAkB,CAAC,QAAS,KAAM,UAAW,OAAQ,QAAS,aAAc,OAAQ,OAAQ,YAAa,QAAQhD,SAAS+C,EAAa5J,MAAO,CAC9I4I,GAAOiB,GAAO,GACd,QACpB,CACA,CACY,MAAM9J,EAAQ2J,EACd,OAAQ3J,EAAMC,MACV,IAAK,QACD4I,GAAOvI,KAAK1K,SAAS2K,MAAMP,GAC3B,SAEJ,IAAK,KACD6I,GAAOvI,KAAK1K,SAAS8E,GAAGsF,GACxB,SAEJ,IAAK,UACD6I,GAAOvI,KAAK1K,SAAS8F,QAAQsE,GAC7B,SAEJ,IAAK,OACD6I,GAAOvI,KAAK1K,SAAS4F,KAAKwE,GAC1B,SAEJ,IAAK,QACD6I,GAAOvI,KAAK1K,SAASxH,MAAM4R,GAC3B,SAEJ,IAAK,aACD6I,GAAOvI,KAAK1K,SAAS2F,WAAWyE,GAChC,SAEJ,IAAK,OACD6I,GAAOvI,KAAK1K,SAASsF,KAAK8E,GAC1B,SAEJ,IAAK,OACD6I,GAAOvI,KAAK1K,SAASxP,KAAK4Z,GAC1B,SAEJ,IAAK,YACD6I,GAAOvI,KAAK1K,SAASyF,UAAU2E,GAC/B,SAEJ,IAAK,OAAQ,CACT,IAAI+J,EAAY/J,EACZrP,EAAO2P,KAAK1K,SAASzP,KAAK4jB,GAC9B,KAAOxX,EAAI,EAAI2N,EAAOhc,QAAiC,SAAvBgc,EAAO3N,EAAI,GAAG0N,MAC1C8J,EAAY7J,IAAS3N,GACrB5B,GAAQ,KAAO2P,KAAK1K,SAASzP,KAAK4jB,GAGlClB,GADArH,EACOlB,KAAK1K,SAASyF,UAAU,CAC3B4E,KAAM,YACNP,IAAK/O,EACLxK,KAAMwK,EACNuP,OAAQ,CAAC,CAAED,KAAM,OAAQP,IAAK/O,EAAMxK,KAAMwK,EAAMkO,SAAS,MAItDlO,EAEX,QACpB,CACgB,QAAS,CACL,MAAM8V,EAAS,eAAiBzG,EAAMC,KAAO,wBAC7C,GAAIK,KAAKD,QAAQxK,OAEb,OADA3G,QAAQyX,MAAMF,GACP,GAGP,MAAM,IAAIG,MAAMH,EAExC,EAEA,CACQ,OAAOoC,CACf,CAIIpB,WAAAA,CAAYvH,GAAkC,IAA1BtK,EAAQ3R,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGqc,KAAK1K,SAC5BiT,EAAM,GACV,IAAK,IAAItW,EAAI,EAAGA,EAAI2N,EAAOhc,OAAQqO,IAAK,CACpC,MAAMoX,EAAWzJ,EAAO3N,GAExB,GAAI+N,KAAKD,QAAQ5K,YAAYmU,YAAYD,EAAS1J,MAAO,CACrD,MAAM6J,EAAMxJ,KAAKD,QAAQ5K,WAAWmU,UAAUD,EAAS1J,MAAMlP,KAAK,CAAEmW,OAAQ5G,MAAQqJ,GACpF,IAAY,IAARG,IAAkB,CAAC,SAAU,OAAQ,OAAQ,QAAS,SAAU,KAAM,WAAY,KAAM,MAAO,QAAQhD,SAAS6C,EAAS1J,MAAO,CAChI4I,GAAOiB,GAAO,GACd,QACpB,CACA,CACY,MAAM9J,EAAQ2J,EACd,OAAQ3J,EAAMC,MACV,IAAK,SAoCL,IAAK,OACD4I,GAAOjT,EAASzP,KAAK6Z,GACrB,MAlCJ,IAAK,OACD6I,GAAOjT,EAASxP,KAAK4Z,GACrB,MAEJ,IAAK,OACD6I,GAAOjT,EAASoH,KAAKgD,GACrB,MAEJ,IAAK,QACD6I,GAAOjT,EAASkT,MAAM9I,GACtB,MAEJ,IAAK,SACD6I,GAAOjT,EAASyS,OAAOrI,GACvB,MAEJ,IAAK,KACD6I,GAAOjT,EAAS2S,GAAGvI,GACnB,MAEJ,IAAK,WACD6I,GAAOjT,EAAS0P,SAAStF,GACzB,MAEJ,IAAK,KACD6I,GAAOjT,EAASmG,GAAGiE,GACnB,MAEJ,IAAK,MACD6I,GAAOjT,EAAS0H,IAAI0C,GACpB,MAMJ,QAAS,CACL,MAAMyG,EAAS,eAAiBzG,EAAMC,KAAO,wBAC7C,GAAIK,KAAKD,QAAQxK,OAEb,OADA3G,QAAQyX,MAAMF,GACP,GAGP,MAAM,IAAIG,MAAMH,EAExC,EAEA,CACQ,OAAOoC,CACf,EC3LO,MAAMmB,GACT3J,QACAxC,MACArY,WAAAA,CAAY6a,GACRC,KAAKD,QAAUA,GAAWrK,CAClC,CACIiU,wBAA0B,SAAIC,IAAI,CAC9B,aACA,cACA,qBAHsB,GAQ1BC,UAAAA,CAAWC,GACP,OAAOA,CACf,CAIIC,WAAAA,CAAYjkB,GACR,OAAOA,CACf,CAIIkkB,gBAAAA,CAAiBpK,GACb,OAAOA,CACf,CAIIqK,YAAAA,GACI,OAAOjK,KAAKzC,MAAQ8H,GAAOE,IAAMF,GAAOG,SAChD,CAII0E,aAAAA,GACI,OAAOlK,KAAKzC,MAAQ4L,GAAQnC,MAAQmC,GAAQhC,WACpD,ECnCA,MAAMgD,GAAiB,ICAhB,MACHC,SVLO,CACHnV,OAAO,EACPC,QAAQ,EACRC,WAAY,KACZC,KAAK,EACL/L,MAAO,KACPgM,UAAU,EACVC,SAAU,KACVC,QAAQ,EACRC,UAAW,KACXC,WAAY,MUJhBsK,QAAUC,KAAKqK,WACfrD,MAAQhH,KAAKsK,eAAc,GAC3BnD,YAAcnH,KAAKsK,eAAc,GACjCC,OAAS,KAAApB,GAAA,GACTqB,SAAW,KAAA7D,GAAA,GACX8D,aAAe,KAAA/B,GAAA,GACfgC,MAAQ,KAAArF,GAAA,GACRsF,UAAY,KAAA7K,GAAA,GACZ8K,MAAQ,KAAAlB,GAAA,GACRxkB,WAAAA,GACI8a,KAAK6K,OAAIlnB,UACjB,CAII8R,UAAAA,CAAWmK,EAAQkL,GACf,IAAIC,EAAS,GACb,IAAK,MAAMrL,KAASE,EAEhB,OADAmL,EAASA,EAAOC,OAAOF,EAASra,KAAKuP,KAAMN,IACnCA,EAAMC,MACV,IAAK,QAAS,CACV,MAAMsL,EAAavL,EACnB,IAAK,MAAMkE,KAAQqH,EAAWxH,OAC1BsH,EAASA,EAAOC,OAAOhL,KAAKvK,WAAWmO,EAAKhE,OAAQkL,IAExD,IAAK,MAAMnH,KAAOsH,EAAW1H,KACzB,IAAK,MAAMK,KAAQD,EACfoH,EAASA,EAAOC,OAAOhL,KAAKvK,WAAWmO,EAAKhE,OAAQkL,IAG5D,KACpB,CACgB,IAAK,OAAQ,CACT,MAAMI,EAAYxL,EAClBqL,EAASA,EAAOC,OAAOhL,KAAKvK,WAAWyV,EAAUrJ,MAAOiJ,IACxD,KACpB,CACgB,QAAS,CACL,MAAMvB,EAAe7J,EACjBM,KAAKoK,SAASjV,YAAYgW,cAAc5B,EAAa5J,MACrDK,KAAKoK,SAASjV,WAAWgW,YAAY5B,EAAa5J,MAAM/d,SAASupB,IAC7D,MAAMvL,EAAS2J,EAAa4B,GAAaC,KAAKrF,KAC9CgF,EAASA,EAAOC,OAAOhL,KAAKvK,WAAWmK,EAAQkL,GAAU,IAGxDvB,EAAa3J,SAClBmL,EAASA,EAAOC,OAAOhL,KAAKvK,WAAW8T,EAAa3J,OAAQkL,IAEpF,EAGQ,OAAOC,CACf,CACIF,GAAAA,GACI,MAAM1V,EAAa6K,KAAKoK,SAASjV,YAAc,CAAEmU,UAAW,CAAC,EAAG6B,YAAa,CAAC,GAAG,QAAAnnB,EAAAL,UAAAC,OAD9EtC,EAAI,IAAAI,MAAAsC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ3C,EAAI2C,GAAAN,UAAAM,GAyKP,OAvKA3C,EAAKM,SAASypB,IAEV,MAAMC,EAAO,IAAKD,GA8DlB,GA5DAC,EAAKrW,MAAQ+K,KAAKoK,SAASnV,OAASqW,EAAKrW,QAAS,EAE9CoW,EAAKlW,aACLkW,EAAKlW,WAAWvT,SAAS2pB,IACrB,IAAKA,EAAIlc,KACL,MAAM,IAAIiX,MAAM,2BAEpB,GAAI,aAAciF,EAAK,CACnB,MAAMC,EAAerW,EAAWmU,UAAUiC,EAAIlc,MAG1C8F,EAAWmU,UAAUiC,EAAIlc,MAFzBmc,EAEiC,WAAmB,QAAA9nB,EAAAC,UAAAC,OAANtC,EAAI,IAAAI,MAAAgC,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJvC,EAAIuC,GAAAF,UAAAE,GAC9C,IAAI2lB,EAAM+B,EAAIjW,SAAStU,MAAMgf,KAAM1e,GAInC,OAHY,IAARkoB,IACAA,EAAMgC,EAAaxqB,MAAMgf,KAAM1e,IAE5BkoB,CACvC,EAG6D+B,EAAIjW,QAEjE,CACoB,GAAI,cAAeiW,EAAK,CACpB,IAAKA,EAAIrH,OAAwB,UAAdqH,EAAIrH,OAAmC,WAAdqH,EAAIrH,MAC5C,MAAM,IAAIoC,MAAM,+CAEpB,MAAMmF,EAAWtW,EAAWoW,EAAIrH,OAC5BuH,EACAA,EAASjE,QAAQ+D,EAAI/V,WAGrBL,EAAWoW,EAAIrH,OAAS,CAACqH,EAAI/V,WAE7B+V,EAAI5J,QACc,UAAd4J,EAAIrH,MACA/O,EAAW0Q,WACX1Q,EAAW0Q,WAAW3jB,KAAKqpB,EAAI5J,OAG/BxM,EAAW0Q,WAAa,CAAC0F,EAAI5J,OAGd,WAAd4J,EAAIrH,QACL/O,EAAWuR,YACXvR,EAAWuR,YAAYxkB,KAAKqpB,EAAI5J,OAGhCxM,EAAWuR,YAAc,CAAC6E,EAAI5J,QAIlE,CACwB,gBAAiB4J,GAAOA,EAAIJ,cAC5BhW,EAAWgW,YAAYI,EAAIlc,MAAQkc,EAAIJ,YAC/D,IAEgBG,EAAKnW,WAAaA,GAGlBkW,EAAK/V,SAAU,CACf,MAAMA,EAAW0K,KAAKoK,SAAS9U,UAAY,IAAIqR,GAAU3G,KAAKoK,UAC9D,IAAK,MAAMhlB,KAAQimB,EAAK/V,SAAU,CAC9B,KAAMlQ,KAAQkQ,GACV,MAAM,IAAIgR,MAAM,aAAalhB,qBAEjC,GAAI,CAAC,UAAW,UAAUohB,SAASphB,GAE/B,SAEJ,MAAMsmB,EAAetmB,EACfumB,EAAeN,EAAK/V,SAASoW,GAC7BF,EAAelW,EAASoW,GAE9BpW,EAASoW,GAAgB,WAAa,QAAAE,EAAAjoB,UAAAC,OAATtC,EAAI,IAAAI,MAAAkqB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJvqB,EAAIuqB,GAAAloB,UAAAkoB,GAC7B,IAAIrC,EAAMmC,EAAa3qB,MAAMsU,EAAUhU,GAIvC,OAHY,IAARkoB,IACAA,EAAMgC,EAAaxqB,MAAMsU,EAAUhU,IAEhCkoB,GAAO,EACtC,CACA,CACgB8B,EAAKhW,SAAWA,CAChC,CACY,GAAI+V,EAAK7V,UAAW,CAChB,MAAMA,EAAYwK,KAAKoK,SAAS5U,WAAa,IAAIsK,GAAWE,KAAKoK,UACjE,IAAK,MAAMhlB,KAAQimB,EAAK7V,UAAW,CAC/B,KAAMpQ,KAAQoQ,GACV,MAAM,IAAI8Q,MAAM,cAAclhB,qBAElC,GAAI,CAAC,UAAW,QAAS,SAASohB,SAASphB,GAEvC,SAEJ,MAAM0mB,EAAgB1mB,EAChB2mB,EAAgBV,EAAK7V,UAAUsW,GAC/BE,EAAgBxW,EAAUsW,GAGhCtW,EAAUsW,GAAiB,WAAa,QAAAG,EAAAtoB,UAAAC,OAATtC,EAAI,IAAAI,MAAAuqB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ5qB,EAAI4qB,GAAAvoB,UAAAuoB,GAC/B,IAAI1C,EAAMuC,EAAc/qB,MAAMwU,EAAWlU,GAIzC,OAHY,IAARkoB,IACAA,EAAMwC,EAAchrB,MAAMwU,EAAWlU,IAElCkoB,CAC/B,CACA,CACgB8B,EAAK9V,UAAYA,CACjC,CAEY,GAAI6V,EAAKhiB,MAAO,CACZ,MAAMA,EAAQ2W,KAAKoK,SAAS/gB,OAAS,IAAIqgB,GACzC,IAAK,MAAMtkB,KAAQimB,EAAKhiB,MAAO,CAC3B,KAAMjE,KAAQiE,GACV,MAAM,IAAIid,MAAM,SAASlhB,qBAE7B,GAAI,CAAC,UAAW,SAASohB,SAASphB,GAE9B,SAEJ,MAAM+mB,EAAY/mB,EACZgnB,EAAYf,EAAKhiB,MAAM8iB,GACvBE,EAAWhjB,EAAM8iB,GACnBzC,GAAO4C,iBAAiBC,IAAInnB,GAE5BiE,EAAM8iB,GAAcK,IAChB,GAAIxM,KAAKoK,SAASnV,MACd,OAAOwX,QAAQC,QAAQN,EAAU3b,KAAKpH,EAAOmjB,IAAMG,MAAKnD,GAC7C6C,EAAS5b,KAAKpH,EAAOmgB,KAGpC,MAAMA,EAAM4C,EAAU3b,KAAKpH,EAAOmjB,GAClC,OAAOH,EAAS5b,KAAKpH,EAAOmgB,EAAI,EAKpCngB,EAAM8iB,GAAa,WAAa,QAAAS,EAAAjpB,UAAAC,OAATtC,EAAI,IAAAI,MAAAkrB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJvrB,EAAIurB,GAAAlpB,UAAAkpB,GACvB,IAAIrD,EAAM4C,EAAUprB,MAAMqI,EAAO/H,GAIjC,OAHY,IAARkoB,IACAA,EAAM6C,EAASrrB,MAAMqI,EAAO/H,IAEzBkoB,CACnC,CAEA,CACgB8B,EAAKjiB,MAAQA,CAC7B,CAEY,GAAIgiB,EAAK5V,WAAY,CACjB,MAAMA,EAAauK,KAAKoK,SAAS3U,WAC3BqX,EAAiBzB,EAAK5V,WAC5B6V,EAAK7V,WAAa,SAAUiK,GACxB,IAAIqL,EAAS,GAKb,OAJAA,EAAO7oB,KAAK4qB,EAAerc,KAAKuP,KAAMN,IAClCjK,IACAsV,EAASA,EAAOC,OAAOvV,EAAWhF,KAAKuP,KAAMN,KAE1CqL,CAC3B,CACA,CACY/K,KAAKoK,SAAW,IAAKpK,KAAKoK,YAAakB,EAAM,IAE1CtL,IACf,CACIqK,UAAAA,CAAWpU,GAEP,OADA+J,KAAKoK,SAAW,IAAKpK,KAAKoK,YAAanU,GAChC+J,IACf,CACIX,KAAAA,CAAMa,EAAKH,GACP,OAAOsF,GAAOE,IAAIrF,EAAKH,GAAWC,KAAKoK,SAC/C,CACIxD,MAAAA,CAAOhH,EAAQG,GACX,OAAOoJ,GAAQnC,MAAMpH,EAAQG,GAAWC,KAAKoK,SACrD,CACIE,aAAAA,CAAcyC,GAsDV,MApDc/F,CAAC9G,EAAKH,KAChB,MAAMiN,EAAU,IAAKjN,GACf9J,EAAM,IAAK+J,KAAKoK,YAAa4C,GAC7BC,EAAajN,KAAKkN,UAAUjX,EAAIV,SAAUU,EAAIhB,OAEpD,IAA4B,IAAxB+K,KAAKoK,SAASnV,QAAoC,IAAlB+X,EAAQ/X,MACxC,OAAOgY,EAAW,IAAI3G,MAAM,uIAGhC,GAAmB,qBAARpG,GAA+B,OAARA,EAC9B,OAAO+M,EAAW,IAAI3G,MAAM,mDAEhC,GAAmB,kBAARpG,EACP,OAAO+M,EAAW,IAAI3G,MAAM,wCACtB1lB,OAAOe,UAAUc,SAASgO,KAAKyP,GAAO,sBAE5CjK,EAAI5M,QACJ4M,EAAI5M,MAAM0W,QAAU9J,EACpBA,EAAI5M,MAAMkU,MAAQwP,GAEtB,MAAM1N,EAAQpJ,EAAI5M,MAAQ4M,EAAI5M,MAAM4gB,eAAkB8C,EAAY1H,GAAOE,IAAMF,GAAOG,UAChFoB,EAAS3Q,EAAI5M,MAAQ4M,EAAI5M,MAAM6gB,gBAAmB6C,EAAY5D,GAAQnC,MAAQmC,GAAQhC,YAC5F,GAAIlR,EAAIhB,MACJ,OAAOwX,QAAQC,QAAQzW,EAAI5M,MAAQ4M,EAAI5M,MAAMwgB,WAAW3J,GAAOA,GAC1DyM,MAAKzM,GAAOb,EAAMa,EAAKjK,KACvB0W,MAAK/M,GAAU3J,EAAI5M,MAAQ4M,EAAI5M,MAAM2gB,iBAAiBpK,GAAUA,IAChE+M,MAAK/M,GAAU3J,EAAIR,WAAagX,QAAQU,IAAInN,KAAKvK,WAAWmK,EAAQ3J,EAAIR,aAAakX,MAAK,IAAM/M,IAAUA,IAC1G+M,MAAK/M,GAAUgH,EAAOhH,EAAQ3J,KAC9B0W,MAAK7mB,GAAQmQ,EAAI5M,MAAQ4M,EAAI5M,MAAM0gB,YAAYjkB,GAAQA,IACvDsnB,MAAMH,GAEf,IACQhX,EAAI5M,QACJ6W,EAAMjK,EAAI5M,MAAMwgB,WAAW3J,IAE/B,IAAIN,EAASP,EAAMa,EAAKjK,GACpBA,EAAI5M,QACJuW,EAAS3J,EAAI5M,MAAM2gB,iBAAiBpK,IAEpC3J,EAAIR,YACJuK,KAAKvK,WAAWmK,EAAQ3J,EAAIR,YAEhC,IAAI3P,EAAO8gB,EAAOhH,EAAQ3J,GAI1B,OAHIA,EAAI5M,QACJvD,EAAOmQ,EAAI5M,MAAM0gB,YAAYjkB,IAE1BA,CACvB,CACY,MAAOunB,GACH,OAAOJ,EAAWI,EAClC,EAGA,CACIH,OAAAA,CAAQ3X,EAAQN,GACZ,OAAQoY,IAEJ,GADAA,EAAEC,SAAW,8DACT/X,EAAQ,CACR,MAAMgY,EAAM,iCACNtQ,GAAOoQ,EAAEC,QAAU,IAAI,GACvB,SACN,OAAIrY,EACOwX,QAAQC,QAAQa,GAEpBA,CACvB,CACY,GAAItY,EACA,OAAOwX,QAAQe,OAAOH,GAE1B,MAAMA,CAAC,CAEnB,GDpTO,SAASI,GAAOvN,EAAKjK,GACxB,OAAOkU,GAAenD,MAAM9G,EAAKjK,EACrC,CAMAwX,GAAO1N,QACH0N,GAAOpD,WAAa,SAAUtK,GAI1B,OAHAoK,GAAeE,WAAWtK,GAC1B0N,GAAOrD,SAAWD,GAAeC,SACjCzU,EAAe8X,GAAOrD,UACfqD,EACf,EAIAA,GAAOC,YAAc1Y,EACrByY,GAAOrD,SAAW1U,EAIlB+X,GAAO5C,IAAM,WAIT,OAHAV,GAAeU,OAAIlnB,WACnB8pB,GAAOrD,SAAWD,GAAeC,SACjCzU,EAAe8X,GAAOrD,UACfqD,EACX,EAIAA,GAAOhY,WAAa,SAAUmK,EAAQkL,GAClC,OAAOX,GAAe1U,WAAWmK,EAAQkL,EAC7C,EAQA2C,GAAOtG,YAAcgD,GAAehD,YAIpCsG,GAAOlD,OAASpB,GAChBsE,GAAO7G,OAASuC,GAAQnC,MACxByG,GAAOjD,SAAW7D,GAClB8G,GAAOhD,aAAe/B,GACtB+E,GAAO/C,MAAQrF,GACfoI,GAAOpO,MAAQgG,GAAOE,IACtBkI,GAAO9C,UAAY7K,GACnB2N,GAAO7C,MAAQlB,GACf+D,GAAOzG,MAAQyG,GACQA,GAAO1N,QACJ0N,GAAOpD,WACdoD,GAAO5C,IACA4C,GAAOhY,WACNgY,GAAOtG,YAEZgC,GAAQnC,MACT3B,GAAOE","sources":["../node_modules/dompurify/src/utils.ts","../node_modules/dompurify/src/tags.ts","../node_modules/dompurify/src/attrs.ts","../node_modules/dompurify/src/regexp.ts","../node_modules/dompurify/src/purify.ts","../node_modules/marked/src/defaults.ts","../node_modules/marked/src/rules.ts","../node_modules/marked/src/helpers.ts","../node_modules/marked/src/Tokenizer.ts","../node_modules/marked/src/Lexer.ts","../node_modules/marked/src/Renderer.ts","../node_modules/marked/src/TextRenderer.ts","../node_modules/marked/src/Parser.ts","../node_modules/marked/src/Hooks.ts","../node_modules/marked/src/marked.ts","../node_modules/marked/src/Instance.ts"],"sourcesContent":["const {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n} = Object;\n\nlet { freeze, seal, create } = Object; // eslint-disable-line import/no-mutable-exports\nlet { apply, construct } = typeof Reflect !== 'undefined' && Reflect;\n\nif (!freeze) {\n  freeze = function (x) {\n    return x;\n  };\n}\n\nif (!seal) {\n  seal = function (x) {\n    return x;\n  };\n}\n\nif (!apply) {\n  apply = function (fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\n\nif (!construct) {\n  construct = function (Func, args) {\n    return new Func(...args);\n  };\n}\n\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayIndexOf = unapply(Array.prototype.indexOf);\nconst arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySlice = unapply(Array.prototype.slice);\nconst arraySplice = unapply(Array.prototype.splice);\n\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\n\nconst objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\n\nconst regExpTest = unapply(RegExp.prototype.test);\n\nconst typeErrorCreate = unconstruct(TypeError);\n\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param func - The function to be wrapped and called.\n * @returns A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply<T>(\n  func: (thisArg: any, ...args: any[]) => T\n): (thisArg: any, ...args: any[]) => T {\n  return (thisArg: any, ...args: any[]): T => {\n    if (thisArg instanceof RegExp) {\n      thisArg.lastIndex = 0;\n    }\n\n    return apply(func, thisArg, args);\n  };\n}\n\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param func - The constructor function to be wrapped and called.\n * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct<T>(func: (...args: any[]) => T): (...args: any[]) => T {\n  return (...args: any[]): T => construct(func, args);\n}\n\n/**\n * Add properties to a lookup table\n *\n * @param set - The set to which elements will be added.\n * @param array - The array containing elements to be added to the set.\n * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns The modified set with added elements.\n */\nfunction addToSet(\n  set: Record<string, any>,\n  array: readonly any[],\n  transformCaseFunc: ReturnType<typeof unapply<string>> = stringToLowerCase\n): Record<string, any> {\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          (array as any[])[l] = lcElement;\n        }\n\n        element = lcElement;\n      }\n    }\n\n    set[element] = true;\n  }\n\n  return set;\n}\n\n/**\n * Clean up an array to harden against CSPP\n *\n * @param array - The array to be cleaned.\n * @returns The cleaned version of the array\n */\nfunction cleanArray<T>(array: T[]): Array<T | null> {\n  for (let index = 0; index < array.length; index++) {\n    const isPropertyExist = objectHasOwnProperty(array, index);\n\n    if (!isPropertyExist) {\n      array[index] = null;\n    }\n  }\n\n  return array;\n}\n\n/**\n * Shallow clone an object\n *\n * @param object - The object to be cloned.\n * @returns A new object that copies the original.\n */\nfunction clone<T extends Record<string, any>>(object: T): T {\n  const newObject = create(null);\n\n  for (const [property, value] of entries(object)) {\n    const isPropertyExist = objectHasOwnProperty(object, property);\n\n    if (isPropertyExist) {\n      if (Array.isArray(value)) {\n        newObject[property] = cleanArray(value);\n      } else if (\n        value &&\n        typeof value === 'object' &&\n        value.constructor === Object\n      ) {\n        newObject[property] = clone(value);\n      } else {\n        newObject[property] = value;\n      }\n    }\n  }\n\n  return newObject;\n}\n\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param object - The object to look up the getter function in its prototype chain.\n * @param prop - The property name for which to find the getter function.\n * @returns The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter<T extends Record<string, any>>(\n  object: T,\n  prop: string\n): ReturnType<typeof unapply<any>> | (() => null) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n\n    object = getPrototypeOf(object);\n  }\n\n  function fallbackValue(): null {\n    return null;\n  }\n\n  return fallbackValue;\n}\n\nexport {\n  // Array\n  arrayForEach,\n  arrayIndexOf,\n  arrayLastIndexOf,\n  arrayPop,\n  arrayPush,\n  arraySlice,\n  arraySplice,\n  // Object\n  entries,\n  freeze,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n  isFrozen,\n  setPrototypeOf,\n  seal,\n  clone,\n  create,\n  objectHasOwnProperty,\n  // RegExp\n  regExpTest,\n  // String\n  stringIndexOf,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringTrim,\n  // Errors\n  typeErrorCreate,\n  // Other\n  lookupGetter,\n  addToSet,\n  // Reflect\n  unapply,\n  unconstruct,\n};\n","import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'a',\n  'abbr',\n  'acronym',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'bdi',\n  'bdo',\n  'big',\n  'blink',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'center',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'content',\n  'data',\n  'datalist',\n  'dd',\n  'decorator',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'element',\n  'em',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'font',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'map',\n  'mark',\n  'marquee',\n  'menu',\n  'menuitem',\n  'meter',\n  'nav',\n  'nobr',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'section',\n  'select',\n  'shadow',\n  'small',\n  'source',\n  'spacer',\n  'span',\n  'strike',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'tt',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n] as const);\n\nexport const svg = freeze([\n  'svg',\n  'a',\n  'altglyph',\n  'altglyphdef',\n  'altglyphitem',\n  'animatecolor',\n  'animatemotion',\n  'animatetransform',\n  'circle',\n  'clippath',\n  'defs',\n  'desc',\n  'ellipse',\n  'filter',\n  'font',\n  'g',\n  'glyph',\n  'glyphref',\n  'hkern',\n  'image',\n  'line',\n  'lineargradient',\n  'marker',\n  'mask',\n  'metadata',\n  'mpath',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialgradient',\n  'rect',\n  'stop',\n  'style',\n  'switch',\n  'symbol',\n  'text',\n  'textpath',\n  'title',\n  'tref',\n  'tspan',\n  'view',\n  'vkern',\n] as const);\n\nexport const svgFilters = freeze([\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n] as const);\n\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nexport const svgDisallowed = freeze([\n  'animate',\n  'color-profile',\n  'cursor',\n  'discard',\n  'font-face',\n  'font-face-format',\n  'font-face-name',\n  'font-face-src',\n  'font-face-uri',\n  'foreignobject',\n  'hatch',\n  'hatchpath',\n  'mesh',\n  'meshgradient',\n  'meshpatch',\n  'meshrow',\n  'missing-glyph',\n  'script',\n  'set',\n  'solidcolor',\n  'unknown',\n  'use',\n] as const);\n\nexport const mathMl = freeze([\n  'math',\n  'menclose',\n  'merror',\n  'mfenced',\n  'mfrac',\n  'mglyph',\n  'mi',\n  'mlabeledtr',\n  'mmultiscripts',\n  'mn',\n  'mo',\n  'mover',\n  'mpadded',\n  'mphantom',\n  'mroot',\n  'mrow',\n  'ms',\n  'mspace',\n  'msqrt',\n  'mstyle',\n  'msub',\n  'msup',\n  'msubsup',\n  'mtable',\n  'mtd',\n  'mtext',\n  'mtr',\n  'munder',\n  'munderover',\n  'mprescripts',\n] as const);\n\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nexport const mathMlDisallowed = freeze([\n  'maction',\n  'maligngroup',\n  'malignmark',\n  'mlongdiv',\n  'mscarries',\n  'mscarry',\n  'msgroup',\n  'mstack',\n  'msline',\n  'msrow',\n  'semantics',\n  'annotation',\n  'annotation-xml',\n  'mprescripts',\n  'none',\n] as const);\n\nexport const text = freeze(['#text'] as const);\n","import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'accept',\n  'action',\n  'align',\n  'alt',\n  'autocapitalize',\n  'autocomplete',\n  'autopictureinpicture',\n  'autoplay',\n  'background',\n  'bgcolor',\n  'border',\n  'capture',\n  'cellpadding',\n  'cellspacing',\n  'checked',\n  'cite',\n  'class',\n  'clear',\n  'color',\n  'cols',\n  'colspan',\n  'controls',\n  'controlslist',\n  'coords',\n  'crossorigin',\n  'datetime',\n  'decoding',\n  'default',\n  'dir',\n  'disabled',\n  'disablepictureinpicture',\n  'disableremoteplayback',\n  'download',\n  'draggable',\n  'enctype',\n  'enterkeyhint',\n  'face',\n  'for',\n  'headers',\n  'height',\n  'hidden',\n  'high',\n  'href',\n  'hreflang',\n  'id',\n  'inputmode',\n  'integrity',\n  'ismap',\n  'kind',\n  'label',\n  'lang',\n  'list',\n  'loading',\n  'loop',\n  'low',\n  'max',\n  'maxlength',\n  'media',\n  'method',\n  'min',\n  'minlength',\n  'multiple',\n  'muted',\n  'name',\n  'nonce',\n  'noshade',\n  'novalidate',\n  'nowrap',\n  'open',\n  'optimum',\n  'pattern',\n  'placeholder',\n  'playsinline',\n  'popover',\n  'popovertarget',\n  'popovertargetaction',\n  'poster',\n  'preload',\n  'pubdate',\n  'radiogroup',\n  'readonly',\n  'rel',\n  'required',\n  'rev',\n  'reversed',\n  'role',\n  'rows',\n  'rowspan',\n  'spellcheck',\n  'scope',\n  'selected',\n  'shape',\n  'size',\n  'sizes',\n  'span',\n  'srclang',\n  'start',\n  'src',\n  'srcset',\n  'step',\n  'style',\n  'summary',\n  'tabindex',\n  'title',\n  'translate',\n  'type',\n  'usemap',\n  'valign',\n  'value',\n  'width',\n  'wrap',\n  'xmlns',\n  'slot',\n] as const);\n\nexport const svg = freeze([\n  'accent-height',\n  'accumulate',\n  'additive',\n  'alignment-baseline',\n  'amplitude',\n  'ascent',\n  'attributename',\n  'attributetype',\n  'azimuth',\n  'basefrequency',\n  'baseline-shift',\n  'begin',\n  'bias',\n  'by',\n  'class',\n  'clip',\n  'clippathunits',\n  'clip-path',\n  'clip-rule',\n  'color',\n  'color-interpolation',\n  'color-interpolation-filters',\n  'color-profile',\n  'color-rendering',\n  'cx',\n  'cy',\n  'd',\n  'dx',\n  'dy',\n  'diffuseconstant',\n  'direction',\n  'display',\n  'divisor',\n  'dur',\n  'edgemode',\n  'elevation',\n  'end',\n  'exponent',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'filter',\n  'filterunits',\n  'flood-color',\n  'flood-opacity',\n  'font-family',\n  'font-size',\n  'font-size-adjust',\n  'font-stretch',\n  'font-style',\n  'font-variant',\n  'font-weight',\n  'fx',\n  'fy',\n  'g1',\n  'g2',\n  'glyph-name',\n  'glyphref',\n  'gradientunits',\n  'gradienttransform',\n  'height',\n  'href',\n  'id',\n  'image-rendering',\n  'in',\n  'in2',\n  'intercept',\n  'k',\n  'k1',\n  'k2',\n  'k3',\n  'k4',\n  'kerning',\n  'keypoints',\n  'keysplines',\n  'keytimes',\n  'lang',\n  'lengthadjust',\n  'letter-spacing',\n  'kernelmatrix',\n  'kernelunitlength',\n  'lighting-color',\n  'local',\n  'marker-end',\n  'marker-mid',\n  'marker-start',\n  'markerheight',\n  'markerunits',\n  'markerwidth',\n  'maskcontentunits',\n  'maskunits',\n  'max',\n  'mask',\n  'media',\n  'method',\n  'mode',\n  'min',\n  'name',\n  'numoctaves',\n  'offset',\n  'operator',\n  'opacity',\n  'order',\n  'orient',\n  'orientation',\n  'origin',\n  'overflow',\n  'paint-order',\n  'path',\n  'pathlength',\n  'patterncontentunits',\n  'patterntransform',\n  'patternunits',\n  'points',\n  'preservealpha',\n  'preserveaspectratio',\n  'primitiveunits',\n  'r',\n  'rx',\n  'ry',\n  'radius',\n  'refx',\n  'refy',\n  'repeatcount',\n  'repeatdur',\n  'restart',\n  'result',\n  'rotate',\n  'scale',\n  'seed',\n  'shape-rendering',\n  'slope',\n  'specularconstant',\n  'specularexponent',\n  'spreadmethod',\n  'startoffset',\n  'stddeviation',\n  'stitchtiles',\n  'stop-color',\n  'stop-opacity',\n  'stroke-dasharray',\n  'stroke-dashoffset',\n  'stroke-linecap',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke',\n  'stroke-width',\n  'style',\n  'surfacescale',\n  'systemlanguage',\n  'tabindex',\n  'tablevalues',\n  'targetx',\n  'targety',\n  'transform',\n  'transform-origin',\n  'text-anchor',\n  'text-decoration',\n  'text-rendering',\n  'textlength',\n  'type',\n  'u1',\n  'u2',\n  'unicode',\n  'values',\n  'viewbox',\n  'visibility',\n  'version',\n  'vert-adv-y',\n  'vert-origin-x',\n  'vert-origin-y',\n  'width',\n  'word-spacing',\n  'wrap',\n  'writing-mode',\n  'xchannelselector',\n  'ychannelselector',\n  'x',\n  'x1',\n  'x2',\n  'xmlns',\n  'y',\n  'y1',\n  'y2',\n  'z',\n  'zoomandpan',\n] as const);\n\nexport const mathMl = freeze([\n  'accent',\n  'accentunder',\n  'align',\n  'bevelled',\n  'close',\n  'columnsalign',\n  'columnlines',\n  'columnspan',\n  'denomalign',\n  'depth',\n  'dir',\n  'display',\n  'displaystyle',\n  'encoding',\n  'fence',\n  'frame',\n  'height',\n  'href',\n  'id',\n  'largeop',\n  'length',\n  'linethickness',\n  'lspace',\n  'lquote',\n  'mathbackground',\n  'mathcolor',\n  'mathsize',\n  'mathvariant',\n  'maxsize',\n  'minsize',\n  'movablelimits',\n  'notation',\n  'numalign',\n  'open',\n  'rowalign',\n  'rowlines',\n  'rowspacing',\n  'rowspan',\n  'rspace',\n  'rquote',\n  'scriptlevel',\n  'scriptminsize',\n  'scriptsizemultiplier',\n  'selection',\n  'separator',\n  'separators',\n  'stretchy',\n  'subscriptshift',\n  'supscriptshift',\n  'symmetric',\n  'voffset',\n  'width',\n  'xmlns',\n]);\n\nexport const xml = freeze([\n  'xlink:href',\n  'xml:id',\n  'xlink:title',\n  'xml:space',\n  'xmlns:xlink',\n] as const);\n","import { seal } from './utils.js';\n\n// eslint-disable-next-line unicorn/better-regex\nexport const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nexport const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nexport const TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\nexport const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\nexport const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nexport const IS_ALLOWED_URI = seal(\n  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nexport const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nexport const ATTR_WHITESPACE = seal(\n  /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nexport const DOCTYPE_NAME = seal(/^html$/i);\nexport const CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n","/* eslint-disable @typescript-eslint/indent */\n\nimport type { TrustedHTML, TrustedTypesWindow } from 'trusted-types/lib';\nimport type { Config, UseProfilesConfig } from './config';\nimport * as TAGS from './tags.js';\nimport * as ATTRS from './attrs.js';\nimport * as EXPRESSIONS from './regexp.js';\nimport {\n  addToSet,\n  clone,\n  entries,\n  freeze,\n  arrayForEach,\n  arrayLastIndexOf,\n  arrayPop,\n  arrayPush,\n  arraySplice,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringIndexOf,\n  stringTrim,\n  regExpTest,\n  typeErrorCreate,\n  lookupGetter,\n  create,\n  objectHasOwnProperty,\n} from './utils.js';\n\nexport type { Config } from './config';\n\ndeclare const VERSION: string;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\nconst NODE_TYPE = {\n  element: 1,\n  attribute: 2,\n  text: 3,\n  cdataSection: 4,\n  entityReference: 5, // Deprecated\n  entityNode: 6, // Deprecated\n  progressingInstruction: 7,\n  comment: 8,\n  document: 9,\n  documentType: 10,\n  documentFragment: 11,\n  notation: 12, // Deprecated\n};\n\nconst getGlobal = function (): WindowLike {\n  return typeof window === 'undefined' ? null : window;\n};\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param trustedTypes The policy factory.\n * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function (\n  trustedTypes: TrustedTypePolicyFactory,\n  purifyHostElement: HTMLScriptElement\n) {\n  if (\n    typeof trustedTypes !== 'object' ||\n    typeof trustedTypes.createPolicy !== 'function'\n  ) {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      },\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn(\n      'TrustedTypes policy ' + policyName + ' could not be created.'\n    );\n    return null;\n  }\n};\n\nconst _createHooksMap = function (): HooksMap {\n  return {\n    afterSanitizeAttributes: [],\n    afterSanitizeElements: [],\n    afterSanitizeShadowDOM: [],\n    beforeSanitizeAttributes: [],\n    beforeSanitizeElements: [],\n    beforeSanitizeShadowDOM: [],\n    uponSanitizeAttribute: [],\n    uponSanitizeElement: [],\n    uponSanitizeShadowNode: [],\n  };\n};\n\nfunction createDOMPurify(window: WindowLike = getGlobal()): DOMPurify {\n  const DOMPurify: DOMPurify = (root: WindowLike) => createDOMPurify(root);\n\n  DOMPurify.version = VERSION;\n\n  DOMPurify.removed = [];\n\n  if (\n    !window ||\n    !window.document ||\n    window.document.nodeType !== NODE_TYPE.document ||\n    !window.Element\n  ) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n\n    return DOMPurify;\n  }\n\n  let { document } = window;\n\n  const originalDocument = document;\n  const currentScript: HTMLScriptElement =\n    originalDocument.currentScript as HTMLScriptElement;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || (window as any).MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes,\n  } = window;\n\n  const ElementPrototype = Element.prototype;\n\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const remove = lookupGetter(ElementPrototype, 'remove');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName,\n  } = document;\n  const { importNode } = originalDocument;\n\n  let hooks = _createHooksMap();\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported =\n    typeof entries === 'function' &&\n    typeof getParentNode === 'function' &&\n    implementation &&\n    implementation.createHTMLDocument !== undefined;\n\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n    CUSTOM_ELEMENT,\n  } = EXPRESSIONS;\n\n  let { IS_ALLOWED_URI } = EXPRESSIONS;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n    ...TAGS.html,\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.mathMl,\n    ...TAGS.text,\n  ]);\n\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n    ...ATTRS.html,\n    ...ATTRS.svg,\n    ...ATTRS.mathMl,\n    ...ATTRS.xml,\n  ]);\n\n  /*\n   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(\n    create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false,\n      },\n    })\n  );\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n\n  /* Output should be safe even for XML used within HTML and alike.\n   * This means, DOMPurify removes comments when containing risky content.\n   */\n  let SAFE_FOR_XML = true;\n\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES: UseProfilesConfig | false = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, [\n    'annotation-xml',\n    'audio',\n    'colgroup',\n    'desc',\n    'foreignobject',\n    'head',\n    'iframe',\n    'math',\n    'mi',\n    'mn',\n    'mo',\n    'ms',\n    'mtext',\n    'noembed',\n    'noframes',\n    'noscript',\n    'plaintext',\n    'script',\n    'style',\n    'svg',\n    'template',\n    'thead',\n    'title',\n    'video',\n    'xmp',\n  ]);\n\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, [\n    'audio',\n    'video',\n    'img',\n    'source',\n    'image',\n    'track',\n  ]);\n\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n    'alt',\n    'class',\n    'for',\n    'id',\n    'label',\n    'name',\n    'pattern',\n    'placeholder',\n    'role',\n    'summary',\n    'title',\n    'value',\n    'style',\n    'xmlns',\n  ]);\n\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet(\n    {},\n    [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE],\n    stringToString\n  );\n\n  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n    'mi',\n    'mo',\n    'mn',\n    'ms',\n    'mtext',\n  ]);\n\n  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [\n    'title',\n    'style',\n    'font',\n    'a',\n    'script',\n  ]);\n\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE: null | DOMParserSupportedType = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc: null | Parameters<typeof addToSet>[2] = null;\n\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG: Config | null = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n\n  const isRegexOrFunction = function (\n    testValue: unknown\n  ): testValue is Function | RegExp {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n\n  /**\n   * _parseConfig\n   *\n   * @param cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function (cfg: Config = {}): void {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n\n    PARSER_MEDIA_TYPE =\n      // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1\n        ? DEFAULT_PARSER_MEDIA_TYPE\n        : cfg.PARSER_MEDIA_TYPE;\n\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc =\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml'\n        ? stringToString\n        : stringToLowerCase;\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS')\n      ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc)\n      : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR')\n      ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc)\n      : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES')\n      ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString)\n      : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR')\n      ? addToSet(\n          clone(DEFAULT_URI_SAFE_ATTRIBUTES),\n          cfg.ADD_URI_SAFE_ATTR,\n          transformCaseFunc\n        )\n      : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS')\n      ? addToSet(\n          clone(DEFAULT_DATA_URI_TAGS),\n          cfg.ADD_DATA_URI_TAGS,\n          transformCaseFunc\n        )\n      : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS')\n      ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc)\n      : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS')\n      ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc)\n      : {};\n    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR')\n      ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc)\n      : {};\n    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES')\n      ? cfg.USE_PROFILES\n      : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI = cfg.ALLOWED_URI_REGEXP || EXPRESSIONS.IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    MATHML_TEXT_INTEGRATION_POINTS =\n      cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n    HTML_INTEGRATION_POINTS =\n      cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements ===\n        'boolean'\n    ) {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements =\n        cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, TAGS.text);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, TAGS.html);\n        addToSet(ALLOWED_ATTR, ATTRS.html);\n      }\n\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svgFilters);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, TAGS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.'\n        );\n      }\n\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.'\n        );\n      }\n\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(\n          trustedTypes,\n          currentScript\n        );\n      }\n\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, [\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.svgDisallowed,\n  ]);\n  const ALL_MATHML_TAGS = addToSet({}, [\n    ...TAGS.mathMl,\n    ...TAGS.mathMlDisallowed,\n  ]);\n\n  /**\n   * @param element a DOM element whose namespace is being checked\n   * @returns Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function (element: Element): boolean {\n    let parent = getParentNode(element);\n\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template',\n      };\n    }\n\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return (\n          tagName === 'svg' &&\n          (parentTagName === 'annotation-xml' ||\n            MATHML_TEXT_INTEGRATION_POINTS[parentTagName])\n        );\n      }\n\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (\n        parent.namespaceURI === SVG_NAMESPACE &&\n        !HTML_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      if (\n        parent.namespaceURI === MATHML_NAMESPACE &&\n        !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return (\n        !ALL_MATHML_TAGS[tagName] &&\n        (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName])\n      );\n    }\n\n    // For XHTML and XML documents that support custom namespaces\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      ALLOWED_NAMESPACES[element.namespaceURI]\n    ) {\n      return true;\n    }\n\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param node a DOM node\n   */\n  const _forceRemove = function (node: Node): void {\n    arrayPush(DOMPurify.removed, { element: node });\n\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      getParentNode(node).removeChild(node);\n    } catch (_) {\n      remove(node);\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param name an Attribute name\n   * @param element a DOM node\n   */\n  const _removeAttribute = function (name: string, element: Element): void {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: element.getAttributeNode(name),\n        from: element,\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: element,\n      });\n    }\n\n    element.removeAttribute(name);\n\n    // We void attribute values for unremovable \"is\" attributes\n    if (name === 'is') {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(element);\n        } catch (_) {}\n      } else {\n        try {\n          element.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param dirty - a string of dirty markup\n   * @return a DOM, filled with the dirty markup\n   */\n  const _initDocument = function (dirty: string): Document {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      NAMESPACE === HTML_NAMESPACE\n    ) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty =\n        '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' +\n        dirty +\n        '</body></html>';\n    }\n\n    const dirtyPayload = trustedTypesPolicy\n      ? trustedTypesPolicy.createHTML(dirty)\n      : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT\n          ? emptyHTML\n          : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n\n    const body = doc.body || doc.documentElement;\n\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(\n        document.createTextNode(leadingWhitespace),\n        body.childNodes[0] || null\n      );\n    }\n\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(\n        doc,\n        WHOLE_DOCUMENT ? 'html' : 'body'\n      )[0];\n    }\n\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param root The root element or node to start traversing on.\n   * @return The created NodeIterator\n   */\n  const _createNodeIterator = function (root: Node): NodeIterator {\n    return createNodeIterator.call(\n      root.ownerDocument || root,\n      root,\n      // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT |\n        NodeFilter.SHOW_COMMENT |\n        NodeFilter.SHOW_TEXT |\n        NodeFilter.SHOW_PROCESSING_INSTRUCTION |\n        NodeFilter.SHOW_CDATA_SECTION,\n      null\n    );\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param element element to check for clobbering attacks\n   * @return true if clobbered, false if safe\n   */\n  const _isClobbered = function (element: Element): boolean {\n    return (\n      element instanceof HTMLFormElement &&\n      (typeof element.nodeName !== 'string' ||\n        typeof element.textContent !== 'string' ||\n        typeof element.removeChild !== 'function' ||\n        !(element.attributes instanceof NamedNodeMap) ||\n        typeof element.removeAttribute !== 'function' ||\n        typeof element.setAttribute !== 'function' ||\n        typeof element.namespaceURI !== 'string' ||\n        typeof element.insertBefore !== 'function' ||\n        typeof element.hasChildNodes !== 'function')\n    );\n  };\n\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param value object to check whether it's a DOM node\n   * @return true is object is a DOM node\n   */\n  const _isNode = function (value: unknown): value is Node {\n    return typeof Node === 'function' && value instanceof Node;\n  };\n\n  function _executeHooks<\n    T extends\n      | NodeHook\n      | ElementHook\n      | DocumentFragmentHook\n      | UponSanitizeElementHook\n      | UponSanitizeAttributeHook\n  >(hooks: T[], currentNode: Parameters<T>[0], data: Parameters<T>[1]): void {\n    arrayForEach(hooks, (hook) => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  }\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   * @param currentNode to check for permission to exist\n   * @return true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function (currentNode: any): boolean {\n    let content = null;\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.uponSanitizeElement, currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS,\n    });\n\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (\n      currentNode.hasChildNodes() &&\n      !_isNode(currentNode.firstElementChild) &&\n      regExpTest(/<[/\\w!]/g, currentNode.innerHTML) &&\n      regExpTest(/<[/\\w!]/g, currentNode.textContent)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any occurrence of processing instructions */\n    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any kind of possibly harmful comments */\n    if (\n      SAFE_FOR_XML &&\n      currentNode.nodeType === NODE_TYPE.comment &&\n      regExpTest(/<[/\\w]/g, currentNode.data)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n          regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)\n        ) {\n          return false;\n        }\n\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)\n        ) {\n          return false;\n        }\n      }\n\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n\n          for (let i = childCount - 1; i >= 0; --i) {\n            const childClone = cloneNode(childNodes[i], true);\n            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n          }\n        }\n      }\n\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if (\n      (tagName === 'noscript' ||\n        tagName === 'noembed' ||\n        tagName === 'noframes') &&\n      regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        content = stringReplace(content, expr, ' ');\n      });\n\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param lcTag Lowercase tag name of containing element.\n   * @param lcName Lowercase attribute name.\n   * @param value Attribute value.\n   * @return Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function (\n    lcTag: string,\n    lcName: string,\n    value: string\n  ): boolean {\n    /* Make sure attribute cannot clobber */\n    if (\n      SANITIZE_DOM &&\n      (lcName === 'id' || lcName === 'name') &&\n      (value in document || value in formElement)\n    ) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (\n      ALLOW_DATA_ATTR &&\n      !FORBID_ATTR[lcName] &&\n      regExpTest(DATA_ATTR, lcName)\n    ) {\n      // This attribute is safe\n    } else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) {\n      // This attribute is safe\n      /* Otherwise, check the name is permitted */\n    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n        // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        (_isBasicCustomElement(lcTag) &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag))) &&\n          ((CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName)) ||\n            (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)))) ||\n        // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        (lcName === 'is' &&\n          CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))))\n      ) {\n        // If user has supplied a regexp or function in CUSTOM_ELEMENT_HANDLING.tagNameCheck, we need to also allow derived custom elements using the same tagName test.\n        // Additionally, we need to allow attributes passing the CUSTOM_ELEMENT_HANDLING.attributeNameCheck user has configured, as custom elements can define these at their own discretion.\n      } else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n      // This attribute is safe\n      /* Check no script, data or unknown possibly unsafe URI\n        unless we know URI values are safe for that attribute */\n    } else if (\n      regExpTest(IS_ALLOWED_URI, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Keep image data URIs alive if src/xlink:href is allowed */\n      /* Further prevent gadget XSS for dynamically built script tags */\n    } else if (\n      (lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') &&\n      lcTag !== 'script' &&\n      stringIndexOf(value, 'data:') === 0 &&\n      DATA_URI_TAGS[lcTag]\n    ) {\n      // This attribute is safe\n      /* Allow unknown protocols: This provides support for links that\n        are handled by protocol handlers which may be unknown ahead of\n        time, e.g. fb:, spotify: */\n    } else if (\n      ALLOW_UNKNOWN_PROTOCOLS &&\n      !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Check for binary attributes */\n    } else if (value) {\n      return false;\n    } else {\n      // Binary attributes are safe at this point\n      /* Anything else, presume unsafe, do not add it back */\n    }\n\n    return true;\n  };\n\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param tagName name of the tag of the node to sanitize\n   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function (tagName: string): RegExpMatchArray {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param currentNode to sanitize\n   */\n  const _sanitizeAttributes = function (currentNode: Element): void {\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n\n    const { attributes } = currentNode;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes || _isClobbered(currentNode)) {\n      return;\n    }\n\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n      forceKeepAttr: undefined,\n    };\n    let l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const { name, namespaceURI, value: attrValue } = attr;\n      const lcName = transformCaseFunc(name);\n\n      let value = name === 'value' ? attrValue : stringTrim(attrValue);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n      value = hookEvent.attrValue;\n\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n\n      /* Work around a security issue with comments inside attributes */\n      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Handle attributes that require Trusted Types */\n      if (\n        trustedTypesPolicy &&\n        typeof trustedTypes === 'object' &&\n        typeof trustedTypes.getAttributeType === 'function'\n      ) {\n        if (namespaceURI) {\n          /* Namespaces are not yet supported, see https://bugs.chromium.org/p/chromium/issues/detail?id=1305293 */\n        } else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML': {\n              value = trustedTypesPolicy.createHTML(value);\n              break;\n            }\n\n            case 'TrustedScriptURL': {\n              value = trustedTypesPolicy.createScriptURL(value);\n              break;\n            }\n\n            default: {\n              break;\n            }\n          }\n        }\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n\n        if (_isClobbered(currentNode)) {\n          _forceRemove(currentNode);\n        } else {\n          arrayPop(DOMPurify.removed);\n        }\n      } catch (_) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function (fragment: DocumentFragment): void {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n\n    while ((shadowNode = shadowIterator.nextNode())) {\n      /* Execute a hook if present */\n      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n\n      /* Sanitize tags and elements */\n      _sanitizeElements(shadowNode);\n\n      /* Check attributes next */\n      _sanitizeAttributes(shadowNode);\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n  };\n\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty, cfg = {}) {\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if ((dirty as Node).nodeName) {\n        const tagName = transformCaseFunc((dirty as Node).nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate(\n            'root node is forbidden and cannot be sanitized in-place'\n          );\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (\n        importedNode.nodeType === NODE_TYPE.element &&\n        importedNode.nodeName === 'BODY'\n      ) {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (\n        !RETURN_DOM &&\n        !SAFE_FOR_TEMPLATES &&\n        !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1\n      ) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n          ? trustedTypesPolicy.createHTML(dirty)\n          : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while ((currentNode = nodeIterator.nextNode())) {\n      /* Sanitize tags and elements */\n      _sanitizeElements(currentNode);\n\n      /* Check attributes next */\n      _sanitizeAttributes(currentNode);\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n    }\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Serialize doctype if allowed */\n    if (\n      WHOLE_DOCUMENT &&\n      ALLOWED_TAGS['!doctype'] &&\n      body.ownerDocument &&\n      body.ownerDocument.doctype &&\n      body.ownerDocument.doctype.name &&\n      regExpTest(EXPRESSIONS.DOCTYPE_NAME, body.ownerDocument.doctype.name)\n    ) {\n      serializedHTML =\n        '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n      ? trustedTypesPolicy.createHTML(serializedHTML)\n      : serializedHTML;\n  };\n\n  DOMPurify.setConfig = function (cfg = {}) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  DOMPurify.removeHook = function (entryPoint, hookFunction) {\n    if (hookFunction !== undefined) {\n      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n\n      return index === -1\n        ? undefined\n        : arraySplice(hooks[entryPoint], index, 1)[0];\n    }\n\n    return arrayPop(hooks[entryPoint]);\n  };\n\n  DOMPurify.removeHooks = function (entryPoint) {\n    hooks[entryPoint] = [];\n  };\n\n  DOMPurify.removeAllHooks = function () {\n    hooks = _createHooksMap();\n  };\n\n  return DOMPurify;\n}\n\nexport default createDOMPurify();\n\nexport interface DOMPurify {\n  /**\n   * Creates a DOMPurify instance using the given window-like object. Defaults to `window`.\n   */\n  (root?: WindowLike): DOMPurify;\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  version: string;\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  removed: Array<RemovedElement | RemovedAttribute>;\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  isSupported: boolean;\n\n  /**\n   * Set the configuration once.\n   *\n   * @param cfg configuration object\n   */\n  setConfig(cfg?: Config): void;\n\n  /**\n   * Removes the configuration.\n   */\n  clearConfig(): void;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized TrustedHTML.\n   */\n  sanitize(\n    dirty: string | Node,\n    cfg: Config & { RETURN_TRUSTED_TYPE: true }\n  ): TrustedHTML;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty DOM node\n   * @param cfg object\n   * @returns Sanitized DOM node.\n   */\n  sanitize(dirty: Node, cfg: Config & { IN_PLACE: true }): Node;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized DOM node.\n   */\n  sanitize(dirty: string | Node, cfg: Config & { RETURN_DOM: true }): Node;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized document fragment.\n   */\n  sanitize(\n    dirty: string | Node,\n    cfg: Config & { RETURN_DOM_FRAGMENT: true }\n  ): DocumentFragment;\n\n  /**\n   * Provides core sanitation functionality.\n   *\n   * @param dirty string or DOM node\n   * @param cfg object\n   * @returns Sanitized string.\n   */\n  sanitize(dirty: string | Node, cfg?: Config): string;\n\n  /**\n   * Checks if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   *\n   * @param tag Tag name of containing element.\n   * @param attr Attribute name.\n   * @param value Attribute value.\n   * @returns Returns true if `value` is valid. Otherwise, returns false.\n   */\n  isValidAttribute(tag: string, attr: string, value: string): boolean;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(entryPoint: BasicHookName, hookFunction: NodeHook): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(entryPoint: ElementHookName, hookFunction: ElementHook): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(\n    entryPoint: DocumentFragmentHookName,\n    hookFunction: DocumentFragmentHook\n  ): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(\n    entryPoint: 'uponSanitizeElement',\n    hookFunction: UponSanitizeElementHook\n  ): void;\n\n  /**\n   * Adds a DOMPurify hook.\n   *\n   * @param entryPoint entry point for the hook to add\n   * @param hookFunction function to execute\n   */\n  addHook(\n    entryPoint: 'uponSanitizeAttribute',\n    hookFunction: UponSanitizeAttributeHook\n  ): void;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: BasicHookName,\n    hookFunction?: NodeHook\n  ): NodeHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: ElementHookName,\n    hookFunction?: ElementHook\n  ): ElementHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: DocumentFragmentHookName,\n    hookFunction?: DocumentFragmentHook\n  ): DocumentFragmentHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: 'uponSanitizeElement',\n    hookFunction?: UponSanitizeElementHook\n  ): UponSanitizeElementHook | undefined;\n\n  /**\n   * Remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if hook not specified)\n   *\n   * @param entryPoint entry point for the hook to remove\n   * @param hookFunction optional specific hook to remove\n   * @returns removed hook\n   */\n  removeHook(\n    entryPoint: 'uponSanitizeAttribute',\n    hookFunction?: UponSanitizeAttributeHook\n  ): UponSanitizeAttributeHook | undefined;\n\n  /**\n   * Removes all DOMPurify hooks at a given entryPoint\n   *\n   * @param entryPoint entry point for the hooks to remove\n   */\n  removeHooks(entryPoint: HookName): void;\n\n  /**\n   * Removes all DOMPurify hooks.\n   */\n  removeAllHooks(): void;\n}\n\n/**\n * An element removed by DOMPurify.\n */\nexport interface RemovedElement {\n  /**\n   * The element that was removed.\n   */\n  element: Node;\n}\n\n/**\n * An element removed by DOMPurify.\n */\nexport interface RemovedAttribute {\n  /**\n   * The attribute that was removed.\n   */\n  attribute: Attr | null;\n\n  /**\n   * The element that the attribute was removed.\n   */\n  from: Node;\n}\n\ntype BasicHookName =\n  | 'beforeSanitizeElements'\n  | 'afterSanitizeElements'\n  | 'uponSanitizeShadowNode';\ntype ElementHookName = 'beforeSanitizeAttributes' | 'afterSanitizeAttributes';\ntype DocumentFragmentHookName =\n  | 'beforeSanitizeShadowDOM'\n  | 'afterSanitizeShadowDOM';\ntype UponSanitizeElementHookName = 'uponSanitizeElement';\ntype UponSanitizeAttributeHookName = 'uponSanitizeAttribute';\n\ninterface HooksMap {\n  beforeSanitizeElements: NodeHook[];\n  afterSanitizeElements: NodeHook[];\n  beforeSanitizeShadowDOM: DocumentFragmentHook[];\n  uponSanitizeShadowNode: NodeHook[];\n  afterSanitizeShadowDOM: DocumentFragmentHook[];\n  beforeSanitizeAttributes: ElementHook[];\n  afterSanitizeAttributes: ElementHook[];\n  uponSanitizeElement: UponSanitizeElementHook[];\n  uponSanitizeAttribute: UponSanitizeAttributeHook[];\n}\n\nexport type HookName =\n  | BasicHookName\n  | ElementHookName\n  | DocumentFragmentHookName\n  | UponSanitizeElementHookName\n  | UponSanitizeAttributeHookName;\n\nexport type NodeHook = (\n  this: DOMPurify,\n  currentNode: Node,\n  hookEvent: null,\n  config: Config\n) => void;\n\nexport type ElementHook = (\n  this: DOMPurify,\n  currentNode: Element,\n  hookEvent: null,\n  config: Config\n) => void;\n\nexport type DocumentFragmentHook = (\n  this: DOMPurify,\n  currentNode: DocumentFragment,\n  hookEvent: null,\n  config: Config\n) => void;\n\nexport type UponSanitizeElementHook = (\n  this: DOMPurify,\n  currentNode: Node,\n  hookEvent: UponSanitizeElementHookEvent,\n  config: Config\n) => void;\n\nexport type UponSanitizeAttributeHook = (\n  this: DOMPurify,\n  currentNode: Element,\n  hookEvent: UponSanitizeAttributeHookEvent,\n  config: Config\n) => void;\n\nexport interface UponSanitizeElementHookEvent {\n  tagName: string;\n  allowedTags: Record<string, boolean>;\n}\n\nexport interface UponSanitizeAttributeHookEvent {\n  attrName: string;\n  attrValue: string;\n  keepAttr: boolean;\n  allowedAttributes: Record<string, boolean>;\n  forceKeepAttr: boolean | undefined;\n}\n\n/**\n * A `Window`-like object containing the properties and types that DOMPurify requires.\n */\nexport type WindowLike = Pick<\n  typeof globalThis,\n  | 'DocumentFragment'\n  | 'HTMLTemplateElement'\n  | 'Node'\n  | 'Element'\n  | 'NodeFilter'\n  | 'NamedNodeMap'\n  | 'HTMLFormElement'\n  | 'DOMParser'\n> & {\n  document?: Document;\n  MozNamedAttrMap?: typeof window.NamedNodeMap;\n} & Pick<TrustedTypesWindow, 'trustedTypes'>;\n","/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nexport const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n","import { other } from './rules.ts';\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(other.unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, findClosingBracket, } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape, } from './helpers.ts';\nimport { other } from './rules.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nexport class _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults, } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n"],"names":["entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","Object","freeze","seal","create","apply","construct","Reflect","x","fun","thisValue","args","Func","arrayForEach","unapply","Array","prototype","forEach","arrayLastIndexOf","lastIndexOf","arrayPop","pop","arrayPush","push","arraySplice","splice","stringToLowerCase","String","toLowerCase","stringToString","toString","stringMatch","match","stringReplace","replace","stringIndexOf","indexOf","stringTrim","trim","objectHasOwnProperty","hasOwnProperty","regExpTest","RegExp","test","typeErrorCreate","func","TypeError","_len2","arguments","length","_key2","thisArg","lastIndex","_len","_key","addToSet","set","array","transformCaseFunc","undefined","l","element","lcElement","cleanArray","index","clone","object","newObject","property","value","isArray","constructor","lookupGetter","prop","desc","get","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","text","html","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","CUSTOM_ELEMENT","NODE_TYPE","getGlobal","window","purify","createDOMPurify","DOMPurify","root","version","removed","document","nodeType","Element","isSupported","originalDocument","currentScript","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","NamedNodeMap","MozNamedAttrMap","HTMLFormElement","DOMParser","trustedTypes","ElementPrototype","cloneNode","remove","getNextSibling","getChildNodes","getParentNode","template","createElement","content","ownerDocument","trustedTypesPolicy","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","hooks","afterSanitizeAttributes","afterSanitizeElements","afterSanitizeShadowDOM","beforeSanitizeAttributes","beforeSanitizeElements","beforeSanitizeShadowDOM","uponSanitizeAttribute","uponSanitizeElement","uponSanitizeShadowNode","createHTMLDocument","EXPRESSIONS","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","tagNameCheck","writable","configurable","enumerable","attributeNameCheck","allowCustomizedBuiltInElements","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","SAFE_FOR_XML","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","CONFIG","formElement","isRegexOrFunction","testValue","Function","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ADD_DATA_URI_TAGS","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","table","tbody","TRUSTED_TYPES_POLICY","createHTML","createScriptURL","purifyHostElement","createPolicy","suffix","ATTR_NAME","hasAttribute","getAttribute","policyName","scriptUrl","_","console","warn","_createTrustedTypesPolicy","ALL_SVG_TAGS","ALL_MATHML_TAGS","_forceRemove","node","removeChild","_removeAttribute","name","attribute","getAttributeNode","from","removeAttribute","setAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","parseFromString","documentElement","createDocument","innerHTML","body","insertBefore","createTextNode","childNodes","call","_createNodeIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","SHOW_PROCESSING_INSTRUCTION","SHOW_CDATA_SECTION","_isClobbered","nodeName","textContent","attributes","namespaceURI","hasChildNodes","_isNode","_executeHooks","currentNode","data","hook","_sanitizeElements","tagName","allowedTags","firstElementChild","_isBasicCustomElement","parentNode","i","childClone","__removalCount","parent","parentTagName","Boolean","_checkValidNamespace","expr","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","forceKeepAttr","attr","getAttributeType","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","sanitize","importedNode","returnNode","appendChild","firstChild","nodeIterator","shadowroot","shadowrootmode","serializedHTML","outerHTML","doctype","setConfig","clearConfig","isValidAttribute","tag","addHook","entryPoint","hookFunction","removeHook","removeHooks","removeAllHooks","_getDefaults","async","breaks","extensions","gfm","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","source","obj","val","valSource","other","caret","getRegex","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","hr","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","_blockLabel","def","list","_tag","_comment","paragraph","blockNormal","blockquote","code","fences","heading","newline","gfmTable","blockGfm","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","_inlineLabel","link","reflink","nolink","inlineNormal","_backpedal","blockSkip","del","escape","reflinkSearch","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","cleanUrl","href","encodeURI","splitCells","tableRow","count","cells","offset","str","escaped","curr","split","shift","at","rtrim","c","invert","suffLen","charAt","slice","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","this","space","src","codeBlockStyle","matchIndentToCode","indentToCode","map","matchIndentInNode","indentInNode","join","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","headers","aligns","rows","item","header","align","row","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","level","findClosingBracket","linkLen","links","emStrong","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastCharLength","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","inlineText","_Lexer","inlineQueue","lex","lexInline","next","lastParagraphClipped","extTokenizer","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","getStartIndex","errMsg","charCodeAt","error","Error","keys","includes","keepPrevChar","startInline","_Renderer","parser","_ref","langString","_ref2","parse","_ref3","_ref4","parseInline","j","listitem","itemBody","checkbox","unshift","_ref5","_ref6","tablecell","tablerow","k","_ref7","strong","_ref8","em","_ref9","_ref10","_ref11","_ref12","cleanHref","out","image","_ref13","_TextRenderer","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","markedInstance","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","extLevel","rendererProp","rendererFunc","_len3","_key3","tokenizerProp","tokenizerFunc","prevTokenizer","_len4","_key4","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","_len5","_key5","packWalktokens","blockType","origOpt","throwError","onError","all","catch","e","message","msg","reject","marked","getDefaults"],"sourceRoot":""}