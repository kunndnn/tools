{"version":3,"file":"static/js/296.9b2ef408.chunk.js","mappings":"kJAgIA,QA7HA,WACE,MAAOA,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,OAClCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,OAC9CG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,SAC9CK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,MA2DrD,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,QAAOC,SAAC,qBAEtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,OAAO,UACPC,SA/CmBC,IACzB,MAAMC,EAAOD,EAAME,OAAOC,MAAM,GAChC,IAAKF,IAASA,EAAKJ,KAAKO,WAAW,UAKjC,OAJAC,MAAM,qCACNpB,EAAY,MACZG,EAAkB,WAClBI,EAAkB,MAIpB,MAAMc,EAASL,EAAKJ,KAAKU,MAAM,KAAK,GAC9BC,EAAS,IAAIC,WACnBD,EAAOE,OAAUC,IACf1B,EAAY0B,EAAET,OAAOU,QACrBxB,EAAkBkB,GAClBd,EAAkB,KAAK,EAEzBgB,EAAOK,cAAcZ,EAAK,EA+BpBa,GAAG,cACHpB,UAAU,gBAEZE,EAAAA,EAAAA,KAAA,SAAOmB,QAAQ,cAAcrB,UAAU,mBAAkBC,SAAC,iBAGzDX,IACCY,EAAAA,EAAAA,KAAA,OAAKoB,IAAKhC,EAAUiC,IAAI,WAAWvB,UAAU,qBAIhDV,IACCS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,UACEsB,MAAO7B,EACPU,SAAWY,GAAMrB,EAAkBqB,EAAET,OAAOgB,OAC5CxB,UAAU,gBAAeC,SAlFV,CACvB,OACA,MACA,MACA,OACA,MACA,OACA,MACA,MACA,OACA,OACA,OACA,MACA,MACA,MACA,OAsEWwB,QAAQb,GAAWA,IAAWnB,IAC9BiC,KAAKd,IACJV,EAAAA,EAAAA,KAAA,UAAqBsB,MAAOZ,EAAOX,SAChCW,EAAOe,eADGf,QAKnBV,EAAAA,EAAAA,KAAA,UAAQ0B,QAtDKC,KACnB,IAAKvC,IAAaG,IAAmBE,EAAgB,OAErD,MAAMmC,EAASC,SAASC,cAAc,UAChCC,EAAM,IAAIC,MAEhBD,EAAIjB,OAAS,KACXc,EAAOK,MAAQF,EAAIE,MACnBL,EAAOM,OAASH,EAAIG,OACRN,EAAOO,WAAW,MAC1BC,UAAUL,EAAK,EAAG,GAEtB,MAAMM,EAAWT,EAAOU,UAAU,SAAS7C,KAC3CG,EAAkByC,EAAS,EAG7BN,EAAIX,IAAMhC,CAAQ,EAsCmBU,UAAU,iBAAgBC,SAAC,eAM7DJ,IACCE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJC,EAAAA,EAAAA,KAAA,OACEoB,IAAKzB,EACL0B,IAAK,gBAAgB5B,IACrBK,UAAU,qBAEZD,EAAAA,EAAAA,MAAA,KACE0C,KAAM5C,EACN6C,SAAU,mBAAmB/C,IAC7BK,UAAU,kBAAiBC,SAAA,CAC5B,gBACeN,UAM1B,C","sources":["Components/ImageConverter.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../Styles/ImageConverter.css\"; // import external CSS\r\n\r\nfunction ImageConverter() {\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n  const [uploadedFormat, setUploadedFormat] = useState(null);\r\n  const [selectedFormat, setSelectedFormat] = useState(\"jpeg\");\r\n  const [convertedImage, setConvertedImage] = useState(null);\r\n\r\n  const supportedFormats = [\r\n    \"jpeg\", // JPEG format\r\n    \"png\", // PNG format\r\n    \"gif\", // GIF format\r\n    \"webp\", // WebP format\r\n    \"bmp\", // BMP format\r\n    \"tiff\", // TIFF format\r\n    \"ico\", // ICO format\r\n    \"svg\", // SVG format\r\n    \"heif\", // HEIF format\r\n    \"heic\", // HEIC format\r\n    \"apng\", // APNG format\r\n    \"raw\", // RAW format (varies by camera)\r\n    \"jp2\", // JPEG 2000 format\r\n    \"tga\", // TGA format\r\n    \"xbm\", // XBM format\r\n  ];\r\n\r\n  const handleImageUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file || !file.type.startsWith(\"image/\")) {\r\n      alert(\"Please upload a valid image file!\");\r\n      setImageSrc(null);\r\n      setUploadedFormat(null);\r\n      setConvertedImage(null);\r\n      return;\r\n    }\r\n\r\n    const format = file.type.split(\"/\")[1];\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      setImageSrc(e.target.result);\r\n      setUploadedFormat(format);\r\n      setConvertedImage(null);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const convertImage = () => {\r\n    if (!imageSrc || !uploadedFormat || !selectedFormat) return;\r\n\r\n    const canvas = document.createElement(\"canvas\");\r\n    const img = new Image();\r\n\r\n    img.onload = () => {\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n\r\n      const newImage = canvas.toDataURL(`image/${selectedFormat}`);\r\n      setConvertedImage(newImage);\r\n    };\r\n\r\n    img.src = imageSrc;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"title\">Image Converter</h2>\r\n\r\n      <div className=\"upload-section\">\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={handleImageUpload}\r\n          id=\"file-upload\"\r\n          className=\"file-input\"\r\n        />\r\n        <label htmlFor=\"file-upload\" className=\"file-input-label\">\r\n          Choose Image\r\n        </label>\r\n        {imageSrc && (\r\n          <img src={imageSrc} alt=\"Uploaded\" className=\"image-preview\" />\r\n        )}\r\n      </div>\r\n\r\n      {imageSrc && (\r\n        <div className=\"convert-section\">\r\n          <select\r\n            value={selectedFormat}\r\n            onChange={(e) => setSelectedFormat(e.target.value)}\r\n            className=\"format-select\"\r\n          >\r\n            {supportedFormats\r\n              .filter((format) => format !== uploadedFormat)\r\n              .map((format) => (\r\n                <option key={format} value={format}>\r\n                  {format.toUpperCase()}\r\n                </option>\r\n              ))}\r\n          </select>\r\n          <button onClick={convertImage} className=\"convert-button\">\r\n            Convert\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {convertedImage && (\r\n        <div className=\"download-section\">\r\n          <h3>Converted Image:</h3>\r\n          <img\r\n            src={convertedImage}\r\n            alt={`Converted to ${selectedFormat}`}\r\n            className=\"converted-image\"\r\n          />\r\n          <a\r\n            href={convertedImage}\r\n            download={`converted-image.${selectedFormat}`}\r\n            className=\"download-button\"\r\n          >\r\n            Download as .{selectedFormat}\r\n          </a>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageConverter;\r\n"],"names":["imageSrc","setImageSrc","useState","uploadedFormat","setUploadedFormat","selectedFormat","setSelectedFormat","convertedImage","setConvertedImage","_jsxs","className","children","_jsx","type","accept","onChange","event","file","target","files","startsWith","alert","format","split","reader","FileReader","onload","e","result","readAsDataURL","id","htmlFor","src","alt","value","filter","map","toUpperCase","onClick","convertImage","canvas","document","createElement","img","Image","width","height","getContext","drawImage","newImage","toDataURL","href","download"],"sourceRoot":""}