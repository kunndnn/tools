{"version":3,"file":"static/js/971.965e6884.chunk.js","mappings":"sKAKA,MAiGA,EAjGqBA,KACnB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,KAC9BG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAS,KAC7C,QAAEK,GAAYC,EAAAA,IAEpBC,EAAAA,EAAAA,YAAU,KACR,GAAI,oBAAqBC,OAAQ,CAC/B,MAAMC,EAAYD,OAAOE,gBAEnBC,EAAiBA,KACrB,MAAMC,EAAkBH,EAAUI,YAClCX,EAAUU,EAAgB,EAS5B,OANAD,IAEAF,EAAUK,gBAAkB,KAC1BH,GAAgB,EAGX,KACLF,EAAUK,gBAAkB,IAAI,CAEpC,CACER,EAAAA,GAAMS,MAAM,iDAAkD,CAC5DC,MAAO,QAEX,GACC,IAyBH,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACxBE,EAAAA,EAAAA,KAAA,YACED,UAAU,WACVE,MAAOxB,EACPyB,SAAWC,GAAMzB,EAAcyB,EAAEC,OAAOH,OACxCI,YAAY,qBACZC,KAAK,IACLC,KAAK,QAEPP,EAAAA,EAAAA,KAAA,UACED,UAAU,SACVE,MAAOnB,EACPoB,SAlBmBM,IACzBzB,EAAiByB,EAAMJ,OAAOH,MAAM,EAiBFH,SAE3BlB,EAAO6B,KAAKC,IACXd,EAAAA,EAAAA,MAAA,UAAyBK,MAAO,GAAGS,EAAMC,SAASD,EAAME,QAAQd,SAAA,CAC7DY,EAAMC,KAAK,KAAGD,EAAME,KAAK,MADfF,EAAMC,WAKvBX,EAAAA,EAAAA,KAAA,UAAQD,UAAU,SAASc,QA7CbC,KAElB,GADA9B,IACI,oBAAqBG,OAAQ,CAC/B,MAAMC,EAAYD,OAAOE,gBACnB0B,EAAY,IAAIC,yBAAyBvC,GAGzCwC,EAAmBrC,EAAOsC,MAC7BR,GAAUA,EAAMC,KAAO,KAAOD,EAAME,KAAO,MAAQ9B,IAElDmC,IACFF,EAAUL,MAAQO,GAGpB7B,EAAU+B,MAAMJ,GAChB9B,EAAAA,GAAMmC,QAAQ,qCAAkB,CAAEzB,MAAO,QAC3C,GA6BoDG,SAAC,cAInDE,EAAAA,EAAAA,KAACqB,EAAAA,GAAc,CACbC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,EACZnC,MAAM,QACNoC,WAAYC,EAAAA,OAEb,C","sources":["Components/TextToSpeech.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../Styles/TextToSpeech.css\"; // Importing the external CSS file\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst TextToSpeech = () => {\r\n  const [textToRead, setTextToRead] = useState(\"\");\r\n  const [voices, setVoices] = useState([]);\r\n  const [selectedVoice, setSelectedVoice] = useState(\"\");\r\n  const { dismiss } = toast;\r\n\r\n  useEffect(() => {\r\n    if (\"speechSynthesis\" in window) {\r\n      const synthesis = window.speechSynthesis;\r\n\r\n      const populateVoices = () => {\r\n        const availableVoices = synthesis.getVoices();\r\n        setVoices(availableVoices);\r\n      };\r\n\r\n      populateVoices(); // Populate voices when the component mounts\r\n\r\n      synthesis.onvoiceschanged = () => {\r\n        populateVoices(); // Update voices if they change\r\n      };\r\n\r\n      return () => {\r\n        synthesis.onvoiceschanged = null; // Clean up\r\n      };\r\n    } else {\r\n      toast.error(\"Your browser does not support speech synthesis\", {\r\n        theme: \"dark\",\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const handleSpeak = () => {\r\n    dismiss(); // Dismiss any existing toast notifications\r\n    if (\"speechSynthesis\" in window) {\r\n      const synthesis = window.speechSynthesis;\r\n      const utterance = new SpeechSynthesisUtterance(textToRead);\r\n\r\n      // Find the selected voice and set it to the utterance\r\n      const selectedVoiceObj = voices.find(\r\n        (voice) => voice.name + \" (\" + voice.lang + \")\" === selectedVoice\r\n      );\r\n      if (selectedVoiceObj) {\r\n        utterance.voice = selectedVoiceObj;\r\n      }\r\n\r\n      synthesis.speak(utterance);\r\n      toast.success(\"Listen ðŸ‘‚ðŸ”Š!!!\", { theme: \"dark\" });\r\n    }\r\n  };\r\n\r\n  const handleVoiceChange = (event) => {\r\n    setSelectedVoice(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <textarea\r\n          className=\"textarea\"\r\n          value={textToRead}\r\n          onChange={(e) => setTextToRead(e.target.value)}\r\n          placeholder=\"Enter text here...\"\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n        />\r\n        <select\r\n          className=\"select\"\r\n          value={selectedVoice}\r\n          onChange={handleVoiceChange}\r\n        >\r\n          {voices.map((voice) => (\r\n            <option key={voice.name} value={`${voice.name} (${voice.lang})`}>\r\n              {voice.name} ({voice.lang})\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button className=\"button\" onClick={handleSpeak}>\r\n          Speak\r\n        </button>\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"light\"\r\n        transition={Zoom}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextToSpeech;\r\n"],"names":["TextToSpeech","textToRead","setTextToRead","useState","voices","setVoices","selectedVoice","setSelectedVoice","dismiss","toast","useEffect","window","synthesis","speechSynthesis","populateVoices","availableVoices","getVoices","onvoiceschanged","error","theme","_jsxs","_Fragment","children","className","_jsx","value","onChange","e","target","placeholder","rows","cols","event","map","voice","name","lang","onClick","handleSpeak","utterance","SpeechSynthesisUtterance","selectedVoiceObj","find","speak","success","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Zoom"],"sourceRoot":""}