/*! For license information please see 403.b47dd726.chunk.js.LICENSE.txt */
(self.webpackChunktools=self.webpackChunktools||[]).push([[403],{7353:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(S){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function s(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=s;var r={},a={};function i(e,t){var n,s,i;return t?(i=0<=(e>>>=0)&&e<256)&&(s=a[e])?s:(n=l(e,(0|e)<0?-1:0,!0),i&&(a[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(s=r[e])?s:(n=l(e,e<0?-1:0,!1),i&&(r[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=p)return k}else{if(e<=-f)return I;if(e+1>=f)return v}return e<0?o(-e,t).neg():l(e%d|0,e/d|0,t)}function l(e,t,s){return new n(e,t,s)}n.fromInt=i,n.fromNumber=o,n.fromBits=l;var u=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"===typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return c(e.substring(1),t,n).neg();for(var r=o(u(n,8)),a=g,i=0;i<e.length;i+=8){var l=Math.min(8,e.length-i),h=parseInt(e.substring(i,i+l),n);if(l<8){var d=o(u(n,l));a=a.mul(d).add(o(h))}else a=(a=a.mul(r)).add(o(h))}return a.unsigned=t,a}function h(e,t){return"number"===typeof e?o(e,t):"string"===typeof e?c(e,t):l(e.low,e.high,"boolean"===typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var d=4294967296,p=d*d,f=p/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var w=i(-1);n.NEG_ONE=w;var v=l(-1,2147483647,!1);n.MAX_VALUE=v;var k=l(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var I=l(0,-2147483648,!1);n.MIN_VALUE=I;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=o(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=o(u(e,6),this.unsigned),a=this,i="";;){var l=a.div(r),c=(a.sub(l.mul(r)).toInt()>>>0).toString(e);if((a=l).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1===(1&this.low)},N.isEven=function(){return 0===(1&this.low)},N.equals=function(e){return s(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!==1||e.high>>>31!==1)&&(this.high===e.high&&this.low===e.low)},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(s(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},N.neg=N.negate,N.add=function(e){s(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,i=e.high>>>16,o=65535&e.high,u=e.low>>>16,c=0,d=0,p=0,f=0;return p+=(f+=a+(65535&e.low))>>>16,d+=(p+=r+u)>>>16,c+=(d+=n+o)>>>16,c+=t+i,l((p&=65535)<<16|(f&=65535),(c&=65535)<<16|(d&=65535),this.unsigned)},N.subtract=function(e){return s(e)||(e=h(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return g;if(s(e)||(e=h(e)),t)return l(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,a=this.low>>>16,i=65535&this.low,u=e.high>>>16,c=65535&e.high,d=e.low>>>16,p=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*p)>>>16,y+=(b+=a*p)>>>16,b&=65535,y+=(b+=i*d)>>>16,f+=(y+=r*p)>>>16,y&=65535,f+=(y+=a*d)>>>16,y&=65535,f+=(y+=i*c)>>>16,f+=n*p+r*d+a*c+i*u,l((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(s(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,r,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?l((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;a=y}else{if(this.eq(I))return e.eq(b)||e.eq(w)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:w:(r=this.sub(e.mul(n)),a=n.add(r.div(e)));if(e.eq(I))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(r=this;r.gte(e);){n=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:u(2,i-48),d=o(n),p=d.mul(e);p.isNegative()||p.gt(r);)p=(d=o(n-=c,this.unsigned)).mul(e);d.isZero()&&(d=b),a=a.add(d),r=r.sub(p)}return a},N.div=N.divide,N.modulo=function(e){return s(e)||(e=h(e)),t?l((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return l(~this.low,~this.high,this.unsigned)},N.and=function(e){return s(e)||(e=h(e)),l(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return s(e)||(e=h(e)),l(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return s(e)||(e=h(e)),l(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return s(e)&&(e=e.toInt()),0===(e&=63)?this:e<32?l(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):l(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return s(e)&&(e=e.toInt()),0===(e&=63)?this:e<32?l(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):l(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(s(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?l(this.low>>>e|t<<32-e,t>>>e,this.unsigned):l(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,s){return s?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},4334:(e,t,n)=>{var s=n(7359),r=n(7066),a=n(9016),i=n(9538),o=n(6288),l=n(5262),u=n(2430);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},7359:function(e,t,n){var s;!function(e,r){function a(e){var t=this,n=function(){var e=4022871197,t=function(t){t=String(t);for(var n=0;n<t.length;n++){var s=.02519603282416938*(e+=t.charCodeAt(n));s-=e=s>>>0,e=(s*=e)>>>0,e+=4294967296*(s-=e)}return 2.3283064365386963e-10*(e>>>0)};return t}();t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=n(" "),t.s1=n(" "),t.s2=n(" "),t.s0-=n(e),t.s0<0&&(t.s0+=1),t.s1-=n(e),t.s1<0&&(t.s1+=1),t.s2-=n(e),t.s2<0&&(t.s2+=1),n=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function o(e,t){var n=new a(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.alea=o}(0,e=n.nmd(e),n.amdD)},5262:function(e,t,n){var s;!function(e,r){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function o(e,t){var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.tychei=o}(0,e=n.nmd(e),n.amdD)},7066:function(e,t,n){var s;!function(e,r){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function o(e,t){var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xor128=o}(0,e=n.nmd(e),n.amdD)},6288:function(e,t,n){var s;!function(e,r){function a(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function o(e,t){null==e&&(e=+new Date);var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xor4096=o}(0,e=n.nmd(e),n.amdD)},9538:function(e,t,n){var s;!function(e,r){function a(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function o(e,t){null==e&&(e=+new Date);var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xorshift7=o}(0,e=n.nmd(e),n.amdD)},9016:function(e,t,n){var s;!function(e,r){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function o(e,t){var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xorwow=o}(0,e=n.nmd(e),n.amdD)},2430:function(e,t,n){var s;!function(r,a,i){var o,l=256,u=i.pow(l,6),c=i.pow(2,52),h=2*c,d=l-1;function p(e,t,n){var s=[],d=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(l):(e=new Uint8Array(l),(r.crypto||r.msCrypto).getRandomValues(e)),b(e)}catch(s){var t=r.navigator,n=t&&t.plugins;return[+new Date,r,n,r.screen,b(a)]}}():e,3),s),p=new f(s),x=function(){for(var e=p.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=p.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|p.g(4)},x.quick=function(){return p.g(4)/4294967296},x.double=x,y(b(p.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,p),e.state=function(){return m(p,{})}),n?(i.random=e,t):e})(x,d,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=d&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=d&r+1],n=n*l+i[d&(i[r]=i[a=d&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(g(e[n],t-1))}catch(a){}return s.length?s:"string"==r?e:e+"\0"}function y(e,t){for(var n,s=e+"",r=0;r<s.length;)t[d&r]=d&(n^=19*t[d&r])+s.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(i.random(),a),e.exports){e.exports=p;try{o=n(1234)}catch(x){}}else void 0===(s=function(){return p}.call(t,n,t,e))||(e.exports=s)}("undefined"!==typeof self?self:this,[],Math)},8403:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>Rj});var s={};n.r(s),n.d(s,{arraysEqual:()=>ge,arraysEqualWithNull:()=>me,assert:()=>ce,assertNonNegativeIntegerDimensions:()=>je,assertNonNull:()=>de,assertShapesMatch:()=>he,bytesFromStringArray:()=>Fe,bytesPerElement:()=>Re,checkConversionForErrors:()=>$e,clamp:()=>re,computeStrides:()=>Pe,convertBackendValuesAndArrayBuffer:()=>Ve,createScalarValue:()=>Jr,createShuffledIndices:()=>we,decodeString:()=>na,distSquared:()=>ue,encodeString:()=>ta,fetch:()=>ea,fingerPrint64:()=>Yr,flatten:()=>ra,getArrayFromDType:()=>Ce,getTypedArrayFromDType:()=>Te,hasEncodingLoss:()=>Ae,hexToLong:()=>Pr,indexToLoc:()=>Ke,inferDtype:()=>Me,inferFromImplicitShape:()=>Ie,isBoolean:()=>_e,isFunction:()=>Le,isInt:()=>ye,isNumber:()=>Oe,isPromise:()=>Xe,isScalarShape:()=>fe,isString:()=>De,isTypedArray:()=>sa,isValidDtype:()=>Ee,locToIndex:()=>qe,makeOnesTypedArray:()=>Ue,makeZerosNestedTypedArray:()=>He,makeZerosTypedArray:()=>Ge,nearestDivisor:()=>ze,nearestLargerEven:()=>ae,now:()=>Qr,parseAxisParam:()=>Ne,randUniform:()=>le,repeatedTry:()=>ke,rightPad:()=>ve,shuffle:()=>ne,shuffleCombo:()=>se,sizeFromShape:()=>pe,sizeToSquarishShape:()=>xe,squeezeShape:()=>Se,sum:()=>oe,swap:()=>ie,tanh:()=>be,toNestedArray:()=>We,toTypedArray:()=>Zr});var r={};n.r(r),n.d(r,{assertTypesMatch:()=>_a,getTensorsInContainer:()=>Ma,isTensorInList:()=>Oa,makeTypesMatch:()=>Da});var a={};n.r(a),n.d(a,{isBrowser:()=>qa,isMobile:()=>ja,mockIsMobile:()=>Ha});var i={};n.r(i),n.d(i,{Serializable:()=>Zo,SerializationMap:()=>Qo,getRegisteredName:()=>tl,registerClass:()=>el});var o={};n.r(o),n.d(o,{assertAndGetBroadcastShape:()=>dl,getBroadcastDims:()=>cl,getReductionAxes:()=>hl});var l={};n.r(l),n.d(l,{CompositeArrayBuffer:()=>ii,browserFiles:()=>kl,browserHTTPRequest:()=>Rl,concatenateArrayBuffers:()=>Pi,copyModel:()=>So,decodeWeights:()=>Ai,decodeWeightsStream:()=>Oi,encodeWeights:()=>Ei,fromMemory:()=>Ol,fromMemorySync:()=>Ml,getLoadHandlers:()=>Yi,getModelArtifactsForJSON:()=>Ui,getModelArtifactsForJSONSync:()=>Vi,getModelArtifactsInfoForJSON:()=>Gi,getSaveHandlers:()=>Xi,getWeightSpecs:()=>Hi,http:()=>Al,isHTTPScheme:()=>$l,listModels:()=>Io,loadWeights:()=>Sl,moveModel:()=>To,registerLoadRouter:()=>Ki,registerSaveRouter:()=>qi,removeModel:()=>No,weightsLoaderFactory:()=>Tl,withSaveHandler:()=>Ll,withSaveHandlerSync:()=>zl});var u={};n.r(u),n.d(u,{confusionMatrix:()=>Hl});var c={};n.r(c),n.d(c,{draw:()=>eu,fromPixels:()=>tu,fromPixelsAsync:()=>Jl,toPixels:()=>Ql});var h={};n.r(h),n.d(h,{prepareAndValidate:()=>nu});var d={};n.r(d),n.d(d,{calculateShapes:()=>au,validateInput:()=>ru,validateUpdateShape:()=>su});var p={};n.r(p),n.d(p,{assertParamsValid:()=>lu,computeFlatOffset:()=>vu,computeOutShape:()=>cu,getNormalizedAxes:()=>fu,isSliceContinous:()=>wu,maskToAxes:()=>uu,parseSliceParams:()=>ku,sliceInfo:()=>Iu,startForAxis:()=>bu,startIndicesWithElidedDims:()=>mu,stopForAxis:()=>xu,stopIndicesWithElidedDims:()=>gu,stridesForAxis:()=>yu,stridesWithElidedDims:()=>hu});var f={};n.r(f),n.d(f,{TEST_EPSILON_FLOAT16:()=>Tu,createVideoElement:()=>Lu,encodeStrings:()=>Mu,expectArrayBuffersEqual:()=>Ou,expectArraysClose:()=>Cu,expectArraysEqual:()=>Ru,expectNumbersClose:()=>Fu,expectPromiseToFail:()=>Au,expectValuesInRange:()=>_u,play:()=>zu,testEpsilon:()=>$u});var m={};n.r(m),n.d(m,{conv2d:()=>Up,depthwiseConv2d:()=>jp,matMul:()=>qp});var g={};n.r(g),n.d(g,{collectGatherOpShapeInfo:()=>rg,computeOutShape:()=>sg,segOpComputeOptimalWindowSize:()=>ng});var y={};n.r(y),n.d(y,{ERF_A1:()=>wm,ERF_A2:()=>vm,ERF_A3:()=>km,ERF_A4:()=>Im,ERF_A5:()=>Nm,ERF_P:()=>xm,PARALLELIZE_THRESHOLD:()=>um,RowPartitionType:()=>rm,SELU_SCALE:()=>bm,SELU_SCALEALPHA:()=>ym,applyActivation:()=>Wp,assertAndGetBroadcastShape:()=>dl,assertAxesAreInnerMostDims:()=>hh,assertParamsConsistent:()=>nm,assignToTypedArray:()=>Am,axesAreInnerMostDims:()=>oh,calculateShapes:()=>au,checkEinsumDimSizes:()=>Pm,checkPadOnDimRoundingMode:()=>pc,combineLocations:()=>lh,combineRaggedTensorToTensorShapes:()=>am,complexWithEvenIndex:()=>Cm,complexWithOddIndex:()=>$m,computeConv2DInfo:()=>nc,computeConv3DInfo:()=>sc,computeDefaultPad:()=>rc,computeDilation2DInfo:()=>Qu,computeOptimalWindowSize:()=>cm,computeOutAndReduceShapes:()=>uh,computeOutShape:()=>sm,computePool2DInfo:()=>ec,computePool3DInfo:()=>tc,convertConv2DDataFormat:()=>dc,decodeEinsumEquation:()=>Lm,eitherStridesOrDilationsAreOne:()=>cc,expandShapeToKeepDim:()=>ch,exponent:()=>Fm,exponents:()=>Rm,fromStringArrayToUint8:()=>ig,fromUint8ToStringArray:()=>ag,getAxesPermutation:()=>dh,getBroadcastDims:()=>cl,getComplexWithIndex:()=>Em,getEinsumComputePath:()=>Bm,getEinsumPermutation:()=>zm,getFusedBiasGradient:()=>Bp,getFusedDyActivation:()=>Pp,getImageCenter:()=>hm,getInnerMostAxes:()=>fh,getPermuted:()=>pm,getRaggedRank:()=>om,getReductionAxes:()=>hl,getReshaped:()=>dm,getReshapedPermuted:()=>fm,getRowPartitionTypesHelper:()=>im,getSliceBeginCoords:()=>mm,getSliceSize:()=>gm,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Gm,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Hm,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>jm,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Xm,getSparseReshapeInputOutputMismatchErrorMessage:()=>Jm,getSparseReshapeInputOutputMultipleErrorMessage:()=>Ym,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>qm,getSparseReshapeNegativeOutputDimErrorMessage:()=>Km,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>tg,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Zm,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>Qm,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>eg,getUndoAxesPermutation:()=>ph,isIdentityPermutation:()=>Wm,log:()=>Nr,mergeRealAndImagArrays:()=>Sm,prepareAndValidate:()=>nu,prepareSplitSize:()=>Um,segment_util:()=>g,shouldFuse:()=>Vp,slice_util:()=>p,splitRealAndImagArrays:()=>Tm,stridesOrDilationsArePositive:()=>hc,tupleValuesAreOne:()=>uc,upcastType:()=>Ea,validateDefaultValueShape:()=>lm,validateInput:()=>ru,validateUpdateShape:()=>su,warn:()=>Ir});var b={};n.r(b),n.d(b,{nonMaxSuppressionV3Impl:()=>lf,nonMaxSuppressionV4Impl:()=>uf,nonMaxSuppressionV5Impl:()=>cf,whereImpl:()=>Cp});var x={};n.r(x),n.d(x,{maxNorm:()=>_w,minMaxNorm:()=>Lw,nonNeg:()=>Mw,unitNorm:()=>Ow});var w={};n.r(w),n.d(w,{constant:()=>Bw,glorotNormal:()=>qw,glorotUniform:()=>jw,heNormal:()=>Kw,heUniform:()=>Xw,identity:()=>Gw,leCunNormal:()=>Yw,leCunUniform:()=>Jw,ones:()=>Pw,orthogonal:()=>Zw,randomNormal:()=>Vw,randomUniform:()=>Ww,truncatedNormal:()=>Uw,varianceScaling:()=>Hw,zeros:()=>zw});var v={};n.r(v),n.d(v,{Layer:()=>pw,RNN:()=>vI,RNNCell:()=>kI,activation:()=>tS,add:()=>cS,alphaDropout:()=>eT,average:()=>hS,averagePooling1d:()=>wS,averagePooling2d:()=>IS,averagePooling3d:()=>TS,avgPool1d:()=>vS,avgPool2d:()=>NS,avgPool3d:()=>CS,avgPooling1d:()=>kS,avgPooling2d:()=>SS,avgPooling3d:()=>$S,batchNormalization:()=>yS,bidirectional:()=>jS,categoryEncoding:()=>aT,centerCrop:()=>sT,concatenate:()=>dS,conv1d:()=>jN,conv2d:()=>qN,conv2dTranspose:()=>KN,conv3d:()=>XN,conv3dTranspose:()=>YN,convLstm2d:()=>VS,convLstm2dCell:()=>US,cropping2D:()=>ZN,dense:()=>nS,depthwiseConv2d:()=>eS,dot:()=>gS,dropout:()=>sS,elu:()=>BN,embedding:()=>uS,flatten:()=>aS,gaussianDropout:()=>QS,gaussianNoise:()=>ZS,globalAveragePooling1d:()=>ES,globalAveragePooling2d:()=>AS,globalMaxPool1d:()=>KS,globalMaxPool2d:()=>XS,globalMaxPooling1d:()=>RS,globalMaxPooling2d:()=>FS,gru:()=>MS,gruCell:()=>LS,input:()=>bk,inputLayer:()=>PN,layerNormalization:()=>bS,leakyReLU:()=>VN,lstm:()=>zS,lstmCell:()=>PS,masking:()=>tT,maxPool1d:()=>YS,maxPool2d:()=>JS,maxPooling1d:()=>DS,maxPooling2d:()=>_S,maxPooling3d:()=>OS,maximum:()=>pS,minimum:()=>fS,multiply:()=>mS,permute:()=>lS,prelu:()=>UN,randomWidth:()=>iT,reLU:()=>WN,repeatVector:()=>iS,rescaling:()=>nT,reshape:()=>oS,resizing:()=>rT,rnn:()=>GS,separableConv2d:()=>JN,simpleRNN:()=>BS,simpleRNNCell:()=>WS,softmax:()=>GN,spatialDropout1d:()=>rS,stackedRNNCells:()=>HS,thresholdedReLU:()=>HN,timeDistributed:()=>qS,upSampling2d:()=>QN,zeroPadding2d:()=>xS});var k={};n.r(k),n.d(k,{MAPE:()=>yT,MSE:()=>wT,binaryAccuracy:()=>oT,binaryCrossentropy:()=>lT,categoricalAccuracy:()=>cT,categoricalCrossentropy:()=>hT,cosineProximity:()=>fT,mape:()=>bT,meanAbsoluteError:()=>mT,meanAbsolutePercentageError:()=>gT,meanSquaredError:()=>xT,mse:()=>vT,precision:()=>dT,r2Score:()=>kT,recall:()=>pT,sparseCategoricalAccuracy:()=>uT});var I={};n.r(I),n.d(I,{modelFromJSON:()=>pk});var N={};n.r(N),n.d(N,{l1:()=>NT,l1l2:()=>IT,l2:()=>ST});var S={};n.r(S),n.d(S,{json:()=>HT});var T={};n.r(T),n.d(T,{json:()=>jT});var C={};n.r(C),n.d(C,{json:()=>qT});var $={};n.r($),n.d($,{json:()=>KT});var E={};n.r(E),n.d(E,{json:()=>XT});var A={};n.r(A),n.d(A,{json:()=>YT});var R={};n.r(R),n.d(R,{json:()=>JT});var F={};n.r(F),n.d(F,{json:()=>ZT});var D={};n.r(D),n.d(D,{json:()=>QT});var _={};n.r(_),n.d(_,{json:()=>eC});var O={};n.r(O),n.d(O,{json:()=>tC});var M={};n.r(M),n.d(M,{json:()=>nC});var L={};n.r(L),n.d(L,{json:()=>sC});var z={};n.r(z),n.d(z,{json:()=>rC});var P={};n.r(P),n.d(P,{json:()=>aC});var B={};n.r(B),n.d(B,{json:()=>iC});var W={};n.r(W),n.d(W,{json:()=>oC});var V={};n.r(V),n.d(V,{json:()=>lC});var U={};n.r(U),n.d(U,{json:()=>uC});var G={};n.r(G),n.d(G,{OP_SCOPE_SUFFIX:()=>ei,abs:()=>ul,acos:()=>Wu,acosh:()=>Vu,add:()=>Oo,addN:()=>Uu,all:()=>Gu,any:()=>Hu,argMax:()=>ju,argMin:()=>qu,asin:()=>Ku,asinh:()=>Xu,atan:()=>Yu,atan2:()=>Ju,atanh:()=>Zu,avgPool:()=>mc,avgPool3d:()=>gc,basicLSTMCell:()=>vc,batchNorm:()=>Ic,batchNorm2d:()=>Nc,batchNorm3d:()=>Sc,batchNorm4d:()=>Tc,batchToSpaceND:()=>kc,bincount:()=>Cc,bitwiseAnd:()=>$c,booleanMaskAsync:()=>Ep,broadcastArgs:()=>Ec,broadcastTo:()=>Ac,buffer:()=>Ro,cast:()=>Fo,ceil:()=>Rc,clipByValue:()=>Fc,clone:()=>Do,complex:()=>ni,concat:()=>yc,concat1d:()=>Dc,concat2d:()=>_c,concat3d:()=>Oc,concat4d:()=>Mc,conv1d:()=>zc,conv2d:()=>Lc,conv2dTranspose:()=>Bc,conv3d:()=>Wc,conv3dTranspose:()=>Uc,cos:()=>Gc,cosh:()=>Hc,cosineWindow:()=>Mp,cumprod:()=>jc,cumsum:()=>qc,denseBincount:()=>Kc,depthToSpace:()=>Xc,depthwiseConv2d:()=>Yc,diag:()=>Jc,dilation2d:()=>Zc,div:()=>Lo,divNoNan:()=>th,dot:()=>nh,dropout:()=>_p,einsum:()=>sh,elu:()=>rh,enclosingPowerOfTwo:()=>Op,ensureShape:()=>ah,equal:()=>Qc,erf:()=>ih,euclideanNorm:()=>wh,exp:()=>vh,expandDims:()=>kh,expm1:()=>Ih,eye:()=>Sh,fft:()=>sp,fill:()=>rl,floor:()=>Th,floorDiv:()=>Mo,fused:()=>m,gather:()=>Ch,gatherND:()=>Dp,greater:()=>$h,greaterEqual:()=>Eh,ifft:()=>rp,imag:()=>Wl,image:()=>Kf,inTopKAsync:()=>Lp,irfft:()=>ap,isFinite:()=>Ah,isInf:()=>Rh,isNaN:()=>Fh,leakyRelu:()=>Dh,less:()=>_h,lessEqual:()=>Oh,linalg:()=>Xf,linspace:()=>Mh,localResponseNormalization:()=>Lh,log:()=>zh,log1p:()=>Ph,logSigmoid:()=>Wh,logSoftmax:()=>Vh,logSumExp:()=>Uh,logicalAnd:()=>Gh,logicalNot:()=>Hh,logicalOr:()=>jh,logicalXor:()=>qh,losses:()=>Yf,lowerBound:()=>Yh,matMul:()=>Pl,max:()=>mh,maxPool:()=>Jh,maxPool3d:()=>Zh,maxPoolWithArgmax:()=>Qh,maximum:()=>pl,mean:()=>ed,meshgrid:()=>sd,min:()=>gh,minimum:()=>rd,mirrorPad:()=>ad,mod:()=>id,moments:()=>od,movingAverage:()=>Ap,mul:()=>zo,multiRNNCell:()=>ld,multinomial:()=>ud,neg:()=>Vl,norm:()=>xh,notEqual:()=>cd,oneHot:()=>Bl,ones:()=>nd,onesLike:()=>hd,op:()=>ti,outerProduct:()=>dd,pad:()=>pd,pad1d:()=>fd,pad2d:()=>md,pad3d:()=>gd,pad4d:()=>yd,pool:()=>xd,pow:()=>il,prelu:()=>wd,print:()=>_o,prod:()=>vd,raggedGather:()=>kd,raggedRange:()=>Id,raggedTensorToTensor:()=>Nd,rand:()=>Sd,randomGamma:()=>Ad,randomNormal:()=>Rd,randomStandardNormal:()=>Fd,randomUniform:()=>Dd,randomUniformInt:()=>_d,range:()=>Od,real:()=>Ul,reciprocal:()=>Md,relu:()=>Ld,relu6:()=>zd,reshape:()=>fc,reverse:()=>Pd,reverse1d:()=>Bd,reverse2d:()=>Wd,reverse3d:()=>Vd,reverse4d:()=>Ud,rfft:()=>op,round:()=>Gd,rsqrt:()=>Hd,scalar:()=>Xo,scatterND:()=>Rp,searchSorted:()=>Xh,selu:()=>jd,separableConv2d:()=>qd,setdiff1dAsync:()=>Kd,sigmoid:()=>bc,sign:()=>Xd,signal:()=>qf,sin:()=>Yd,sinh:()=>Jd,slice:()=>xc,slice1d:()=>Zd,slice2d:()=>Qd,slice3d:()=>ep,slice4d:()=>tp,softmax:()=>np,softplus:()=>Bh,spaceToBatchND:()=>bd,sparse:()=>Jf,sparseToDense:()=>Fp,spectral:()=>jf,split:()=>ip,sqrt:()=>Po,square:()=>Bo,squaredDifference:()=>lp,squeeze:()=>up,stack:()=>cp,step:()=>hp,stridedSlice:()=>dp,string:()=>Zf,sub:()=>ol,sum:()=>yh,tan:()=>pp,tanh:()=>wc,tensor:()=>ri,tensor1d:()=>fp,tensor2d:()=>mp,tensor3d:()=>jl,tensor4d:()=>gp,tensor5d:()=>yp,tensor6d:()=>bp,tensorScatterUpdate:()=>xp,tile:()=>Nh,topk:()=>wp,transpose:()=>Gl,truncatedNormal:()=>vp,unique:()=>kp,unsortedSegmentSum:()=>Ip,unstack:()=>Np,upperBound:()=>Sp,variable:()=>Tp,where:()=>eh,whereAsync:()=>$p,zeros:()=>td,zerosLike:()=>Wo});var H={};n.r(H),n.d(H,{CSVDataset:()=>G$,Dataset:()=>F$,FileDataSource:()=>sE,TextLineDataset:()=>L$,URLDataSource:()=>rE,array:()=>_$,csv:()=>aE,func:()=>iE,generator:()=>oE,microphone:()=>uE,version_data:()=>cE,webcam:()=>lE,zip:()=>O$});var j={};n.r(j),n.d(j,{addImpl:()=>EE,bincountImpl:()=>DE,bincountReduceImpl:()=>_E,bitwiseAndImpl:()=>OE,castImpl:()=>NE,ceilImpl:()=>WE,concatImpl:()=>GE,equalImpl:()=>HE,expImpl:()=>KE,expm1Impl:()=>JE,floorDivImpl:()=>sA,floorImpl:()=>eA,gatherNdImpl:()=>iA,gatherV2Impl:()=>oA,greaterEqualImpl:()=>hA,greaterImpl:()=>lA,lessEqualImpl:()=>yA,lessImpl:()=>fA,linSpaceImpl:()=>wA,logImpl:()=>vA,maxImpl:()=>NA,maximumImpl:()=>SA,minimumImpl:()=>$A,multiplyImpl:()=>RA,negImpl:()=>OA,notEqualImpl:()=>LA,prodImpl:()=>UA,raggedGatherImpl:()=>KA,raggedRangeImpl:()=>YA,raggedTensorToTensorImpl:()=>tR,rangeImpl:()=>nR,rsqrtImpl:()=>sR,scatterImpl:()=>iR,sigmoidImpl:()=>oR,simpleAbsImpl:()=>fE,sliceImpl:()=>cR,sparseFillEmptyRowsImpl:()=>pR,sparseReshapeImpl:()=>fR,sparseSegmentReductionImpl:()=>mR,sqrtImpl:()=>gR,squaredDifferenceImpl:()=>xR,staticRegexReplaceImpl:()=>kR,stridedSliceImpl:()=>SR,stringNGramsImpl:()=>CR,stringSplitImpl:()=>ER,stringToHashBucketFastImpl:()=>AR,subImpl:()=>RR,tileImpl:()=>OR,topKImpl:()=>zR,transposeImpl:()=>BA,uniqueImpl:()=>PR});var q={};n.r(q),n.d(q,{assertNotComplex:()=>eL,bindCanvasToFramebuffer:()=>$M,bindColorTextureToFramebuffer:()=>EM,bindTextureToProgramUniformSampler:()=>CM,bindTextureUnit:()=>IM,bindVertexBufferToProgramAttribute:()=>kM,callAndCheck:()=>sM,canBeRepresented:()=>iM,createFragmentShader:()=>cM,createFramebuffer:()=>vM,createProgram:()=>pM,createStaticIndexBuffer:()=>yM,createStaticVertexBuffer:()=>gM,createTexture:()=>xM,createVertexShader:()=>uM,getBatchDim:()=>OM,getExtensionOrThrow:()=>lM,getFramebufferErrorMessage:()=>FM,getMaxTexturesInShader:()=>jM,getNumChannels:()=>bM,getProgramUniformLocation:()=>TM,getProgramUniformLocationOrThrow:()=>SM,getRowsCols:()=>MM,getShapeAs3D:()=>LM,getTextureShapeFromLogicalShape:()=>zM,getWebGLDisjointQueryTimerVersion:()=>qM,getWebGLErrorMessage:()=>oM,getWebGLMaxTextureSize:()=>UM,hasExtension:()=>KM,isCapableOfRenderingToFloatTexture:()=>YM,isDownloadFloatTextureEnabled:()=>JM,isReshapeFree:()=>BM,isWebGLFenceEnabled:()=>QM,isWebGLVersionEnabled:()=>XM,linkProgram:()=>fM,logShaderSourceAndInfoLog:()=>dM,resetMaxTextureSize:()=>GM,resetMaxTexturesInShader:()=>HM,unbindColorTextureFromFramebuffer:()=>AM,unbindTextureUnit:()=>NM,validateFramebuffer:()=>RM,validateProgram:()=>mM,validateTextureSize:()=>wM});var K={};n.r(K),n.d(K,{bindVertexProgramAttributeStreams:()=>qL,createBufferFromOutputTexture:()=>YL,createFloat16MatrixTexture:()=>BL,createFloat16PackedMatrixTexture:()=>jL,createFloat32MatrixTexture:()=>zL,createIndexBuffer:()=>OL,createPackedMatrixTexture:()=>GL,createUnsignedBytesMatrixTexture:()=>VL,createVertexBuffer:()=>_L,createVertexShader:()=>DL,downloadByteEncodedFloatMatrixFromOutputTexture:()=>ZL,downloadFloat32MatrixFromBuffer:()=>JL,downloadMatrixFromPackedOutputTexture:()=>ez,downloadPackedMatrixFromBuffer:()=>QL,getInternalFormatForFloat16MatrixTexture:()=>PL,getInternalFormatForFloat16PackedMatrixTexture:()=>HL,getInternalFormatForFloat32MatrixTexture:()=>LL,getInternalFormatForPackedMatrixTexture:()=>UL,getInternalFormatForUnsignedBytesMatrixTexture:()=>WL,uploadDenseMatrixToTexture:()=>KL,uploadPixelDataToTexture:()=>XL});var X={};n.r(X),n.d(X,{Abs:()=>rt,Acos:()=>at,Acosh:()=>it,AdadeltaOptimizer:()=>sl,AdagradOptimizer:()=>al,AdamOptimizer:()=>ll,AdamaxOptimizer:()=>fl,Add:()=>ot,AddN:()=>lt,All:()=>ut,Any:()=>ct,ArgMax:()=>ht,ArgMin:()=>dt,Asin:()=>pt,Asinh:()=>ft,Atan:()=>mt,Atan2:()=>yt,Atanh:()=>gt,AvgPool:()=>bt,AvgPool3D:()=>wt,AvgPool3DGrad:()=>vt,AvgPoolGrad:()=>xt,BatchMatMul:()=>kt,BatchToSpaceND:()=>It,Bincount:()=>Nt,BitwiseAnd:()=>St,BroadcastArgs:()=>Ct,BroadcastTo:()=>Tt,Callback:()=>TT,CallbackList:()=>sv,Cast:()=>$t,Ceil:()=>Et,ClipByValue:()=>At,Complex:()=>Rt,ComplexAbs:()=>Ft,Concat:()=>Dt,Conv2D:()=>_t,Conv2DBackpropFilter:()=>Ot,Conv2DBackpropInput:()=>Mt,Conv3D:()=>Lt,Conv3DBackpropFilterV2:()=>zt,Conv3DBackpropInputV2:()=>Pt,Cos:()=>Bt,Cosh:()=>Wt,CropAndResize:()=>Gt,Cumprod:()=>Vt,Cumsum:()=>Ut,CustomCallback:()=>iv,DataStorage:()=>Q,DenseBincount:()=>Ht,DepthToSpace:()=>jt,DepthwiseConv2dNative:()=>qt,DepthwiseConv2dNativeBackpropFilter:()=>Kt,DepthwiseConv2dNativeBackpropInput:()=>Xt,Diag:()=>Yt,Dilation2D:()=>Jt,Dilation2DBackpropFilter:()=>Qt,Dilation2DBackpropInput:()=>Zt,Draw:()=>en,ENV:()=>tt,EarlyStopping:()=>ET,Einsum:()=>nn,Elu:()=>sn,EluGrad:()=>rn,Environment:()=>Je,Equal:()=>on,Erf:()=>an,Exp:()=>ln,ExpandDims:()=>un,Expm1:()=>cn,FFT:()=>hn,Fill:()=>dn,FlipLeftRight:()=>pn,Floor:()=>fn,FloorDiv:()=>mn,FromPixels:()=>br,FusedBatchNorm:()=>gn,FusedConv2D:()=>vr,FusedDepthwiseConv2D:()=>kr,GPGPUContext:()=>tz,GatherNd:()=>bn,GatherV2:()=>yn,GraphModel:()=>JC,Greater:()=>xn,GreaterEqual:()=>wn,History:()=>av,IFFT:()=>kn,Identity:()=>vn,Imag:()=>In,InputSpec:()=>lw,IsFinite:()=>Nn,IsInf:()=>Sn,IsNan:()=>Tn,KernelBackend:()=>ee,LRN:()=>Pn,LRNGrad:()=>Bn,LayerVariable:()=>aw,LayersModel:()=>hk,LeakyRelu:()=>Cn,Less:()=>$n,LessEqual:()=>En,LinSpace:()=>An,Log:()=>Rn,Log1p:()=>Fn,LogSoftmax:()=>Ln,LogicalAnd:()=>Dn,LogicalNot:()=>_n,LogicalOr:()=>On,LogicalXor:()=>Mn,LowerBound:()=>zn,MathBackendCPU:()=>pE,MathBackendWebGL:()=>NP,MatrixBandPart:()=>Wn,Max:()=>Vn,MaxPool:()=>Gn,MaxPool3D:()=>jn,MaxPool3DGrad:()=>qn,MaxPoolGrad:()=>Hn,MaxPoolWithArgmax:()=>Kn,Maximum:()=>Un,Mean:()=>Xn,Min:()=>Yn,Minimum:()=>Jn,MirrorPad:()=>Zn,Mod:()=>Qn,MomentumOptimizer:()=>gl,Multinomial:()=>es,Multiply:()=>ts,Neg:()=>ns,NonMaxSuppressionV3:()=>rs,NonMaxSuppressionV4:()=>as,NonMaxSuppressionV5:()=>is,NotEqual:()=>ss,OP_SCOPE_SUFFIX:()=>ei,OneHot:()=>ls,OnesLike:()=>os,Optimizer:()=>nl,OptimizerConstructors:()=>Bu,Pack:()=>us,PadV2:()=>cs,Pool:()=>hs,Pow:()=>ds,Prelu:()=>ps,Prod:()=>fs,RMSPropOptimizer:()=>yl,RNN:()=>vI,RaggedGather:()=>ms,RaggedRange:()=>gs,RaggedTensorToTensor:()=>ys,Range:()=>bs,Rank:()=>Ia,Real:()=>xs,RealDiv:()=>tn,Reciprocal:()=>ws,Reduction:()=>$f,Relu:()=>vs,Relu6:()=>Cs,Reshape:()=>ks,ResizeBilinear:()=>Ss,ResizeBilinearGrad:()=>Ts,ResizeNearestNeighbor:()=>Is,ResizeNearestNeighborGrad:()=>Ns,Reverse:()=>$s,RotateWithOffset:()=>xr,Round:()=>Es,Rsqrt:()=>As,SGDOptimizer:()=>ml,ScatterNd:()=>Rs,SearchSorted:()=>Ds,Select:()=>_s,Selu:()=>Os,Sequential:()=>mk,Sigmoid:()=>Bs,Sign:()=>Ps,Sin:()=>Ls,Sinh:()=>zs,Slice:()=>Ms,Softmax:()=>js,Softplus:()=>Ws,SpaceToBatchND:()=>Gs,SparseFillEmptyRows:()=>qs,SparseReshape:()=>Ks,SparseSegmentMean:()=>Xs,SparseSegmentSum:()=>Ys,SparseToDense:()=>Js,SplitV:()=>Hs,Sqrt:()=>Vs,Square:()=>Qs,SquaredDifference:()=>Zs,StaticRegexReplace:()=>er,Step:()=>yr,StridedSlice:()=>tr,StringNGrams:()=>nr,StringSplit:()=>sr,StringToHashBucketFast:()=>rr,Sub:()=>ar,Sum:()=>Us,SymbolicTensor:()=>uw,Tan:()=>ir,Tanh:()=>or,Tensor:()=>wa,TensorBuffer:()=>ga,TensorScatterUpdate:()=>Fs,Tile:()=>lr,TopK:()=>ur,Transform:()=>cr,Transpose:()=>hr,Unique:()=>dr,Unpack:()=>pr,UnsortedSegmentSum:()=>fr,UpperBound:()=>mr,Variable:()=>ka,ZerosLike:()=>gr,_FusedMatMul:()=>wr,abs:()=>ul,acos:()=>Wu,acosh:()=>Vu,add:()=>Oo,addN:()=>Uu,all:()=>Gu,any:()=>Hu,argMax:()=>ju,argMin:()=>qu,asin:()=>Ku,asinh:()=>Xu,atan:()=>Yu,atan2:()=>Ju,atanh:()=>Zu,avgPool:()=>mc,avgPool3d:()=>gc,backend:()=>Ti,backend_util:()=>y,basicLSTMCell:()=>vc,batchNorm:()=>Ic,batchNorm2d:()=>Nc,batchNorm3d:()=>Sc,batchNorm4d:()=>Tc,batchToSpaceND:()=>kc,bincount:()=>Cc,bitwiseAnd:()=>$c,booleanMaskAsync:()=>Ep,broadcastArgs:()=>Ec,broadcastTo:()=>Ac,broadcast_util:()=>o,browser:()=>c,buffer:()=>Ro,callbacks:()=>AT,cast:()=>Fo,ceil:()=>Rc,clipByValue:()=>Fc,clone:()=>Do,complex:()=>ni,concat:()=>yc,concat1d:()=>Dc,concat2d:()=>_c,concat3d:()=>Oc,concat4d:()=>Mc,constraints:()=>x,conv1d:()=>zc,conv2d:()=>Lc,conv2dTranspose:()=>Bc,conv3d:()=>Wc,conv3dTranspose:()=>Uc,copyRegisteredKernels:()=>_r,cos:()=>Gc,cosh:()=>Hc,cosineWindow:()=>Mp,cumprod:()=>jc,cumsum:()=>qc,customGrad:()=>qo,data:()=>H,denseBincount:()=>Kc,deprecationWarn:()=>ci,depthToSpace:()=>Xc,depthwiseConv2d:()=>Yc,deregisterOp:()=>MT,device_util:()=>a,diag:()=>Jc,dilation2d:()=>Zc,disableDeprecationWarnings:()=>ui,dispose:()=>gi,disposeVariables:()=>hi,div:()=>Lo,divNoNan:()=>th,dot:()=>nh,dropout:()=>_p,einsum:()=>sh,elu:()=>rh,enableDebugMode:()=>li,enableProdMode:()=>oi,enclosingPowerOfTwo:()=>Op,engine:()=>di,ensureShape:()=>ah,env:()=>Qe,equal:()=>Qc,erf:()=>ih,euclideanNorm:()=>wh,exp:()=>vh,expandDims:()=>kh,expm1:()=>Ih,eye:()=>Sh,fft:()=>sp,fill:()=>rl,findBackend:()=>Ii,findBackendFactory:()=>Ni,floor:()=>Th,floorDiv:()=>Mo,forceHalfFloat:()=>TP,fused:()=>m,gather:()=>Ch,gatherND:()=>Dp,gather_util:()=>h,getBackend:()=>vi,getGradient:()=>$r,getKernel:()=>Cr,getKernelsForBackend:()=>Er,gpgpu_util:()=>K,grad:()=>Vo,grads:()=>Uo,greater:()=>$h,greaterEqual:()=>Eh,ifft:()=>rp,imag:()=>Wl,image:()=>Kf,inTopKAsync:()=>Lp,initializers:()=>w,input:()=>bk,io:()=>l,irfft:()=>ap,isFinite:()=>Ah,isInf:()=>Rh,isNaN:()=>Fh,keep:()=>yi,kernel_impls:()=>b,layers:()=>v,leakyRelu:()=>Dh,less:()=>_h,lessEqual:()=>Oh,linalg:()=>Xf,linspace:()=>Mh,loadGraphModel:()=>ZC,loadGraphModelSync:()=>QC,loadLayersModel:()=>fk,localResponseNormalization:()=>Lh,log:()=>zh,log1p:()=>Ph,logSigmoid:()=>Wh,logSoftmax:()=>Vh,logSumExp:()=>Uh,logicalAnd:()=>Gh,logicalNot:()=>Hh,logicalOr:()=>jh,logicalXor:()=>qh,losses:()=>Yf,lowerBound:()=>Yh,matMul:()=>Pl,math:()=>u,max:()=>mh,maxPool:()=>Jh,maxPool3d:()=>Zh,maxPoolWithArgmax:()=>Qh,maximum:()=>pl,mean:()=>ed,memory:()=>pi,meshgrid:()=>sd,metrics:()=>k,min:()=>gh,minimum:()=>rd,mirrorPad:()=>ad,mod:()=>id,model:()=>gk,models:()=>I,moments:()=>od,movingAverage:()=>Ap,mul:()=>zo,multiRNNCell:()=>ld,multinomial:()=>ud,neg:()=>Vl,nextFrame:()=>tm,norm:()=>xh,notEqual:()=>cd,oneHot:()=>Bl,ones:()=>nd,onesLike:()=>hd,op:()=>ti,outerProduct:()=>dd,pad:()=>pd,pad1d:()=>fd,pad2d:()=>md,pad3d:()=>gd,pad4d:()=>yd,pool:()=>xd,pow:()=>il,prelu:()=>wd,print:()=>_o,prod:()=>vd,profile:()=>fi,raggedGather:()=>kd,raggedRange:()=>Id,raggedTensorToTensor:()=>Nd,rand:()=>Sd,randomGamma:()=>Ad,randomNormal:()=>Rd,randomStandardNormal:()=>Fd,randomUniform:()=>Dd,randomUniformInt:()=>_d,range:()=>Od,ready:()=>wi,real:()=>Ul,reciprocal:()=>Md,registerBackend:()=>Si,registerCallbackConstructor:()=>xk,registerGradient:()=>Rr,registerKernel:()=>Ar,registerOp:()=>_T,regularizers:()=>N,relu:()=>Ld,relu6:()=>zd,removeBackend:()=>ki,reshape:()=>fc,reverse:()=>Pd,reverse1d:()=>Bd,reverse2d:()=>Wd,reverse3d:()=>Vd,reverse4d:()=>Ud,rfft:()=>op,round:()=>Gd,rsqrt:()=>Hd,scalar:()=>Xo,scatterND:()=>Rp,scatter_util:()=>d,searchSorted:()=>Xh,selu:()=>jd,separableConv2d:()=>qd,sequential:()=>yk,serialization:()=>i,setBackend:()=>xi,setPlatform:()=>Ci,setWebGLContext:()=>KO,setdiff1dAsync:()=>Kd,shared:()=>j,sigmoid:()=>bc,sign:()=>Xd,signal:()=>qf,sin:()=>Yd,sinh:()=>Jd,slice:()=>xc,slice1d:()=>Zd,slice2d:()=>Qd,slice3d:()=>ep,slice4d:()=>tp,slice_util:()=>p,softmax:()=>np,softplus:()=>Bh,spaceToBatchND:()=>bd,sparse:()=>Jf,sparseToDense:()=>Fp,spectral:()=>jf,split:()=>ip,sqrt:()=>Po,square:()=>Bo,squaredDifference:()=>lp,squeeze:()=>up,stack:()=>cp,step:()=>hp,stridedSlice:()=>dp,string:()=>Zf,sub:()=>ol,sum:()=>yh,sumOutType:()=>Aa,tan:()=>pp,tanh:()=>wc,tensor:()=>ri,tensor1d:()=>fp,tensor2d:()=>mp,tensor3d:()=>jl,tensor4d:()=>gp,tensor5d:()=>yp,tensor6d:()=>bp,tensorScatterUpdate:()=>xp,tensor_util:()=>r,test_util:()=>f,tidy:()=>mi,tile:()=>Nh,time:()=>bi,topk:()=>wp,train:()=>Qf,transpose:()=>Gl,truncatedNormal:()=>vp,unique:()=>kp,unregisterGradient:()=>Dr,unregisterKernel:()=>Fr,unsortedSegmentSum:()=>Ip,unstack:()=>Np,upcastType:()=>Ea,upperBound:()=>Sp,util:()=>s,valueAndGrad:()=>Go,valueAndGrads:()=>Ho,variable:()=>Tp,variableGrads:()=>jo,version:()=>vj,version_converter:()=>e$,version_core:()=>Pu,version_cpu:()=>BR,version_layers:()=>Hv,version_webgl:()=>SP,webgl:()=>CP,webgl_util:()=>q,where:()=>eh,whereAsync:()=>$p,zeros:()=>td,zerosLike:()=>Wo});const Y=e=>(e=>Array.isArray(e))(e)?e[0]:e,J=(e=>{let{scale:t,name:n,version:s,meta:{architecture:r,...a},path:i}=e;const o=i||`models/x${t}/model.json`;if("rdn"===r)return{scale:t,modelType:"layers",_internals:{path:o,name:n,version:s},meta:{architecture:r,...a},inputRange:[0,255],outputRange:[0,255]};return{setup:e=>{const n=e.layers.Layer;[class extends n{beta;constructor(){super({}),this.beta=.2}call(t){return e.mul(Y(t),this.beta)}static className="MultiplyBeta"},(s=>{class r extends n{scale=(()=>s)();constructor(){super({})}computeOutputShape(e){return[e[0],e[1],e[2],3]}call(t){return e.depthToSpace(Y(t),this.scale,"NHWC")}static className=(()=>`PixelShuffle${t}x`)()}return r})(t)].forEach((t=>{e.serialization.registerClass(t)}))},scale:t,modelType:"layers",_internals:{path:o,name:n,version:s},meta:{architecture:r,...a},inputRange:[0,1],outputRange:[0,1]}})({scale:2,name:"@upscalerjs/default-model",version:"1.0.0-beta.17",path:"models/model.json",meta:{C:1,D:2,G:4,G0:64,T:10,architecture:"rdn",patchSize:128,size:"slim",artifactReducing:!1,sharpening:!1,dataset:"div2k",modelFileName:"rdn-C1-D2-G4-G064-T10-x2-patchsize128-compress100-sharpen0-datadiv2k-vary_cFalse_best-val_loss_epoch494"}}),Z=J;class Q{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class ee{refCount(e){return te("refCount")}incRef(e){return te("incRef")}timerAvailable(){return!0}time(e){return te("time")}read(e){return te("read")}readSync(e){return te("readSync")}readToGPU(e,t){return te("readToGPU")}numDataIds(){return te("numDataIds")}disposeData(e,t){return te("disposeData")}write(e,t,n){return te("write")}move(e,t,n,s,r){return te("move")}createTensorFromGPUData(e,t,n){return te("createTensorFromGPUData")}memory(){return te("memory")}floatPrecision(){return te("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return te("dispose")}}function te(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function ne(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,ie(e,t,n)}function se(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,ie(e,n,s),ie(t,n,s)}function re(e,t,n){return Math.max(e,Math.min(t,n))}function ae(e){return e%2===0?e:e+1}function ie(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function oe(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function le(e,t){const n=Math.random();return t*n+(1-n)*e}function ue(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function ce(e,t){if(!e)throw new Error("string"===typeof t?t:t())}function he(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";ce(ge(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function de(e){ce(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function pe(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function fe(e){return 0===e.length}function me(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function ge(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ye(e){return e%1===0}function be(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function xe(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function we(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return ne(t),t}function ve(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function ke(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>0,n=arguments.length>2?arguments[2]:void 0,s=arguments.length>3?arguments[3]:void 0;return new Promise(((r,a)=>{let i=0;const o=()=>{if(e())return void r();i++;const l=t(i);null!=n&&i>=n?a():null!=s?s(o,l):setTimeout(o,l)};o()}))}function Ie(e,t){let n=1,s=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);s=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function Ne(e,t){const n=t.length;return ce((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),ce(e.every((e=>ye(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function Se(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:Ne(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),s.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),s.push(o))}return{newShape:n,keptDims:s}}function Te(e,t){return Ce(e,t)}function Ce(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function $e(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function Ee(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Ae(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function Re(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Fe(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function De(e){return"string"===typeof e||e instanceof String}function _e(e){return"boolean"===typeof e}function Oe(e){return"number"===typeof e}function Me(e){return Array.isArray(e)?Me(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Oe(e)?"float32":De(e)?"string":_e(e)?"bool":"float32"}function Le(e){return!!(e&&e.constructor&&e.call&&e.apply)}function ze(e,t){for(let n=t;n<e;++n)if(e%n===0)return n;return e}function Pe(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Be(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=Be(e+t*o,i,n,s)}return r}function We(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Be(0,e,t,n)}function Ve(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function Ue(e,t){const n=Ge(e,t);for(let s=0;s<n.length;s++)n[s]=1;return n}function Ge(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function He(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return We(e,new Float32Array(n));if("int32"===t)return We(e,new Int32Array(n));if("bool"===t)return We(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function je(e){e.forEach((t=>{ce(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function qe(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let r=0;r<e.length-1;++r)s+=n[r]*e[r];return s}function Ke(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(e/n[r]),e-=s[r]*n[r];return s[s.length-1]=e,s}function Xe(e){return e&&e.then&&"function"===typeof e.then}const Ye="tfjsflags";class Je{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Ze,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(Qe().getBool("IS_TEST")||Qe().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];Qe().getBool("IS_TEST")||Qe().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Xe(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if("undefined"===typeof this.global||"undefined"===typeof this.global.location||"undefined"===typeof this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(Ye in e){e[Ye].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}}function Ze(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(e){for(var n=arguments.length,s=new Array(n>1?n-1:0),r=1;r<n;r++)s[r-1]=arguments[r];return function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,s[0],s[1]),s.join("=")})),t}function Qe(){return tt}let et,tt=null;function nt(){if(null==et){let e;if("undefined"!==typeof window)e=window;else if("undefined"!==typeof n.g)e=n.g;else if("undefined"!==typeof process)e=process;else{if("undefined"===typeof self)throw new Error("Could not find a global object");e=self}et=e}return et}function st(e,t){const n=function(){const e=nt();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const rt="Abs",at="Acos",it="Acosh",ot="Add",lt="AddN",ut="All",ct="Any",ht="ArgMax",dt="ArgMin",pt="Asin",ft="Asinh",mt="Atan",gt="Atanh",yt="Atan2",bt="AvgPool",xt="AvgPoolGrad",wt="AvgPool3D",vt="AvgPool3DGrad",kt="BatchMatMul",It="BatchToSpaceND",Nt="Bincount",St="BitwiseAnd",Tt="BroadcastTo",Ct="BroadcastArgs",$t="Cast",Et="Ceil",At="ClipByValue",Rt="Complex",Ft="ComplexAbs",Dt="Concat",_t="Conv2D",Ot="Conv2DBackpropFilter",Mt="Conv2DBackpropInput",Lt="Conv3D",zt="Conv3DBackpropFilterV2",Pt="Conv3DBackpropInputV2",Bt="Cos",Wt="Cosh",Vt="Cumprod",Ut="Cumsum",Gt="CropAndResize",Ht="DenseBincount",jt="DepthToSpace",qt="DepthwiseConv2dNative",Kt="DepthwiseConv2dNativeBackpropFilter",Xt="DepthwiseConv2dNativeBackpropInput",Yt="Diag",Jt="Dilation2D",Zt="Dilation2DBackpropInput",Qt="Dilation2DBackpropFilter",en="Draw",tn="RealDiv",nn="Einsum",sn="Elu",rn="EluGrad",an="Erf",on="Equal",ln="Exp",un="ExpandDims",cn="Expm1",hn="FFT",dn="Fill",pn="FlipLeftRight",fn="Floor",mn="FloorDiv",gn="FusedBatchNorm",yn="GatherV2",bn="GatherNd",xn="Greater",wn="GreaterEqual",vn="Identity",kn="IFFT",In="Imag",Nn="IsFinite",Sn="IsInf",Tn="IsNan",Cn="LeakyRelu",$n="Less",En="LessEqual",An="LinSpace",Rn="Log",Fn="Log1p",Dn="LogicalAnd",_n="LogicalNot",On="LogicalOr",Mn="LogicalXor",Ln="LogSoftmax",zn="LowerBound",Pn="LRN",Bn="LRNGrad",Wn="MatrixBandPart",Vn="Max",Un="Maximum",Gn="MaxPool",Hn="MaxPoolGrad",jn="MaxPool3D",qn="MaxPool3DGrad",Kn="MaxPoolWithArgmax",Xn="Mean",Yn="Min",Jn="Minimum",Zn="MirrorPad",Qn="Mod",es="Multinomial",ts="Multiply",ns="Neg",ss="NotEqual",rs="NonMaxSuppressionV3",as="NonMaxSuppressionV4",is="NonMaxSuppressionV5",os="OnesLike",ls="OneHot",us="Pack",cs="PadV2",hs="Pool",ds="Pow",ps="Prelu",fs="Prod",ms="RaggedGather",gs="RaggedRange",ys="RaggedTensorToTensor",bs="Range",xs="Real",ws="Reciprocal",vs="Relu",ks="Reshape",Is="ResizeNearestNeighbor",Ns="ResizeNearestNeighborGrad",Ss="ResizeBilinear",Ts="ResizeBilinearGrad",Cs="Relu6",$s="Reverse",Es="Round",As="Rsqrt",Rs="ScatterNd",Fs="TensorScatterUpdate",Ds="SearchSorted",_s="Select",Os="Selu",Ms="Slice",Ls="Sin",zs="Sinh",Ps="Sign",Bs="Sigmoid",Ws="Softplus",Vs="Sqrt",Us="Sum",Gs="SpaceToBatchND",Hs="SplitV",js="Softmax",qs="SparseFillEmptyRows",Ks="SparseReshape",Xs="SparseSegmentMean",Ys="SparseSegmentSum",Js="SparseToDense",Zs="SquaredDifference",Qs="Square",er="StaticRegexReplace",tr="StridedSlice",nr="StringNGrams",sr="StringSplit",rr="StringToHashBucketFast",ar="Sub",ir="Tan",or="Tanh",lr="Tile",ur="TopK",cr="Transform",hr="Transpose",dr="Unique",pr="Unpack",fr="UnsortedSegmentSum",mr="UpperBound",gr="ZerosLike",yr="Step",br="FromPixels",xr="RotateWithOffset",wr="_FusedMatMul",vr="FusedConv2D",kr="FusedDepthwiseConv2D";function Ir(){Qe().getBool("IS_TEST")||Qe().getBool("PROD")||console.warn(...arguments)}function Nr(){Qe().getBool("IS_TEST")||Qe().getBool("PROD")||console.log(...arguments)}const Sr=st("kernelRegistry",(()=>new Map)),Tr=st("gradRegistry",(()=>new Map));function Cr(e,t){const n=Or(e,t);return Sr.get(n)}function $r(e){return Tr.get(e)}function Er(e){const t=Sr.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function Ar(e){const{kernelName:t,backendName:n}=e,s=Or(t,n);Sr.has(s)&&Ir(`The kernel '${t}' for backend '${n}' is already registered`),Sr.set(s,e)}function Rr(e){const{kernelName:t}=e;Tr.has(t)&&Qe().getBool("DEBUG")&&Ir(`Overriding the gradient for '${t}'`),Tr.set(t,e)}function Fr(e,t){const n=Or(e,t);if(!Sr.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Sr.delete(n)}function Dr(e){if(!Tr.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Tr.delete(e)}function _r(e,t){Er(e).forEach((e=>{Ar(Object.assign({},e,{backendName:t}))}))}function Or(e,t){return`${t}_${e}`}function Mr(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}var Lr=n(7353);const zr=n.n(Lr)()||Lr;function Pr(e){return zr.fromString(e,!0,16)}const Br=Pr("c3a5c85c97cb3127"),Wr=Pr("b492b66fbe98f273"),Vr=Pr("9ae16a3b2f90404f");function Ur(e){return e.xor(e.shru(47))}function Gr(e,t,n){const s=e.slice(t,t+n);return zr.fromBytes(Array.from(s),!0,!0)}function Hr(e,t){return Gr(e,t,8)}function jr(e,t){return Gr(e,t,4)}function qr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Kr(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Pr("9ddfea08eb382d69"),s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Xr(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=qr(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(qr(r,44)),[r.add(s),a.add(i)]}(Hr(e,t),Hr(e,t+8),Hr(e,t+16),Hr(e,t+24),n,s)}function Yr(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=zr.fromNumber(81,!0);if(t<=32)return t<=16?function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;if(t>=8){const n=Vr.add(2*t),s=Hr(e,0).add(Vr),r=Hr(e,t-8);return Kr(qr(r,37).mul(n).add(s),qr(s,25).add(r).mul(n),n)}if(t>=4){const n=Vr.add(2*t);return Kr(jr(e,0).shl(3).add(t),jr(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return Ur(Vr.mul(n).xor(Br.mul(s))).mul(Vr)}return Vr}(e,t):function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=Vr.add(2*t),s=Hr(e,0).mul(Wr),r=Hr(e,8),a=Hr(e,t-8).mul(n),i=Hr(e,t-16).mul(Vr);return Kr(qr(s.add(r),43).add(qr(a,30)).add(i),s.add(qr(r.add(Vr),18)).add(a),n)}(e,t);if(t<=64)return function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=Vr.add(2*t),s=Hr(e,0).mul(Vr),r=Hr(e,8),a=Hr(e,t-8).mul(n),i=Hr(e,t-16).mul(Vr),o=qr(s.add(r),43).add(qr(a,30)).add(i),l=Kr(o,s.add(qr(r.add(Vr),18)).add(a),n),u=Hr(e,16).mul(n),c=Hr(e,24),h=o.add(Hr(e,t-32)).mul(n),d=l.add(Hr(e,t-24)).mul(n);return Kr(qr(u.add(c),43).add(qr(h,30)).add(d),u.add(qr(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(Wr).add(113),a=Ur(r.mul(Vr).add(113)).mul(Vr),i=[zr.UZERO,zr.UZERO],o=[zr.UZERO,zr.UZERO];s=s.mul(Vr).add(Hr(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=qr(s.add(r).add(i[0]).add(Hr(e,l+8)),37).mul(Wr),r=qr(r.add(i[1]).add(Hr(e,l+48)),42).mul(Wr),s=s.xor(o[1]),r=r.add(i[0]).add(Hr(e,l+40)),a=qr(a.add(o[0]),33).mul(Wr),i=Xr(e,l,i[1].mul(Wr),s.add(o[0])),o=Xr(e,l+32,a.add(o[1]),r.add(Hr(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Wr.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=qr(s.add(r).add(i[0]).add(Hr(e,l+8)),37).mul(h),r=qr(r.add(i[1]).add(Hr(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(Hr(e,l+40))),a=qr(a.add(o[0]),33).mul(h),i=Xr(e,l,i[1].mul(h),s.add(o[0])),o=Xr(e,l+32,a.add(o[1]),r.add(Hr(e,l+16))),[a,s]=[s,a],Kr(Kr(i[0],o[0],h).add(Ur(r).mul(Br)).add(a),Kr(i[1],o[1],h).add(s),h)}function Jr(e,t){return"string"===t?ta(e):Zr([e],t)}function Zr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ra(e)),Qe().getBool("DEBUG")&&$e(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Qr(){return Qe().platform.now()}function ea(e,t){return Qe().platform.fetch(e,t)}function ta(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",Qe().platform.encode(e,t)}function na(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",Qe().platform.decode(e,t)}function sa(e){return null!=Qe().platform.isTypedArray?Qe().platform.isTypedArray(e):Mr(e)}function ra(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==t&&(t=[]),"boolean"===typeof e||"number"===typeof e||"string"===typeof e||Xe(e)||null==e||sa(e)&&n)t.push(e);else if(Array.isArray(e)||sa(e))for(let s=0;s<e.length;++s)ra(e[s],t,n);else{let s=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(s=Math.max(s,Number(t)));for(let r=0;r<=s;r++)ra(e[r],t,n)}return t}class aa{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new oa)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=Qr();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:Qr()-i})}if(Qe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let o=0;o<s.length;o++){const t=s[o];t.data().then((n=>{ia(n,t.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function ia(e,t,n){if("float32"!==t)return!1;for(let s=0;s<e.length;s++){const t=e[s];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class oa{logKernelProfile(e,t,n,s,r,a){const i="number"===typeof s?ve(`${s}ms`,9):s.error,o=ve(e,25),l=t.rank,u=t.size,c=ve(t.shape.toString(),14);let h="";for(const d in r){const e=r[d];if(null!=e){const n=e.shape||t.shape,s=n.length;h+=`${d}: ${s}D ${s>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const la=20,ua=3,ca=7;function ha(e,t,n,s){const r=Pe(t),a=function(e,t,n,s){const r=pe(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?ma(e):e;if(o>1)for(let u=0;u<r/a;u++){const e=u*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],da(l[e+t],0,n).length)}return i}(e,t,n,r),i=t.length,o=fa(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function da(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(ca))} + ${parseFloat(e[1].toFixed(ca))}j`:De(e)?`'${e}'`:"bool"===n?pa(e):parseFloat(e.toFixed(ca)).toString(),ve(s,t)}function pa(e){return 0===e?"false":"true"}function fa(e,t,n,s,r){let a=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[da(ma(e)[0],0,n)]}return"bool"===n?[pa(e[0])]:[e[0].toString()]}if(1===l){if(o>la){const t=ua*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-ua)*i,o*i));return"complex64"===n&&(s=ma(s),a=ma(a)),["["+s.map(((e,t)=>da(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>da(e,r[o-ua+t],n))).join(", ")+"]"]}return["["+("complex64"===n?ma(e):Array.from(e)).map(((e,t)=>da(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,d=[];if(o>la){for(let t=0;t<ua;t++){const s=t*h,a=s+h;d.push(...fa(e.slice(s,a),u,n,c,r,!1))}d.push("...");for(let t=o-ua;t<o;t++){const s=t*h,a=s+h;d.push(...fa(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let m=0;m<o;m++){const t=m*h,s=t+h;d.push(...fa(e.slice(t,s),u,n,c,r,m===o-1))}const p=2===l?",":"";d[0]="["+(o>0?d[0]+p:"");for(let m=1;m<d.length-1;m++)d[m]=" "+d[m]+p;let f=",\n";for(let m=2;m<l;m++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function ma(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class ga{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=pe(e),null!=n){const e=n.length;ce(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||Ce(t,this.size),this.strides=Pe(e)}set(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),s=1;s<t;s++)n[s-1]=arguments[s];0===n.length&&(n=[0]),ce(n.length===this.rank,(()=>`The number of provided coordinates (${n.length}) must match the rank (${this.rank})`));const r=this.locToIndex(n);this.values[r]=e}get(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];0===t.length&&(t=[0]);let s=0;for(const a of t){if(a<0||a>=this.shape[s]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}s++}let r=t[t.length-1];for(let a=0;a<t.length-1;++a)r+=this.strides[a]*t[a];return this.values[r]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ya().makeTensor(this.values,this.shape,this.dtype)}}let ya=null,ba=null,xa=null;class wa{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=pe(e),this.strides=Pe(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ba.buffer(this.shape,this.dtype,e)}bufferSync(){return ba.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return We(this.shape,e,"complex64"===this.dtype)}arraySync(){return We(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=ya().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map((e=>na(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),ya().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=ya().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>na(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await ya().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),ya().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return ba.print(this,e)}clone(){return this.throwIfDisposed(),ba.clone(this)}toString(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return ha(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ba.cast(this,e)}variable(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0;return this.throwIfDisposed(),ya().makeVariable(this,e,t,n)}}function va(){return st("Tensor",(()=>wa))}Object.defineProperty(wa,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),va();class ka extends wa{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!ge(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ya().disposeTensor(this),this.dataId=e.dataId,ya().incRef(this,null)}dispose(){ya().disposeVariable(this),this.isDisposedInternal=!0}}var Ia,Na,Sa,Ta,Ca;Object.defineProperty(ka,Symbol.hasInstance,{value:e=>e instanceof wa&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Ia||(Ia={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Na||(Na={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Sa||(Sa={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Ta||(Ta={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Ca||(Ca={}));const $a={float32:Ta,int32:Na,bool:Sa,complex64:Ca};function Ea(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return $a[e][t]}function Aa(e){return Ea(e,"int32")}function Ra(e){return null!=e&&"object"===typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function Fa(e){return"undefined"!==typeof GPUBuffer&&null!=e&&"object"===typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function Da(e,t){if(e.dtype===t.dtype)return[e,t];const n=Ea(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function _a(e,t){ce(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Oa(e,t){return t.some((t=>t.id===e.id))}function Ma(e){const t=[];return La(e,t,new Set),t}function La(e,t,n){if(null==e)return;if(e instanceof wa)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!==typeof s)return;var s;const r=e;for(const a in r){const e=r[a];n.has(e)||(n.add(e),La(e,t,n))}}function za(e){return null!=e.kernelName}class Pa{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ba{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Pa}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e in this.registryFactory?(Ir(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new aa(this.backendInstance),!0}setupRegisteredKernels(){Er(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Er(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof ee||"function"!==typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Ir(`Initialization of backend ${e} failed`),Ir(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(n){return Ir(`Initialization of backend ${e} failed`),Ir(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!==typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!==typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!==typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(s){throw t(),s}}nextTensorId(){return Ba.nextTensorId++}nextVariableId(){return Ba.nextVariableId++}clone(e){const t=Va.runKernel(vn,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Va.runKernel($t,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Cr(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=za(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(za(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=Cr(t,this.backendName);ce(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=za(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const s=$r(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(ce(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&De(e[0])&&(r=e.map((e=>ta(e))));const a=s.write(r,t,n),i=new wa(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=Fe(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new wa(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,s=arguments.length>3?arguments[3]:void 0;n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new ka(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Re(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ka||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Re(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const s of this.state.activeProfile.kernels)s.kernelTimeMs=await s.kernelTimeMs,s.extraInfo=await s.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=$r(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=Ge(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ma(e),n=new Set(t.map((e=>e.id)));for(let r=0;r<this.state.activeScope.track.length;r++){const e=this.state.activeScope.track[r];e.kept||n.has(e.id)||e.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(ce(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));ce(r instanceof wa,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<e.length;l++){const n=e[l],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(s[i.id]){n.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let l=e.length-1;l>=0;l--){const t=e[l],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let l=0;l<e.length;l++){const t=e[l];if(r[t.id]&&i[t.id]){const e={};for(const r in t.inputs){const n=t.inputs[r];s[n.id]&&(e[r]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=Ue(pe(e),"float32");return Va.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!ge(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Ua);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){var t=this;return ce(Le(e),(()=>"The f passed in customGrad(f) must be a function.")),function(){for(var n=arguments.length,s=new Array(n),r=0;r<n;r++)s[r]=arguments[r];let a;ce(s.every((e=>e instanceof wa)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const i={};s.forEach(((e,t)=>{i[t]=e}));return t.runKernelFunc({forwardFunc:(t,n)=>(a=e(...s,n),ce(a.value instanceof wa,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),ce(Le(a.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),a.value),backwardsFunc:(e,t)=>{const n=a.gradFunc(e,t),r=Array.isArray(n)?n:[n];ce(r.length===s.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),ce(r.every((e=>e instanceof wa)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return r.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:i})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Qr(),n=await this.backend.time(e);return n.wallMs=Qr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Pa;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Wa(){const e=nt();if(null==e._tfengine){const t=new Je(e);e._tfengine=new Ba(t)}var t;return t=e._tfengine.ENV,tt=t,ya=()=>e._tfengine,e._tfengine}Ba.nextTensorId=0,Ba.nextVariableId=0;const Va=Wa();function Ua(e,t){const n={a:e,b:t};return Va.runKernel(ot,n)}let Ga;function Ha(e){Ga=e}function ja(e){if(void 0!==Ga)return Ga;if(e||"undefined"!==typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!==typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function qa(){return"undefined"!==typeof window&&null!=window.document||"undefined"!==typeof WorkerGlobalScope}const Ka=Qe();function Xa(e,t){let n=e;if(sa(e))return"string"===t?[]:[e.length];if(Ra(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(Fa(e))return[e.buffer.size/(null==t?4:Re(t))];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||sa(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&Qe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ya(e,s,[]),s}function Ya(e,t,n){if(n=n||[],!Array.isArray(e)&&!sa(e))return void ce(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));ce(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),ce(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let r=0;r<e.length;++r)Ya(e[r],s,n.concat(r))}function Ja(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Za(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(e instanceof va())return Ja(s,e.dtype,t,n),e;let r=Me(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Ja(s,r,t,n),null==e||!sa(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Xa(e,r);sa(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?Zr(e,r):ra(e,[],!0);return Va.makeTensor(i,a,r)}function Qa(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Za(e,`${t}[${r}]`,n,s)))}Ka.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ka.registerFlag("IS_BROWSER",(()=>qa())),Ka.registerFlag("IS_NODE",(()=>"undefined"!==typeof process&&"undefined"!==typeof process.versions&&"undefined"!==typeof process.versions.node)),Ka.registerFlag("IS_CHROME",(()=>"undefined"!==typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Ka.registerFlag("IS_SAFARI",(()=>"undefined"!==typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),Ka.registerFlag("PROD",(()=>!1)),Ka.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Ka.getBool("DEBUG"))),Ka.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Ka.registerFlag("IS_TEST",(()=>!1)),Ka.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>Ka.getBool("DEBUG"))),Ka.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Ka.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Ka.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const ei="__op";function ti(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=ei;const r=function(){Va.startScope(n);try{const e=s(...arguments);return Xe(e)&&console.error("Cannot return a Promise inside of tidy."),Va.endScope(e),e}catch(e){throw Va.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const ni=ti({complex_:function(e,t){const n=Za(e,"real","complex"),s=Za(t,"imag","complex");he(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Va.runKernel(Rt,r)}});function si(e,t,n,s){if(null==s)s=Me(e);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Fa(e)||Ra(e)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return Va.backend.createTensorFromGPUData(e,t||n,s)}if(!sa(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){je(t);const e=pe(t),s=pe(n);ce(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let r=0;r<n.length;++r){const e=n[r],s=r!==n.length-1||e!==pe(t.slice(r));ce(n[r]===t[r]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return sa(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Zr(e,s):ra(e,[],!0),Va.makeTensor(e,t,s)}function ri(e,t,n){return si(e,t,Xa(e,n),n)}const ai={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class ii{static join(e){return new ii(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map((e=>sa(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const s=e[n];n!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const r=t+s.byteLength;this.shards.push({buffer:s,start:t,end:r}),t=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.byteLength;if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),t=Math.min(this.byteLength,t),t<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const s=new ArrayBuffer(t-e),r=new Uint8Array(s);let a=0;for(let i=n;i<this.shards.length;i++){const n=this.shards[i],s=e+a-n.start,o=a,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer,s,l-s);if(r.set(u,o),a+=u.length,t<n.end)break}return s}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,s=e.length;for(;n<=s;){const r=Math.floor((s-n)/2)+n,a=t(e[r]);if(0===a)return r;a<0?s=r:n=r+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function oi(){Qe().set("PROD",!0)}function li(){Qe().set("DEBUG",!0)}function ui(){Qe().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function ci(e){Qe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function hi(){Va.disposeVariables()}function di(){return Va}function pi(){return Va.memory()}function fi(e){return Va.profile(e)}function mi(e,t){return Va.tidy(e,t)}function gi(e){Ma(e).forEach((e=>e.dispose()))}function yi(e){return Va.keep(e)}function bi(e){return Va.time(e)}function xi(e){return Va.setBackend(e)}function wi(){return Va.ready()}function vi(){return Va.backendName}function ki(e){Va.removeBackend(e)}function Ii(e){return Va.findBackend(e)}function Ni(e){return Va.findBackendFactory(e)}function Si(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Va.registerBackend(e,t,n)}function Ti(){return Va.backend}function Ci(e,t){Qe().setPlatform(e,t)}xa=ci;const $i=4;async function Ei(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+$i*t.length,s=new Uint8Array(n);let r=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);s.set(n,r),r+=$i,s.set(e,r),r+=e.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:Mi(await Promise.all(s)),specs:n}}function Ai(e,t){const n=new ii(e),s={};let r=0;for(const a of t){const e=Ri(a,((e,t)=>n.slice(r+e,r+t)));s[a.name]=Di(a,n.slice(r,r+e)),r+=e}return s}function Ri(e,t){const n=pe(e.shape);let s;if("quantization"in e){const t=e.quantization;s=ai[t.dtype]}else{if("string"===e.dtype){let e=0;for(let s=0;s<n;s++)e+=$i+new Uint32Array(t(e,e+$i))[0];return e}s=ai[e.dtype]}return n*s}async function Fi(e,t){const n=pe(e.shape);let s;if("quantization"in e){const t=e.quantization;s=ai[t.dtype]}else{if("string"===e.dtype){let e=0;for(let s=0;s<n;s++)e+=$i+new Uint32Array(await t(e,e+$i))[0];return e}s=ai[e.dtype]}return n*s}function Di(e,t){const n=e.name,s=e.dtype,r=e.shape,a=pe(r);let i,o=0;if("quantization"in e){const r=e.quantization;if("uint8"===r.dtype||"uint16"===r.dtype){if(!("min"in r)||!("scale"in r))throw new Error(`Weight ${e.name} with quantization ${r.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==r.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${r.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==s)throw new Error(`Weight ${e.name} is quantized with ${r.dtype} which only supports weights of type float32 not ${s}.`)}const l=ai[r.dtype],u="uint8"===r.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===s)if("uint8"===r.dtype||"uint16"===r.dtype){i=new Float32Array(u.length);for(let e=0;e<u.length;e++){const t=u[e];i[e]=t*r.scale+r.min}}else{if("float16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type float32.`);{const e=function(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0===(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let i=0;i<s.length;i++){const r=s[i],o=e[n[r>>10]+(1023&r)]+t[r>>10];a[i]=o}return new Float32Array(r)}}();i=e(u)}}else{if("int32"!==s)throw new Error(`Unsupported dtype in weight '${n}': ${s}`);if("uint8"!==r.dtype&&"uint16"!==r.dtype)throw new Error(`Unsupported quantization type ${r.dtype} for weight type int32.`);i=new Int32Array(u.length);for(let e=0;e<u.length;e++){const t=u[e];i[e]=Math.round(t*r.scale+r.min)}}o+=a*l}else if("string"===s){const n=pe(e.shape);i=[];for(let e=0;e<n;e++){const e=new Uint32Array(t.slice(o,o+$i))[0];o+=$i;const n=new Uint8Array(t.slice(o,o+e));i.push(n),o+=e}}else{const e=ai[s];if("float32"===s)i=new Float32Array(t);else if("int32"===s)i=new Int32Array(t);else{if("bool"!==s){if("complex64"===s){i=new Float32Array(t);const e=new Float32Array(i.length/2),n=new Float32Array(i.length/2);for(let t=0;t<e.length;t++)e[t]=i[2*t],n[t]=i[2*t+1];const s=ri(e,r,"float32"),a=ri(n,r,"float32"),o=ni(s,a);return s.dispose(),a.dispose(),o}throw new Error(`Unsupported dtype in weight '${n}': ${s}`)}i=new Uint8Array(t)}o+=a*e}return ri(i,r,s)}async function _i(e,t,n){let s=new Uint8Array(t);for(;s.byteLength<n;){const{done:t,value:r}=await e.read();if(t&&null==r){const e=n-s.byteLength;throw new Error(`Reader is done but ${e} bytes are still expected`)}const a=new Uint8Array(s.length+r.byteLength);a.set(s,0),a.set(new Uint8Array(r),s.length),s=a}return s.buffer}async function Oi(e,t){const n={},s=e.getReader();let r=new ArrayBuffer(0);for(const a of t){const e=await Fi(a,(async(e,t)=>(r=await _i(s,r,t),r.slice(e,t))));r=await _i(s,r,e);const t=r.slice(0,e);r=r.slice(e);const i=Di(a,t);if(n[a.name]=i,"webgpu"===vi()){const e=Ti();"uploadToGPU"in e&&pe(i.shape)>=Qe().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(i.dataId)}}return n}function Mi(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const Li="undefined"!==typeof Buffer&&("undefined"===typeof Blob||"undefined"===typeof atob||"undefined"===typeof btoa);function zi(e){return Li?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function Pi(e){return ii.join(e)}function Bi(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Wi(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Vi(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(s.initializerSignature=e.initializerSignature),s}async function Ui(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),Vi(e,n,s)}function Gi(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:zi(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:zi(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new ii(e.weightData).byteLength}}function Hi(e){const t=[];for(const n of e)t.push(...n.weights);return t}class ji{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ji.instance&&(ji.instance=new ji),ji.instance}static registerSaveRouter(e){ji.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ji.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ji.getHandlers(e,"save")}static getLoadHandlers(e,t){return ji.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?ji.getInstance().loadRouters:ji.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const qi=e=>ji.registerSaveRouter(e),Ki=e=>ji.registerLoadRouter(e),Xi=e=>ji.getSaveHandlers(e),Yi=(e,t)=>ji.getLoadHandlers(e,t),Ji="tensorflowjs",Zi="models_store",Qi="model_info_store";function eo(){if(!Qe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"===typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function to(e){const t=e.result;t.createObjectStore(Zi,{keyPath:"modelPath"}),t.createObjectStore(Qi,{keyPath:"modelPath"})}class no{constructor(e){if(this.indexedDB=eo(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(Ji,1);s.onupgradeneeded=()=>to(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(Zi,"readonly"),s=t.objectStore(Zi).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{t.weightData=ii.join(t.weightData);const s=Gi(t),i=r.transaction(Qi,"readwrite");let o,l,u=i.objectStore(Qi);try{o=u.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(a){return n(a)}o.onsuccess=()=>{l=r.transaction(Zi,"readwrite");const o=l.objectStore(Zi);let c;try{c=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(a){return n(a)}c.onsuccess=()=>e({modelArtifactsInfo:s}),c.onerror=e=>{u=i.objectStore(Qi);const t=u.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(c.error)),t.onerror=e=>(r.close(),n(c.error))}},o.onerror=e=>(r.close(),n(o.error)),i.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}no.URL_SCHEME="indexeddb://";const so=e=>{return Qe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(no.URL_SCHEME)?(t=e.slice(no.URL_SCHEME.length),new no(t)):null;var t};ji.registerSaveRouter(so),ji.registerLoadRouter(so);class ro{constructor(){this.indexedDB=eo()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Ji,1);n.onupgradeneeded=()=>to(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(Qi,"readonly"),a=r.objectStore(Qi).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(no.URL_SCHEME)?t.slice(no.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(Ji,1);s.onupgradeneeded=()=>to(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(Qi,"readwrite"),i=a.objectStore(Qi),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(Zi,"readwrite");const s=l.objectStore(Zi).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const ao="/",io="tensorflowjs_models",oo="info",lo="model_topology",uo="weight_specs",co="weight_data",ho="model_metadata";function po(e){return{info:[io,e,oo].join(ao),topology:[io,e,lo].join(ao),weightSpecs:[io,e,uo].join(ao),weightData:[io,e,co].join(ao),modelMetadata:[io,e,ho].join(ao)}}function fo(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function mo(e){const t=e.split(ao);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(ao)}class go{constructor(e){if(!Qe().getBool("IS_BROWSER")||"undefined"===typeof window||"undefined"===typeof window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=po(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),s=JSON.stringify(e.weightSpecs),r=Gi(e),a=ii.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,s),this.LS.setItem(this.keys.weightData,function(e){if(Li)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let s=0,r=t.length;s<r;s++)n+=String.fromCharCode(t[s]);return btoa(n)}(a));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:r}}catch(t){throw fo(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Li){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let s=0;s<t.length;++s)n.set([t.charCodeAt(s)],s);return n.buffer}(a),t}}go.URL_SCHEME="localstorage://";const yo=e=>{return Qe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(go.URL_SCHEME)?(t=e.slice(go.URL_SCHEME.length),new go(t)):null;var t};ji.registerSaveRouter(yo),ji.registerLoadRouter(yo);class bo{constructor(){ce(Qe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),ce("undefined"===typeof window||"undefined"!==typeof window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=io+ao,n=ao+oo;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[mo(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=po(e=(t=e).startsWith(go.URL_SCHEME)?t.slice(go.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return fo(n),s}}const xo="://";class wo{constructor(){this.managers={}}static getInstance(){return null==wo.instance&&(wo.instance=new wo),wo.instance}static registerManager(e,t){ce(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(xo)&&(e=e.slice(0,e.indexOf(xo))),ce(e.length>0,(()=>"scheme must not be an empty string."));const n=wo.getInstance();ce(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=wo.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(wo.getInstance().managers)}}function vo(e){if(-1===e.indexOf(xo))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${wo.getSchemes().join(",")}`);return{scheme:e.split(xo)[0],path:e.split(xo)[1]}}async function ko(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];ce(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=ji.getLoadHandlers(e);ce(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),ce(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=ji.getSaveHandlers(t);ce(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),ce(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=vo(e).scheme,l=vo(e).path,u=o===vo(e).scheme,c=await r.load();n&&u&&await wo.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await wo.getManager(o).removeModel(l),h.modelArtifactsInfo}async function Io(){const e=wo.getSchemes(),t={};for(const n of e){const e=await wo.getManager(n).listModels();for(const s in e){t[n+xo+s]=e[s]}}return t}async function No(e){const t=vo(e);return wo.getManager(t.scheme).removeModel(t.path)}async function So(e,t){return ko(e,t,!1)}async function To(e,t){return ko(e,t,!0)}class Co{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!==typeof window&&Qe().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}isTypedArray(e){return Mr(e)}}if(Qe().get("IS_BROWSER")){Qe().setPlatform("browser",new Co);try{wo.registerManager(go.URL_SCHEME,new bo)}catch(Fj){}try{wo.registerManager(no.URL_SCHEME,new ro)}catch(Fj){}}const $o=()=>n(5817);let Eo;class Ao{constructor(){this.util=n(8590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Qe().global.fetch?Qe().global.fetch(e,t):(null==Eo&&(Eo=$o()),Eo(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}}function Ro(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",n=arguments.length>2?arguments[2]:void 0;return t=t||"float32",je(e),new ga(e,t,n)}Qe().get("IS_NODE")&&!Qe().get("IS_BROWSER")&&Qe().setPlatform("node",new Ao);const Fo=ti({cast_:function(e,t){const n=Za(e,"x","cast");if(!Ee(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Va.runKernel($t,s,r)}});const Do=ti({clone_:function(e){const t={x:Za(e,"x","clone","string_or_numeric")};return Va.runKernel(vn,t)}});function _o(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];console.log(e.toString(t))}Wa();ba={buffer:Ro,cast:Fo,clone:Do,print:_o};const Oo=ti({add_:function(e,t){let n=Za(e,"a","add"),s=Za(t,"b","add");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(ot,r)}});const Mo=ti({floorDiv_:function(e,t){let n=Za(e,"a","floorDiv"),s=Za(t,"b","floorDiv");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(mn,r)}});const Lo=ti({div_:function(e,t){let n=Za(e,"a","div"),s=Za(t,"b","div");if([n,s]=Da(n,s),"int32"===n.dtype&&"int32"===s.dtype)return Mo(n,s);const r={a:n,b:s};return Va.runKernel(tn,r,{})}});const zo=ti({mul_:function(e,t){let n=Za(e,"a","mul"),s=Za(t,"b","mul");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(ts,r)}});const Po=ti({sqrt_:function(e){const t={x:Za(e,"x","sqrt","float32")};return Va.runKernel(Vs,t)}});const Bo=ti({square_:function(e){const t=Za(e,"x","square");return Va.runKernel("Square",{x:t},{})}});const Wo=ti({zerosLike_:function(e){const t={x:Za(e,"x","zerosLike")};return Va.runKernel(gr,t)}});function Vo(e){return ce(Le(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=Za(t,"x","tf.grad","string_or_numeric"),r=null!=n?Za(n,"dy","tf.grad"):null;return Va.tidy((()=>{const{value:t,grads:n}=Va.gradients((()=>e(s)),[s],r);return null!=r&&he(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Ko(n),n[0]}))}}function Uo(e){return ce(Le(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{ce(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=Qa(t,"args","tf.grads","string_or_numeric"),r=null!=n?Za(n,"dy","tf.grads"):null;return Va.tidy((()=>{const{value:t,grads:n}=Va.gradients((()=>e(...s)),s,r);return null!=r&&he(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Ko(n),n}))}}function Go(e){return ce(Le(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{ce(t instanceof wa,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),ce(null==n||n instanceof wa,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Va.gradients((()=>e(t)),[t],n);return Ko(s),{grad:s[0],value:r}}}function Ho(e){return ce(Le(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{ce(Array.isArray(t)&&t.every((e=>e instanceof wa)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),ce(null==n||n instanceof wa,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Va.gradients((()=>e(...t)),t,n);return null!=n&&he(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Ko(s.grads),s}}function jo(e,t){ce(Le(e),(()=>"The f passed in variableGrads(f) must be a function")),ce(null==t||Array.isArray(t)&&t.every((e=>e instanceof ka)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Va.registeredVariables)t.push(Va.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;t=t.filter((e=>e.trainable)),ce(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Va.gradients(e,t,null,!0);ce(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),ce(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function qo(e){return Va.customGrad(e)}function Ko(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Xo(e,t){if((sa(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&sa(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return si(e,[],[],t)}const Yo=new Map,Jo=new Map;class Zo{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Qo{constructor(){this.classNameMap={}}static getMap(){return null==Qo.instance&&(Qo.instance=new Qo),Qo.instance}static register(e){Qo.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function el(e,t,n){ce(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),ce("string"===typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),ce(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),"undefined"===typeof t&&(t="Custom"),"undefined"===typeof n&&(n=e.className);const s=t+">"+n;return Qo.register(e),Yo.set(s,e),Jo.set(e,s),e}function tl(e){return Jo.has(e)?Jo.get(e):e.className}class nl extends Zo{minimize(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0;const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return gi(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return jo(e,t)}dispose(){null!=this.iterations_&&gi(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Xo(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(nl,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class sl extends nl{static get className(){return"Adadelta"}constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Va.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t],r=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:mi((()=>Wo(s).variable(r)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:mi((()=>Wo(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;mi((()=>{const e=Oo(zo(i,this.rho),zo(Bo(a),1-this.rho)),t=zo(Lo(Po(Oo(o,this.epsilon)),Po(Oo(i,this.epsilon))),a),n=Oo(zo(o,this.rho),zo(Bo(t),1-this.rho));i.assign(e),o.assign(n);const r=Oo(zo(t,-this.learningRate),s);s.assign(r)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(gi(this.accumulatedGrads.map((e=>e.variable))),gi(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2,n=!1;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function rl(e,t,n){je(e);const s={shape:e,value:t,dtype:n=n||Me(t)};return Va.runKernel(dn,{},s)}class al extends nl{static get className(){return"Adagrad"}constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:mi((()=>rl(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;mi((()=>{const e=Oo(a,Bo(r));a.assign(e);const t=Oo(zo(Lo(r,Po(Oo(e,Va.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&gi(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}const il=ti({pow_:function(e,t){let n=Za(e,"base","pow"),s=Za(t,"exp","pow");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(ds,r)}});const ol=ti({sub_:function(e,t){let n=Za(e,"a","sub"),s=Za(t,"b","sub");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(ar,r)}});class ll extends nl{static get className(){return"Adam"}constructor(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],mi((()=>{this.accBeta1=Xo(t).variable(),this.accBeta2=Xo(n).variable()})),null==s&&(this.epsilon=Va.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);mi((()=>{const n=ol(1,this.accBeta1),s=ol(1,this.accBeta2);t.forEach(((t,r)=>{const a=Va.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:mi((()=>Wo(a).variable(i)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:mi((()=>Wo(a).variable(i)))});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const l=this.accumulatedFirstMoment[r].variable,u=this.accumulatedSecondMoment[r].variable,c=Oo(zo(l,this.beta1),zo(o,1-this.beta1)),h=Oo(zo(u,this.beta2),zo(Bo(o),1-this.beta2)),d=Lo(c,n),p=Lo(h,s);l.assign(c),u.assign(h);const f=Oo(zo(Lo(d,Oo(Po(p),this.epsilon)),-this.learningRate),a);a.assign(f)})),this.accBeta1.assign(zo(this.accBeta1,this.beta1)),this.accBeta2.assign(zo(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&gi(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&gi(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),mi((()=>{this.accBeta1.assign(il(this.beta1,this.iterations_+1)),this.accBeta2.assign(il(this.beta2,this.iterations_+1))}));const t=e.length/2,n=!1;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}const ul=ti({abs_:function(e){const t=Za(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Va.runKernel(Ft,e)}{const e={x:t};return Va.runKernel(rt,e)}}});function cl(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function hl(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function dl(e,t){const n=Math.max(e.length,t.length),s=new Array(n);for(let r=0;r<n;r++){let a=e[e.length-r-1];null==a&&(a=1);let i=t[t.length-r-1];if(null==i&&(i=1),1===a)s[n-r-1]=i;else if(1===i)s[n-r-1]=a;else{if(a!==i){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}s[n-r-1]=a}}return s}const pl=ti({maximum_:function(e,t){let n=Za(e,"a","maximum"),s=Za(t,"b","maximum");[n,s]=Da(n,s),"bool"===n.dtype&&(n=Fo(n,"int32"),s=Fo(s,"int32")),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Un,r)}});class fl extends nl{static get className(){return"Adamax"}constructor(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],mi((()=>{this.iteration=Xo(0).variable(),this.accBeta1=Xo(t).variable()})),null==s&&(this.epsilon=Va.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);mi((()=>{const n=ol(1,this.accBeta1),s=Lo(-this.learningRate,Oo(zo(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Va.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Wo(a).variable(i)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Wo(a).variable(i)});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const l=this.accumulatedFirstMoment[r].variable,u=this.accumulatedWeightedInfNorm[r].variable,c=Oo(zo(l,this.beta1),zo(o,1-this.beta1)),h=zo(u,this.beta2),d=ul(o),p=pl(h,d);l.assign(c),u.assign(p);const f=Oo(zo(Lo(s,n),Lo(c,Oo(p,this.epsilon))),a);a.assign(f)})),this.iteration.assign(Oo(this.iteration,1)),this.accBeta1.assign(zo(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&gi(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&gi(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class ml extends nl{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Va.registeredVariables[t];mi((()=>{const e=Oo(zo(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=yi(Xo(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class gl extends ml{static get className(){return"Momentum"}constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Xo(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:mi((()=>Wo(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&mi((()=>{let e;const t=Oo(zo(this.m,r),a);e=this.useNesterov?Oo(zo(this.c,Oo(a,zo(t,this.m))),s):Oo(zo(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&gi(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class yl extends nl{static get className(){return"RMSProp"}constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Va.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:mi((()=>Wo(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:mi((()=>Wo(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:mi((()=>Wo(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;mi((()=>{const e=Oo(zo(i,this.decay),zo(Bo(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=Oo(zo(t,this.decay),zo(a,1-this.decay)),l=Lo(zo(a,this.learningRate),Po(ol(e,Oo(Bo(r),this.epsilon)))),u=Oo(zo(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=ol(s,u);s.assign(c)}else{const e=Oo(zo(i,this.decay),zo(Bo(a),1-this.decay)),t=Oo(zo(o,this.momentum),Lo(zo(a,this.learningRate),Po(Oo(e,this.epsilon))));i.assign(e),o.assign(t);const n=ol(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&gi(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&gi(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&gi(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const bl=[sl,al,ll,fl,gl,yl,ml];function xl(e){return new Promise((e=>setTimeout(e))).then(e)}class wl{constructor(e){if(!Qe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(wl.URL_SCHEME)&&(e=e.slice(wl.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"===typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=ii.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=Wi(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await xl((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await xl((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Gi(e)}}}}wl.URL_SCHEME="downloads://";class vl{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=Ui(s,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const a of e)t.push(...a.weights),n.push(...a.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(r).then((e=>[t,e]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Bi(e.name))),s={};for(const r of e)r.paths.forEach((e=>{const r=Bi(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function kl(e){return new vl(e)}function Il(e,t,n,s){!function(e){ce(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){ce(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),ce(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),ce(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function Nl(e,t){null==t&&(t={});const n=null==t.fetchFunc?Qe().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Il(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Il(r,t.onProgress,.5,1)}async function Sl(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,s=arguments.length>3?arguments[3]:void 0;return Tl((e=>Nl(e,{requestInit:s})))(e,t,n)}function Tl(e){return async function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",s=arguments.length>2?arguments[2]:void 0;const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=ai[l]*pe(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let d=0;return l.forEach((e=>{const n=t[e].paths.length,s=new ii(c.slice(d,d+n));a[e].forEach((e=>{const t=Ai(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)h[n]=t[n]})),d+=n})),h}}ji.registerSaveRouter((e=>Qe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(wl.URL_SCHEME)?function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"model";return new wl(e)}(e.slice(wl.URL_SCHEME.length)):null));class Cl{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ce("function"===typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Qe().platform.fetch,ce(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&ce(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Wi(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=ii.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:Gi(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async loadModelJSON(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(r){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){if(this.loadOptions.streamWeights)return this.loadStream();return Ui(await this.loadModelJSON(),(e=>this.loadWeights(e)))}async loadStream(){const e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),n=Hi(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:n,getWeightStream:()=>function(e,t){var n;const s=null==t.fetchFunc?Qe().platform.fetch:t.fetchFunc;let r,a=0;return null===(n=t.onProgress)||void 0===n||n.call(t,0),new ReadableStream({pull:async n=>{for(var i;a<e.length;){if(!r){const n=(await s(e[a],t.requestInit,{isBinary:!0})).body;r=n.getReader()}const{done:o,value:l}=await r.read();if(!o)return void n.enqueue(l);a++,r=void 0,null===(i=t.onProgress)||void 0===i||i.call(t,a/e.length)}n.close()}})}(t,this.loadOptions)})}async getWeightUrls(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(t),r=this.weightPathPrefix||n,a=[],i=[];for(const o of e)for(const e of o.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):a.push(r+e+s);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){const t=await this.getWeightUrls(e);return[Hi(e),await Nl(t,this.loadOptions)]}}function $l(e){return null!=e.match(Cl.URL_SCHEME_REGEX)}Cl.URL_SCHEME_REGEX=/^https?:\/\//;const El=(e,t)=>{if("undefined"===typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>$l(e))):$l(e),n)return Al(e,t)}return null};function Al(e,t){return new Cl(e,t)}function Rl(e,t){return Al(e,t)}ji.registerSaveRouter(El),ji.registerLoadRouter(El);class Fl{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Dl{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class _l{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ol(e,t,n,s){return new _l(Ml(...arguments))}function Ml(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Fl(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Fl({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Fl({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})}function Ll(e){return new Dl(e)}function zl(e){return new Dl(e)}const Pl=ti({matMul_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=Za(e,"a","matMul"),a=Za(t,"b","matMul");[r,a]=Da(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Va.runKernel(kt,i,o)}});const Bl=ti({oneHot_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"int32";if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Za(e,"indices","oneHot","int32")},i={dtype:r,depth:t,onValue:n,offValue:s};return Va.runKernel(ls,a,i)}});const Wl=ti({imag_:function(e){const t={input:Za(e,"input","imag")};return Va.runKernel(In,t)}});const Vl=ti({neg_:function(e){const t={x:Za(e,"x","neg")};return Va.runKernel(ns,t)}});const Ul=ti({real_:function(e){const t={input:Za(e,"input","real")};return Va.runKernel(xs,t)}});const Gl=ti({transpose_:function(e,t,n){const s=Za(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),ce(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{ce(e>=0&&e<s.rank,(()=>"All entries in 'perm' must be between 0 and "+(s.rank-1)+` but got ${t}`))})),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?mi((()=>{let e=Ul(s),t=Wl(s);return e=Va.runKernel(hr,{x:e},a),t=Va.runKernel(hr,{x:t},a),n&&(t=Vl(t)),ni(e,t)})):Va.runKernel(hr,r,a)}});const Hl=ti({confusionMatrix_:function(e,t,n){const s=Za(e,"labels","confusionMatrix"),r=Za(t,"predictions","confusionMatrix");ce(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),ce(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),ce(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),ce(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),ce(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=Bl(Fo(s,"int32"),n),i=Bl(Fo(r,"int32"),n),o=Gl(a),l=Pl(o,i);return Fo(l,"int32")}});function jl(e,t,n){if(de(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Xa(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return si(e,t,s,n)}let ql,Kl=!1;function Xl(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!==typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!==typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!==typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!==typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=Cr(br,Va.backendName)){const n={pixels:e},s={numChannels:t};return Va.runKernel(br,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||o){if(null==ql)if("undefined"===typeof document){if("undefined"===typeof OffscreenCanvas||"undefined"===typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");ql=new OffscreenCanvas(1,1).getContext("2d")}else ql=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});ql.canvas.width=l,ql.canvas.height=u,ql.drawImage(e,0,0,l,u),c=ql.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return jl(h,[u,l,t],"int32")}function Yl(e){return"undefined"!==typeof window&&"undefined"!==typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function Jl(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=null;if(Qe().getBool("WRAP_TO_IMAGEBITMAP")&&Yl(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(s){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Xl(n,t)}function Zl(e){if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function Ql(e,t){let n=Za(e,"img","toPixels");if(!(e instanceof wa)){const e=n;n=Fo(e,"int32"),e.dispose()}Zl(n);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2],i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let u=0;u<s*r;++u){const e=[0,0,0,255];for(let s=0;s<a;s++){const t=i[u*a+s];if("float32"===n.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===a?(e[0]=t*o,e[1]=t*o,e[2]=t*o):e[s]=t*o}const t=4*u;l[t+0]=Math.round(e[0]),l[t+1]=Math.round(e[1]),l[t+2]=Math.round(e[2]),l[t+3]=Math.round(e[3])}if(null!=t){if(!Kl){null!=Cr(en,Va.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),Kl=!0)}t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}function eu(e,t,n){let s=Za(e,"img","draw");if(!(e instanceof wa)){const e=s;s=Fo(e,"int32"),e.dispose()}Zl(s),function(e){const t=(null===e||void 0===e?void 0:e.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null===n||void 0===n?void 0:n.imageOptions);const r={image:s},a={canvas:t,options:n};Va.runKernel(en,r,a)}const tu=ti({fromPixels_:Xl});function nu(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===pe(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let h=0;h<r.length-1;++h)i*=r[h];const o=e.shape,l=r.slice();l.pop();let u=1;for(let h=a;h<n;++h)u*=o[h],l.push(o[h]);const c=[...Pe(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}function su(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let i=0;i<r;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-r;++i)if(n.shape[i+r]!==e[i+s])throw new Error(a+` updates.shape[${i+r}] (${n.shape[i+r]}) != shape[${i+r}] (${e[i+r]})`)}function ru(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}su(n,t,e)}function au(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let l=r;l<a;++l)i*=n[l];const o=r<1?1:r;return{sliceRank:r,numUpdates:pe(t.shape)/o,sliceSize:i,strides:[...Pe(n.slice(0,r)),1],outputSize:pe(n)}}const iu=-2,ou=-1;function lu(e,t,n){const s=e.shape.length;ce(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),ce(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)ce(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function uu(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function cu(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function hu(e,t,n,s){const r=[...e];for(let a=r.length;a<s.length;a++)r.push(1);for(let a=0;a<n;a++)0===a?r[t]=1:(r.splice(t,0,1),r.pop());return r}function du(e,t,n){return n<=e?n:n-(t-1)}function pu(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function fu(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=mu(i,l,u,s,e),h=gu(o,l,u,r,e),d=hu(a,l,u,e)}else for(let p=0;p<u;p++)c[p]=bu(i,s,a,e,p,l),h[p]=xu(o,r,a,e,p,l),d[p]=yu(a,p,l);return{begin:c,end:h,strides:d}}function mu(e,t,n,s,r){const a=[...r],i=pu(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const r=du(t,n,o);let i=s[r];e&1<<r&&(i=0),a[o]=i}return a}function gu(e,t,n,s,r){const a=[...r],i=pu(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const r=du(t,n,o);let i=s[r];e&1<<r&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=r[o];a[o]<0&&(a[o]+=e),a[o]=re(0,a[o],r[o])}return a}function yu(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function bu(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=re(0,i,l-1),i}function xu(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?re(0,i,l):re(-1,i,l-1),i}function wu(e,t,n){let s=n.length;for(let r=0;r<n.length;r++)if(n[r]>1){s=r;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function vu(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function ku(e,t,n){let s;const r=e.shape.length;let a;return s="number"===typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{ce(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"===typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(ce(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Iu(e,t,n,s,r,a,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!==(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let b=0;b<h.dims;b++)c&&0!==(1<<b&o)&&h.numAddAxisAfterEllipsis++,1<<b&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(iu),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(ou),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,d);let p=!0,f=!0,m=!0;const g=[],y=[];for(let b=0;b<e.length;++b){if(0===d.strides[b])throw Error(`strides[${b}] must be non-zero`);const t=!!(d.shrinkAxisMask&1<<b),n=e[b];if(-1===n){g.push(t?1:-1);continue}const s=[d.beginMask&1<<b,d.endMask&1<<b],r=[d.strides[b]>0?0:-1,d.strides[b]>0?n:n-1];if(t&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[b];const a=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(t){const e=d.begin[b]<0?n+d.begin[b]:d.begin[b];if(d.begin[b]=e,d.end[b]=d.begin[b]+1,e<0||e>=n)throw Error(`slice index ${d.begin[b]} of dimension ${b} out of bounds.`)}else d.begin[b]=Nu(d.begin[b],0,d.strides[b],n,s,r),d.end[b]=Nu(d.end[b],1,d.strides[b],n,s,r);const e=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===n;p=p&&e,f=f&&(0===b&&1===d.strides[b]||e)}else p=p&&1===d.strides[b]&&a,f=f&&(0===b&&1===d.strides[b]||a);let i,o=!1;if(d.beginValid&&d.endValid?(i=d.end[b]-d.begin[b],o=!0):t?(i=1,o=!0):a&&n>=0&&(i=d.strides[b]<0?-n:n,o=!0),o){let e;e=0===i||i<0!==d.strides[b]<0?0:Math.trunc(i/d.strides[b])+(i%d.strides[b]!==0?1:0),g.push(e)}else g.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const e=d.finalShapeGatherIndices[b];e>=0?y.push(g[e]):e===iu&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>d.finalShapeGatherIndices[t]!==iu)),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function Nu(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}const Su=.001,Tu=.1;function Cu(e,t,n){return null==n&&(n=$u()),Eu(e,t,((e,t)=>Du(e,t,n)))}function $u(){return 32===Va.backend.floatPrecision()?Su:Tu}function Eu(e,t,n){let s=!0;if((sa(e)||sa(t))&&(s=!1),sa(e)&&sa(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Xa(e),s=Xa(t);if(!ge(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=sa(e)?e:ra(e),a=sa(t)?t:ra(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let i=0;i<a.length;++i){const e=r[i],t=a[i];if(!n(e,t))throw new Error(`Arrays differ: actual[${i}] = ${e}, expected[${i}] = ${t}.\nActual:   ${r}.\nExpected: ${a}.`)}"undefined"!==typeof expect&&expect().nothing()}function Au(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!==typeof expect&&expect().nothing()}function Ru(e,t){const n="string"===typeof t||"number"===typeof t||"boolean"===typeof t?[t]:t;return De(e)||De(e[0])||De(t)||De(t[0])?Eu(e,n,((e,t)=>e==t)):Eu(e,t,((e,t)=>Du(e,t,0)))}function Fu(e,t,n){if(null==n&&(n=$u()),!Du(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!==typeof expect&&expect().nothing()}function Du(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function _u(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function Ou(e,t){const n=new Float32Array(e),s=new Float32Array(t);if(n.length!==s.length)throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${n.length}`);for(let r=0;r<s.length;r++)if(n[r]!==s[r])throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${n[r]} instead`)}function Mu(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Mu(n):e[t]=ta(n)}return e}function Lu(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function zu(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}const Pu="4.22.0";class Bu{static sgd(e){return new ml(e)}static momentum(e,t){return new gl(e,t,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}static rmsprop(e){return new yl(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]&&arguments[4])}static adam(){return new ll(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null)}static adadelta(){return new sl(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.95,arguments.length>2&&void 0!==arguments[2]?arguments[2]:null)}static adamax(){return new fl(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.002,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]?arguments[4]:0)}static adagrad(e){return new al(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1)}}const Wu=ti({acos_:function(e){const t={x:Za(e,"x","acos")};return Va.runKernel(at,t)}});const Vu=ti({acosh_:function(e){const t={x:Za(e,"x","acosh")};return Va.runKernel(it,t)}});const Uu=ti({addN_:function(e){ce(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),ce(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Za(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!ge(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Va.runKernel(lt,s)}});const Gu=ti({all_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const s={x:Za(e,"x","all","bool")},r={axis:t,keepDims:n};return Va.runKernel(ut,s,r)}});const Hu=ti({any_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const s={x:Za(e,"x","any","bool")},r={axis:t,keepDims:n};return Va.runKernel(ct,s,r)}});const ju=ti({argMax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:Za(e,"x","argMax")},s={axis:t};return Va.runKernel(ht,n,s)}});const qu=ti({argMin_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:Za(e,"x","argMin")},s={axis:t};return Va.runKernel(dt,n,s)}});const Ku=ti({asin_:function(e){const t={x:Za(e,"x","asin")};return Va.runKernel(pt,t)}});const Xu=ti({asinh_:function(e){const t={x:Za(e,"x","asinh")};return Va.runKernel(ft,t)}});const Yu=ti({atan_:function(e){const t={x:Za(e,"x","atan")};return Va.runKernel(mt,t)}});const Ju=ti({atan2_:function(e,t){let n=Za(e,"a","atan2"),s=Za(t,"b","atan2");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(yt,r)}});const Zu=ti({atanh_:function(e){const t={x:Za(e,"x","atanh")};return Va.runKernel(gt,t)}});function Qu(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",a=arguments.length>5?arguments[5]:void 0;return nc(e,[...t,e[3]],n,a,s,null,null,dc(r))}function ec(e,t,n,s,r,a){let i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast";const[o,l]=ac(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return nc(e,u,n,s,r,a,!1,i)}function tc(e,t,n,s,r,a){let i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NDHWC";const[o,l,u]=ic(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return sc(e,c,n,s,r,!1,h,a)}function nc(e,t,n,s,r,a){let i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"channelsLast",[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[d,p,,f]=t,[m,g]=ac(n),[y,b]=ac(s),x=oc(d,y),w=oc(p,b),{padInfo:v,outHeight:k,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"===typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=rc(e,t,n));const a=e[0],i=e[1],o=lc((a-t+2*s)/n+1,r),l=lc((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),d=e-l,p=Math.floor(o/2);u={top:l,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!==typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===l?e[1][0]:e[2][0],p="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=lc((t-a+d+p)/s+1,o),h=lc((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[l,N,k,I]:"channelsLast"===o&&(S=[l,k,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:k,outWidth:I,outChannels:N,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function sc(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]&&arguments[5],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast",o=arguments.length>7?arguments[7]:void 0,[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,d]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,d,u,c,h]=e}const[p,f,m,,g]=t,[y,b,x]=ic(n),[w,v,k]=ic(s),I=oc(p,w),N=oc(f,v),S=oc(m,k),{padInfo:T,outDepth:C,outHeight:$,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,d,p,f;"valid"===e&&(e=0);if("number"===typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,s,r,a){null==r&&(r=rc(e,t[0],s[0]));const i=[0,0,0,n];for(let o=0;o<3;o++)e[o]+2*r>=t[o]&&(i[o]=lc((e[o]-t[o]+2*r)/s[o]+1,a));return i}([t,n,s,1],[o,l,u],1,[r,a,i],e,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{d=Math.ceil(t/r),p=Math.ceil(n/a),f=Math.ceil(s/i);const e=(d-1)*r+o-t,c=(p-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,b,x,I,N,S,o),A=a?g*d:g;let R;return"channelsFirst"===i?R=[l,A,C,$,E]:"channelsLast"===i&&(R=[l,C,$,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:C,outHeight:$,outWidth:E,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:R,filterShape:t}}function rc(e,t,n){const s=oc(t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:1);return Math.floor((e[0]*(n-1)-n+s)/2)}function ac(e){return"number"===typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function ic(e){return"number"===typeof e?[e,e,e]:e}function oc(e,t){return t<=1?e:e+(e-1)*(t-1)}function lc(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function uc(e){const[t,n,s]=ac(e);return 1===t&&1===n&&1===s}function cc(e,t){return uc(e)||uc(t)}function hc(e){return ac(e).every((e=>e>0))}function dc(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function pc(e,t,n){if(null!=n){if("string"===typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"===typeof t)ce(ye(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!==typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{ce(ye(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const fc=ti({reshape_:function(e,t){const n={x:Za(e,"x","reshape","string_or_numeric")},s={shape:t};return Va.runKernel(ks,n,s)}});const mc=ti({avgPool_:function(e,t,n,s,r){const a=Za(e,"x","avgPool","float32");ce(cc(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=fc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ce(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),pc("avgPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Va.runKernel(bt,l,u);return c=Fo(c,a.dtype),o?fc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const gc=ti({avgPool3d_:function(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const i=Za(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=fc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ce(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),ce("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),ce("number"===typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),pc("avgPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=Va.runKernel(wt,u,c);return h=Fo(h,o.dtype),l?fc(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const yc=ti({concat_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;ce(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Qa(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Do(n[0]);const s=n,r={axis:t};return Va.runKernel(Dt,s,r)}});const bc=ti({sigmoid_:function(e){const t={x:Za(e,"x","sigmoid","float32")};return Va.runKernel(Bs,t)}});const xc=ti({slice_:function(e,t,n){const s=Za(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Va.runKernel(Ms,r,a)}});const wc=ti({tanh_:function(e){const t={x:Za(e,"x","tanh","float32")};return Va.runKernel(or,t)}});const vc=ti({basicLSTMCell_:function(e,t,n,s,r,a){const i=Za(e,"forgetBias","basicLSTMCell"),o=Za(t,"lstmKernel","basicLSTMCell"),l=Za(n,"lstmBias","basicLSTMCell"),u=Za(s,"data","basicLSTMCell"),c=Za(r,"c","basicLSTMCell"),h=Za(a,"h","basicLSTMCell"),d=yc([u,h],1),p=Pl(d,o),f=Oo(p,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=xc(f,[0,0],y),x=xc(f,[0,g],y),w=xc(f,[0,2*g],y),v=xc(f,[0,3*g],y),k=Oo(zo(bc(b),wc(x)),zo(c,bc(Oo(i,w))));return[k,zo(wc(k),bc(v))]}});const kc=ti({batchToSpaceND_:function(e,t,n){const s=Za(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));ce(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),ce(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),ce(s.shape[0]%r===0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Va.runKernel(It,a,i)}});const Ic=ti({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Za(e,"x","batchNorm"),o=Za(t,"mean","batchNorm"),l=Za(n,"variance","batchNorm");let u,c;null!=r&&(u=Za(r,"scale","batchNorm")),null!=s&&(c=Za(s,"offset","batchNorm")),ce(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ce(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ce(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?fc(e,[1,1,1,e.size]):2===e.rank?fc(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?fc(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},p=Va.runKernel(gn,h,d);return fc(p,i.shape)}});const Nc=ti({batchNorm2d_:function(e,t,n,s,r,a){const i=Za(e,"x","batchNorm"),o=Za(t,"mean","batchNorm"),l=Za(n,"variance","batchNorm");let u,c;return null!=r&&(u=Za(r,"scale","batchNorm")),null!=s&&(c=Za(s,"offset","batchNorm")),ce(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),ce(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),ce(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&ce(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&ce(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Ic(i,o,l,c,u,a)}});const Sc=ti({batchNorm3d_:function(e,t,n,s,r,a){const i=Za(e,"x","batchNorm"),o=Za(t,"mean","batchNorm"),l=Za(n,"variance","batchNorm");let u,c;return null!=r&&(u=Za(r,"scale","batchNorm")),null!=s&&(c=Za(s,"offset","batchNorm")),ce(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),ce(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),ce(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&ce(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&ce(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Ic(i,o,l,c,u,a)}});const Tc=ti({batchNorm4d_:function(e,t,n,s,r,a){const i=Za(e,"x","batchNorm"),o=Za(t,"mean","batchNorm"),l=Za(n,"variance","batchNorm");let u,c;return null!=r&&(u=Za(r,"scale","batchNorm")),null!=s&&(c=Za(s,"offset","batchNorm")),ce(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),ce(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),ce(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&ce(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&ce(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Ic(i,o,l,c,u,a)}});const Cc=ti({bincount_:function(e,t,n){const s=Za(e,"x","bincount"),r=Za(t,"weights","bincount");ce("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),ce(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ce(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Va.runKernel(Nt,a,i)}});const $c=ti({bitwiseAnd_:function(e,t){const n=Za(e,"x","bitwiseAnd"),s=Za(t,"y","bitwiseAnd");if(!ge(n.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${s.shape}`);if("int32"!==n.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${s.dtype}`);const r={a:n,b:s};return Va.runKernel(St,r)}});const Ec=ti({broadcastArgs_:function(e,t){const n=Za(e,"s0","broadcastArgs","int32"),s=Za(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return Va.runKernel(Ct,r)}});const Ac=ti({broadcastTo_:function(e,t){let n=Za(e,"broadcastTo","x");const s=n.shape;if(je(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=fc(n,e)}const r=n.shape,a=Array.from(t);for(let l=t.length-1;l>=0;l--)if(r[l]===t[l])a[l]=1;else if(1!==n.shape[l])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Do(n);const i={x:n},o={reps:a};return Va.runKernel(lr,i,o)}});const Rc=ti({ceil_:function(e){const t={x:Za(e,"x","ceil","float32")};return Va.runKernel(Et,t)}});const Fc=ti({clipByValue_:function(e,t,n){const s=Za(e,"x","clipByValue");if(ce(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return rl(s.shape,t,s.dtype);const r={x:s},a={clipValueMin:t,clipValueMax:n};return Va.runKernel(At,r,a)}});const Dc=ti({concat1d_:function(e){return yc(e,0)}});const _c=ti({concat2d_:function(e,t){return yc(e,t)}});const Oc=ti({concat3d_:function(e,t){return yc(e,t)}});const Mc=ti({concat4d_:function(e,t){return yc(e,t)}});const Lc=ti({conv2d_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],i=arguments.length>6?arguments[6]:void 0;const o=Za(e,"x","conv2d","float32"),l=Za(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=fc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ce(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),ce(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),pc("conv2d",s,i);const h="NHWC"===r?u.shape[3]:u.shape[1];ce(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),ce(cc(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ce(hc(a),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),ce(hc(n),(()=>"Error in conv2D: Strides should be larger than 0."));const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Va.runKernel(_t,d,p);return c?fc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const zc=ti({conv1d_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,i=arguments.length>6?arguments[6]:void 0;const o=Za(e,"x","conv1d"),l=Za(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=fc(o,[1,o.shape[0],o.shape[1]])),ce(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),ce(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),pc("conv1d",s,i),ce(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),ce(cc(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),ce(hc(a),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),ce(hc(n),(()=>"Error in conv1D: Stride should be larger than 0.")),ce("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=fc(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=fc(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p=Lc(d,h,[1,n],s,"NHWC",[1,a],i);return fc(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}});const Pc=ti({conv2DBackpropInput_:function(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",i=arguments.length>6?arguments[6]:void 0;ce(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=fc(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),ce(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),ce(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),ce(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];ce(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),ce(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),pc("conv2dDerInput",r,i);const d={dy:l,filter:n},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Va.runKernel(Mt,d,p);return u?fc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Bc=ti({conv2dTranspose_:function(e,t,n,s,r,a){const i=Za(e,"x","conv2dTranspose"),o=Za(t,"filter","conv2dTranspose");return Pc(n,i,o,s,r,"NHWC",a)}});const Wc=ti({conv3d_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NDHWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1,1];const i=Za(e,"x","conv3d"),o=Za(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=fc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ce(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),ce(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),ce(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),ce(cc(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ce("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`)),ce(hc(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),ce(hc(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},d=Va.runKernel(Lt,c,h);return u?fc(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Vc=ti({conv3DBackpropInput_:function(e,t,n,s,r){ce(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=fc(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];ce(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),ce(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),ce(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),ce(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),ce(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},d=Va.runKernel(Pt,c,h);return o?fc(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Uc=ti({conv3dTranspose_:function(e,t,n,s,r){const a=Za(e,"x","conv3dTranspose"),i=Za(t,"filter","conv3dTranspose");return Vc(n,a,i,s,r)}});const Gc=ti({cos_:function(e){const t={x:Za(e,"x","cos","float32")};return Va.runKernel(Bt,t)}});const Hc=ti({cosh_:function(e){const t={x:Za(e,"x","cosh","float32")};return Va.runKernel(Wt,t)}});const jc=ti({cumprod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r={x:Za(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:s};return Va.runKernel(Vt,r,a)}});const qc=ti({cumsum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r={x:Za(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Va.runKernel(Ut,r,a)}});const Kc=ti({denseBincount_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=Za(e,"x","denseBincount"),a=Za(t,"weights","denseBincount");ce("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),ce(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),ce(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ce(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Va.runKernel(Ht,i,o)}});const Xc=ti({depthToSpace_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"NHWC";const s=Za(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];ce(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),ce(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),ce(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),ce(i%(t*t)===0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Va.runKernel(jt,o,l)}});const Yc=ti({depthwiseConv2d_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],i=arguments.length>6?arguments[6]:void 0;const o=Za(e,"x","depthwiseConv2d","float32"),l=Za(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=fc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ce(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),ce(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];ce(h===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`)),pc("depthwiseConv2d",s,i);const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Va.runKernel(qt,d,p);return c?fc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Jc=ti({diag_:function(e){const t={x:Za(e,"x","diag")};return Va.runKernel(Yt,t)}});const Zc=ti({dilation2d_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[1,1],a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC";const i=Za(e,"x","dilation2d"),o=Za(t,"filter","dilation2d");ce(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),ce(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),ce("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=fc(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0),ce(l.shape[3]===o.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`));const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},d=Va.runKernel(Jt,c,h);return u?fc(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Qc=ti({equal_:function(e,t){let n=Za(e,"a","equal","string_or_numeric"),s=Za(t,"b","equal","string_or_numeric");[n,s]=Da(n,s),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(on,r)}});const eh=ti({where_:function(e,t,n){const s=Za(t,"a","where"),r=Za(n,"b","where"),a=Za(e,"condition","where","bool"),i=dl(dl(a.shape,s.shape),r.shape),o={condition:Ac(a,i),t:Ac(s,i),e:Ac(r,i)};return Va.runKernel(_s,o)}});const th=ti({divNoNan_:function(e,t){let n=Za(e,"a","div"),s=Za(t,"b","div");[n,s]=Da(n,s);const r=Lo(n,s),a=Wo(r),i=Qc(s,a);return eh(i,a,r)}});const nh=ti({dot_:function(e,t){const n=Za(e,"t1","dot"),s=Za(t,"t2","dot");ce((1===n.rank||2===n.rank)&&(1===s.rank||2===s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(ce(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=fc(n,[1,-1]),t=fc(s,[-1,1]),r=Pl(e,t);return fc(r,[])}if(1===n.rank&&2===s.rank){const e=fc(n,[1,-1]),t=fc(s,[s.shape[0],s.shape[1]]),r=Pl(e,t);return fc(r,[r.size])}if(2===n.rank&&1===s.rank){const e=fc(s,[-1,1]),t=Pl(n,e);return fc(t,[t.size])}{const e=fc(s,[s.shape[0],s.shape[1]]);return Pl(n,e)}}});const sh=ti({einsum_:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),s=1;s<t;s++)n[s-1]=arguments[s];const r=n.map(((e,t)=>Za(e,`tensors${t}`,"einsum"))),a={equation:e};return Va.runKernel(nn,r,a)}});const rh=ti({elu_:function(e){const t={x:Za(e,"x","elu","float32")};return Va.runKernel(sn,t)}});const ah=ti({ensureShape_:function(e,t){const n=Za(e,"x","ensureShape","string_or_numeric");if(!me(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}});const ih=ti({erf_:function(e){let t=Za(e,"x","erf");ce("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Fo(t,"float32"));const n={x:t};return Va.runKernel(an,n)}});function oh(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function lh(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function uh(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function ch(e,t){return lh(e,t.map((e=>1)),t)}function hh(e,t,n){ce(oh(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function dh(e,t){if(oh(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function ph(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function fh(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const mh=ti({max_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const s={x:Za(e,"x","max")},r={reductionIndices:t,keepDims:n};return Va.runKernel(Vn,s,r)}});const gh=ti({min_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const s={x:Za(e,"x","min")},r={axis:t,keepDims:n};return Va.runKernel(Yn,s,r)}});const yh=ti({sum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=Za(e,"x","sum");"bool"===s.dtype&&(s=Fo(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Va.runKernel(Us,r,a)}});function bh(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(0===e.rank)return ul(e);if(1!==e.rank&&null===n)return bh(fc(e,[-1]),t,n);if(1===e.rank||"number"===typeof n||Array.isArray(n)&&1===n.length){if(1===t)return yh(ul(e),n);if(t===1/0)return mh(ul(e),n);if(t===-1/0)return gh(ul(e),n);if("euclidean"===t||2===t)return Po(yh(il(ul(e),Xo(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return mh(yh(ul(e),n[0]),n[1]-1);if(t===1/0)return mh(yh(ul(e),n[1]),n[0]);if(t===-1/0)return gh(yh(ul(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Po(yh(Bo(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const xh=ti({norm_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"euclidean",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=bh(e=Za(e,"x","norm"),t,n);let a=r.shape;if(s){const t=Ne(n,e.shape);a=ch(r.shape,t)}return fc(r,a)}});const wh=ti({euclideanNorm_:function(e){return xh(e,"euclidean",arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}});const vh=ti({exp_:function(e){const t={x:Za(e,"x","exp")};return Va.runKernel(ln,t)}});const kh=ti({expandDims_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Za(e,"x","expandDims","string_or_numeric");ce(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Va.runKernel(un,s,r)}});const Ih=ti({expm1_:function(e){const t={x:Za(e,"x","expm1")};return Va.runKernel(cn,t)}});const Nh=ti({tile_:function(e,t){const n=Za(e,"x","tile","string_or_numeric");ce(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Va.runKernel(lr,s,r)}});const Sh=ti({eye_:function(e,t,n){null==t&&(t=e);const s=Ro([e,t],arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32"),r=e<=t?e:t;for(let i=0;i<r;++i)s.set(1,i,i);const a=fc(s.toTensor(),[e,t]);if(null==n)return a;if(1===n.length)return Nh(kh(a,0),[n[0],1,1]);if(2===n.length)return Nh(kh(kh(a,0),0),[n[0],n[1],1,1]);if(3===n.length)return Nh(kh(kh(kh(a,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Th=ti({floor_:function(e){const t={x:Za(e,"x","floor","float32")};return Va.runKernel(fn,t)}});const Ch=ti({gather_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const r={x:Za(e,"x","gather"),indices:Za(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Va.runKernel(yn,r,a)}});const $h=ti({greater_:function(e,t){let n=Za(e,"a","greater","string_or_numeric"),s=Za(t,"b","greater","string_or_numeric");[n,s]=Da(n,s),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(xn,r)}});const Eh=ti({greaterEqual_:function(e,t){let n=Za(e,"a","greaterEqual","string_or_numeric"),s=Za(t,"b","greaterEqual","string_or_numeric");[n,s]=Da(n,s),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(wn,r)}});const Ah=ti({isFinite_:function(e){const t={x:Za(e,"x","isFinite")};return Va.runKernel(Nn,t)}});const Rh=ti({isInf_:function(e){const t={x:Za(e,"x","isInf")};return Va.runKernel(Sn,t)}});const Fh=ti({isNaN_:function(e){const t={x:Za(e,"x","isNaN")};return Va.runKernel(Tn,t)}});const Dh=ti({leakyRelu_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.2;const n={x:Za(e,"x","leakyRelu")},s={alpha:t};return Va.runKernel(Cn,n,s)}});const _h=ti({less_:function(e,t){let n=Za(e,"a","less","string_or_numeric"),s=Za(t,"b","less","string_or_numeric");[n,s]=Da(n,s),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel($n,r)}});const Oh=ti({lessEqual_:function(e,t){let n=Za(e,"a","lessEqual","string_or_numeric"),s=Za(t,"b","lessEqual","string_or_numeric");[n,s]=Da(n,s),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(En,r)}});function Mh(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Va.runKernel(An,{},s)}const Lh=ti({localResponseNormalization_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;const a=Za(e,"x","localResponseNormalization");ce(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),ce(ye(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=fc(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Va.runKernel(Pn,l,u);return o?fc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const zh=ti({log_:function(e){const t={x:Za(e,"x","log","float32")};return Va.runKernel(Rn,t)}});const Ph=ti({log1p_:function(e){const t={x:Za(e,"x","log1p")};return Va.runKernel(Fn,t)}});const Bh=ti({softplus_:function(e){const t={x:Za(e,"x","softplus")};return Va.runKernel(Ws,t)}});const Wh=ti({logSigmoid_:function(e){const t=Za(e,"x","logSigmoid");return qo((e=>({value:Vl(Bh(Vl(e))),gradFunc:t=>zo(t,bc(Vl(e)))})))(t)}});const Vh=ti({logSoftmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=Za(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const s=qo(((e,n)=>{const s=mh(e,t,!0),r=ol(e,s),a=ol(Fo(r,"float32"),zh(yh(vh(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=vh(s);return ol(e,zo(yh(e,t,!0),r))}}}));return s(n)}});const Uh=ti({logSumExp_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const s=Za(e,"x","logSumExp"),r=Ne(t,s.shape),a=mh(s,r,!0),i=ol(s,a),o=vh(i),l=yh(o,r),u=zh(l),c=Oo(fc(a,u.shape),u);if(n){const e=ch(c.shape,r);return fc(c,e)}return c}});const Gh=ti({logicalAnd_:function(e,t){const n=Za(e,"a","logicalAnd","bool"),s=Za(t,"b","logicalAnd","bool");dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Dn,r)}});const Hh=ti({logicalNot_:function(e){const t={x:Za(e,"x","logicalNot","bool")};return Va.runKernel(_n,t)}});const jh=ti({logicalOr_:function(e,t){const n=Za(e,"a","logicalOr","bool"),s=Za(t,"b","logicalOr","bool");dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(On,r)}});const qh=ti({logicalXor_:function(e,t){const n=Za(e,"a","logicalXor","bool"),s=Za(t,"b","logicalXor","bool");return dl(n.shape,s.shape),Gh(jh(e,t),Hh(Gh(e,t)))}}),Kh=2147483648;const Xh=ti({searchSorted_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"left";const s=Za(e,"sortedSequence","searchSorted"),r=Za(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=r.shape[r.shape.length-1],o=fc(s,[-1,a]),l=fc(r,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(pe(l.shape)>=Kh)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=Kh)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const u={sortedSequence:o,values:l},c={side:n};return Va.runKernel(Ds,u,c)}});function Yh(e,t){return Xh(e,t,"left")}const Jh=ti({maxPool_:function(e,t,n,s,r){const a=Za(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=fc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ce(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),ce(cc(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),pc("maxPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Va.runKernel(Gn,l,u);return o?fc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Zh=ti({maxPool3d_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,1,1],n=arguments.length>2?arguments[2]:void 0,s=arguments.length>3?arguments[3]:void 0,r=arguments.length>4?arguments[4]:void 0,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const i=Za(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=fc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ce(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),ce("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),pc("maxPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=Va.runKernel(jn,u,c);return l?fc(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Qh=ti({maxPoolWithArgmax_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];const a={x:Za(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Va.runKernel(Kn,a,i);return{result:o[0],indexes:o[1]}}});const ed=ti({mean_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const s={x:Za(e,"x","mean")},r={axis:t,keepDims:n};return Va.runKernel(Xn,s,r)}});function td(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if(je(e),"complex64"===t){const t=td(e,"float32"),n=td(e,"float32");return ni(t,n)}const n=Ge(pe(e),t);return Va.makeTensor(n,e,t)}function nd(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if(je(e),"complex64"===t){const t=nd(e,"float32"),n=td(e,"float32");return ni(t,n)}const n=Ue(pe(e),t);return Va.makeTensor(n,e,t)}function sd(e,t){let{indexing:n="xy"}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=Za(e,"x","meshgrid",e instanceof wa?e.dtype:"float32");if(void 0===t)return[s];let r=Za(t,"y","meshgrid",t instanceof wa?t.dtype:"float32");const a=pe(s.shape),i=pe(r.shape);return"xy"===n?(s=fc(s,[1,-1]),r=fc(r,[-1,1]),[Pl(nd([i,1],s.dtype),s),Pl(r,nd([1,a],r.dtype))]):(s=fc(s,[-1,1]),r=fc(r,[1,-1]),[Pl(s,nd([1,i],s.dtype)),Pl(nd([a,1],r.dtype),r)])}const rd=ti({minimum_:function(e,t){let n=Za(e,"a","minimum"),s=Za(t,"b","minimum");[n,s]=Da(n,s),"bool"===n.dtype&&(n=Fo(n,"int32"),s=Fo(s,"int32")),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Jn,r)}});const ad=ti({mirrorPad_:function(e,t,n){ce("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Za(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ce(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let o=0;o<s.rank;o++)ce(2===t[o].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ce(t[o][0]>=0&&t[o][0]<=s.shape[o]-r&&t[o][1]>=0&&t[o][1]<=s.shape[o]-r,(()=>`Padding in dimension ${o} cannot be greater than or equal to ${s.shape[o]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Va.runKernel(Zn,i,a)}});const id=ti({mod_:function(e,t){let n=Za(e,"a","mod"),s=Za(t,"b","mod");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(Qn,r)}});const od=ti({moments_:function(e){let t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const n=Ne(arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,(e=Za(e,"x","moments")).shape),s=ed(e,n,t);let r=s.shape;t||(r=ch(s.shape,n));const a=Bo(ol(Fo(e,"float32"),fc(s,r)));return{mean:s,variance:ed(a,n,t)}}});const ld=ti({multiRNNCell_:function(e,t,n,s){const r=Za(t,"data","multiRNNCell"),a=Qa(n,"c","multiRNNCell"),i=Qa(s,"h","multiRNNCell");let o=r;const l=[];for(let h=0;h<e.length;h++){const t=e[h](o,a[h],i[h]);l.push(t[0]),l.push(t[1]),o=t[1]}const u=[],c=[];for(let h=0;h<l.length;h+=2)u.push(l[h]),c.push(l[h+1]);return[u,c]}});const ud=ti({multinomial_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=Za(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?fc(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Va.runKernel(es,o,l);return 1===i?fc(u,[u.size]):u}});const cd=ti({notEqual_:function(e,t){let n=Za(e,"a","notEqual","string_or_numeric"),s=Za(t,"b","notEqual","string_or_numeric");[n,s]=Da(n,s),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(ss,r)}});const hd=ti({onesLike_:function(e){const t={x:Za(e,"x","onesLike")};return Va.runKernel(os,t)}});const dd=ti({outerProduct_:function(e,t){const n=Za(e,"v1","outerProduct"),s=Za(t,"v2","outerProduct");ce(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=fc(n,[-1,1]),a=fc(s,[1,-1]);return Pl(r,a)}});const pd=ti({pad_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const s=Za(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Va.runKernel(cs,a,r)}});const fd=ti({pad1d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ce(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),pd(e,[t],n)}});const md=ti({pad2d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ce(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),pd(e,t,n)}});const gd=ti({pad3d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ce(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),pd(e,t,n)}});const yd=ti({pad4d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ce(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),pd(e,t,n)}});const bd=ti({spaceToBatchND_:function(e,t,n){const s=Za(e,"x","spaceToBatchND");ce(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),ce(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),ce(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]===0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Va.runKernel(Gs,r,a)}});const xd=ti({pool_:function(e,t,n,s,r,a,i){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const o=Za(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=fc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ce(cc(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=ec(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))),s=n.map((e=>e-1)),r=s.map((e=>Math.floor(e/2))),a=s.map(((e,t)=>e-r[t]));return s.map(((e,t)=>[r[t],a[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,d),g=p?s:"valid",y=p?l:bd(l,h,f),b=("avg"===n?()=>mc(y,t,a,g,i):()=>Jh(y,t,a,g,i))(),x=p?b:kc(b,h,m);return u?fc(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const wd=ti({prelu_:function(e,t){const n={x:Za(e,"x","prelu"),alpha:Za(t,"alpha","prelu")};return Va.runKernel(ps,n)}});const vd=ti({prod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=Za(e,"x","prod");"bool"===s.dtype&&(s=Fo(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Va.runKernel(fs,r,a)}});const kd=ti({raggedGather_:function(e,t,n,s){const r={paramsNestedSplits:e.map(((e,t)=>Za(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:Za(t,"paramsDenseValues","raggedGather"),indices:Za(n,"indices","raggedGather","int32")},a={outputRaggedRank:s},i=Va.runKernel(ms,r,a);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}});const Id=ti({raggedRange_:function(e,t,n){const s=Za(e,"starts","raggedRange"),r={starts:s,limits:Za(t,"limits","raggedRange",s.dtype),deltas:Za(n,"deltas","raggedRange",s.dtype)},a=Va.runKernel(gs,r);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const Nd=ti({raggedTensorToTensor_:function(e,t,n,s,r){const a=Za(e,"shape","raggedTensorToTensor","int32"),i=Za(t,"values","raggedTensorToTensor"),o={shape:a,values:i,defaultValue:Za(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:s.map(((e,t)=>Za(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:r};return Va.runKernel(ys,o,l)}});const Sd=ti({rand_:function(e,t,n){je(e);const s=pe(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let a=0;a<s;a++)r[a]=t();return Va.makeTensor(r,e,n)}});var Td=n(4334);class Cd{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Td.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class $d{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=Td.alea(r.toString()),this.randn=new Cd(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Ed{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2?arguments[2]:void 0,s=arguments.length>3?arguments[3]:void 0;if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"===typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Td.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ad=ti({randomGamma_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",r=arguments.length>4?arguments[4]:void 0;if(je(e),null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new $d(t,n,s,r),i=Ro(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});const Rd=ti({randomNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,s=arguments.length>3?arguments[3]:void 0,r=arguments.length>4?arguments[4]:void 0;if(je(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Cd(t,n,s,!1,r),i=Ro(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});const Fd=ti({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Rd(e,0,1,t,n)}});const Dd=ti({randomUniform_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",r=arguments.length>4?arguments[4]:void 0;je(e);const a=Ro(e,s),i=new Ed(t,n,null,r);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}});const _d=ti({randomUniformInt_:function(e,t,n,s){return Dd(e,t,n,"int32",s)}});function Od(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Va.runKernel(bs,{},r)}const Md=ti({reciprocal_:function(e){const t={x:Za(e,"x","reciprocal")};return Va.runKernel(ws,t)}});const Ld=ti({relu_:function(e){const t={x:Za(e,"x","relu")};return Va.runKernel(vs,t)}});const zd=ti({relu6_:function(e){const t={x:Za(e,"x","relu6")};return Va.runKernel(Cs,t)}});const Pd=ti({reverse_:function(e,t){const n={x:Za(e,"x","reverse")},s={dims:t};return Va.runKernel($s,n,s)}});const Bd=ti({reverse1d_:function(e){const t=Za(e,"x","reverse");return ce(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Pd(t,0)}});const Wd=ti({reverse2d_:function(e,t){const n=Za(e,"x","reverse");return ce(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Pd(n,t)}});const Vd=ti({reverse3d_:function(e,t){const n=Za(e,"x","reverse");return ce(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Pd(n,t)}});const Ud=ti({reverse4d_:function(e,t){const n=Za(e,"x","reverse");return ce(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Pd(n,t)}});const Gd=ti({round_:function(e){const t={x:Za(e,"x","round")};return Va.runKernel(Es,t)}});const Hd=ti({rsqrt_:function(e){const t={x:Za(e,"x","rsqrt","float32")};return Va.runKernel(As,t)}});const jd=ti({selu_:function(e){const t={x:Za(e,"x","selu")};return Va.runKernel(Os,t)}});const qd=ti({separableConv2d_:function(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NHWC";const o=Za(e,"x","separableConv2d"),l=Za(t,"depthwiseFilter","separableConv2d"),u=Za(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=fc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ce(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),ce(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),ce(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),ce(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),ce(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const d=l.shape[2],p=l.shape[3];ce(u.shape[2]===d*p,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`));const f=Yc(c,l,s,r,i,a),m=Lc(f,u,1,"valid",i);return h?fc(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Kd=async function(e,t){const n=Za(e,"x","setdiff1d"),s=Za(t,"y","setdiff1d");ce(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),ce(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),ce(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let c=0;c<r.length;c++)i.has(r[c])||o++;const l=new ga([o],n.dtype),u=new ga([o],"int32");for(let c=0,h=0;c<r.length;c++)i.has(r[c])||(l.values[h]=r[c],u.values[h]=c,h++);return[l.toTensor(),u.toTensor()]};const Xd=ti({sign_:function(e){const t={x:Za(e,"x","sign")};return Va.runKernel(Ps,t)}});const Yd=ti({sin_:function(e){const t={x:Za(e,"x","sin","float32")};return Va.runKernel(Ls,t)}});const Jd=ti({sinh_:function(e){const t={x:Za(e,"x","sinh")};return Va.runKernel(zs,t)}});const Zd=ti({slice1d_:function(e,t,n){const s=Za(e,"x","slice1d");return ce(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),xc(s,[t],[n])}});const Qd=ti({slice2d_:function(e,t,n){const s=Za(e,"x","slice2d");return ce(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),xc(s,t,n)}});const ep=ti({slice3d_:function(e,t,n){const s=Za(e,"x","slice3d");return ce(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),xc(s,t,n)}});const tp=ti({slice4d_:function(e,t,n){const s=Za(e,"x","slice4d");return ce(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),xc(s,t,n)}});const np=ti({softmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=Za(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Va.runKernel(js,s,r)}});const sp=ti({fft_:function(e){ce("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Va.runKernel(hn,t)}});const rp=ti({ifft_:function(e){ce("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Va.runKernel(kn,t)}});const ap=ti({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=fc(e,[n,t]);s=rp(r)}else{const r=[n,2*(t-1)],a=fc(Ul(e),[n,t]),i=fc(Wl(e),[n,t]),o=Pd(xc(a,[0,1],[n,t-2]),1),l=zo(Pd(xc(i,[0,1],[n,t-2]),1),Xo(-1)),u=yc([a,o],1),c=yc([i,l],1),h=fc(ni(u,c),[r[0],r[1]]);s=rp(h)}if(s=Ul(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=fc(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});const ip=ti({split_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const s={x:Za(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Va.runKernel(Hs,s,r)}});const op=ti({rfft_:function(e,t){ce("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=xc(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=yc([e,td(s)],e.shape.length-1),n=t}else r=e;const a=Wo(r),i=fc(ni(r,a),[s,n]),o=sp(i),l=Math.floor(n/2)+1,u=Ul(o),c=Wl(o),h=ip(u,[l,n-l],u.shape.length-1),d=ip(c,[l,n-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,fc(ni(h[0],d[0]),p)}});const lp=ti({squaredDifference_:function(e,t){let n=Za(e,"a","squaredDifference"),s=Za(t,"b","squaredDifference");[n,s]=Da(n,s),dl(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Zs,r,{})}});const up=ti({squeeze_:function(e,t){const n=Za(e,"x","squeeze","string_or_numeric");return fc(n,Se(n.shape,t).newShape)}});const cp=ti({stack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Qa(e,"tensors","stack","string_or_numeric");ce(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&ce(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Va.runKernel(us,s,r)}});const hp=ti({step_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:Za(e,"x","step")},s={alpha:t};return Va.runKernel(yr,n,s)}});const dp=ti({stridedSlice_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,l=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0;const u={x:Za(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Va.runKernel(tr,u,c)}});const pp=ti({tan_:function(e){const t={x:Za(e,"x","tan","float32")};return Va.runKernel(ir,t)}});function fp(e,t){de(e);const n=Xa(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return si(e,null,n,t)}function mp(e,t,n){if(de(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Xa(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return si(e,t,s,n)}function gp(e,t,n){if(de(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Xa(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return si(e,t,s,n)}function yp(e,t,n){if(de(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Xa(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return si(e,t,s,n)}function bp(e,t,n){if(de(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Xa(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return si(e,t=t||s,s,n)}const xp=ti({tensorScatterUpdate_:function(e,t,n){const s=Za(e,"tensor","tensorScatterupdate"),r=Za(t,"indices","tensorScatterupdate","int32"),a=Za(n,"updates","tensorScatterupdate");if(ru(a,r,s.shape),s.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${a.dtype}.`);const i={tensor:s,indices:r,updates:a};return Va.runKernel(Fs,i,{})}});const wp=ti({topk_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const s=Za(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Va.runKernel(ur,a,i);return{values:o,indices:l}}});const vp=ti({truncatedNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,s=arguments.length>3?arguments[3]:void 0,r=arguments.length>4?arguments[4]:void 0;if(je(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Cd(t,n,s,!0,r),i=Ro(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});const kp=ti({unique_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Za(e,"x","unique","string_or_numeric");ce(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Va.runKernel(dr,s,r);return{values:a,indices:i}}});const Ip=ti({unsortedSegmentSum_:function(e,t,n){const s=Za(e,"x","unsortedSegmentSum"),r=Za(t,"segmentIds","unsortedSegmentSum","int32");ce(ye(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Va.runKernel(fr,a,i)}});const Np=ti({unstack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Za(e,"x","unstack","string_or_numeric");ce(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Va.runKernel(pr,s,r)}});function Sp(e,t){return Xh(e,t,"right")}function Tp(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,s=arguments.length>3?arguments[3]:void 0;return Va.makeVariable(e,t,n,s)}function Cp(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const s=Ro(e,"int32"),r=Ro([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=s.indexToLoc(n[a]),i=a*e.length;r.values.set(t,i)}return r.toTensor()}const $p=async function(e){const t=Za(e,"condition","whereAsync","bool"),n=await t.data(),s=Cp(t.shape,n);return e!==t&&t.dispose(),s};const Ep=async function(e,t,n){const s=Za(e,"tensor","boolMask"),r=Za(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;ce(i>0,(()=>"mask cannot be scalar")),he(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let m=a;m<a+i;m++)l*=o[m];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=fc(s,u),h=fc(r,[-1]),d=await $p(h),p=up(d,[1]),f=Ch(c,p,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f};const Ap=ti({movingAverage_:function(e,t,n,s){let r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];const a=Za(e,"v","movingAverage"),i=Za(t,"x","movingAverage"),o=Za(n,"decay","movingAverage");_a(a,i),ce(ge(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=Xo(1),u=ol(l,o);let c=zo(ol(i,a),u);if(r){ce(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Za(s,"step","movingAverage");c=Lo(c,ol(l,il(o,e)))}return Oo(a,c)}});const Rp=ti({scatterND_:function(e,t,n){je(n);const s=Za(e,"indices","scatterND","int32"),r=Za(t,"updates","scatterND");ru(r,s,n);const a={indices:s,updates:r},i={shape:n};return Va.runKernel(Rs,a,i)}});const Fp=ti({sparseToDense_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;je(n);const r=Za(e,"sparseIndices","sparseToDense","int32"),a=Za(t,"sparseValues","sparseToDense","string_or_numeric"),i=Za(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Va.runKernel(Js,o,l)}});const Dp=ti({gatherND_:function(e,t){const n=Za(t,"indices","gatherND","int32"),s={params:Za(e,"x","gatherND","string_or_numeric"),indices:n};return Va.runKernel(bn,s)}});const _p=ti({dropout_:function(e,t,n,s){const r=Za(e,"x","dropout");if(ce("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),ce(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof wa?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(ge(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=Lo(Th(Oo(Dd(a,0,1,"float32",s),i)),i);return zo(r,o)}});function Op(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Mp(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return fp(r,"float32")}const Lp=async function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;const s=Za(e,"predictions","inTopK"),r=Za(t,"targets","inTopK");ce(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),ce(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),he(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];ce(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=Te("bool",l);for(let h=0;h<l;h++){const e=h*u,t=i.subarray(e,e+u),s=[];for(let n=0;n<t.length;n++)s.push({value:t[n],index:n});s.sort(((e,t)=>t.value-e.value)),c[h]=0;for(let r=0;r<n;r++)if(s[r].index===o[h]){c[h]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),ri(c,r.shape,"bool")};const zp=ti({conv2DBackpropFilter_:function(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",i=arguments.length>6?arguments[6]:void 0,o=e;3===e.rank&&(o=fc(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=fc(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ce(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),ce(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),ce(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];ce(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),ce(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),pc("conv2dDerFilter",r,i);const h={x:o,dy:l},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Va.runKernel(Ot,h,d)}});function Pp(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return zo(e,hp(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Bp(e,t){let n=t;const s=hl(e.shape,t.shape);return s.length>0&&(n=yh(n,s)),fc(n,e.shape)}function Wp(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Ld(e);if("elu"===t)return rh(e);if("relu6"===t)return zd(e);if("prelu"===t)return wd(e,n);if("leakyrelu"===t)return Dh(e,s);if("sigmoid"===t)return bc(e);throw new Error(`Unknown fused activation ${t}.`)}const Vp=(e,t)=>!(e>0)||"linear"===t;const Up=ti({fusedConv2d_:function(e){let{x:t,filter:n,strides:s,pad:r,dataFormat:a="NHWC",dilations:i=[1,1],dimRoundingMode:o,bias:l,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}=e;if(u=u||"linear",!1===Vp(Va.state.gradientDepth,u)){ce("NHWC"===a,(()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let e=Lc(t,n,s,r,a,i,o);return null!=l&&(e=Oo(e,l)),Wp(e,u,c,h)}const d=Za(t,"x","conv2d","float32"),p=Za(n,"filter","conv2d","float32");let f=d,m=!1;3===d.rank&&(m=!0,f=fc(d,[1,d.shape[0],d.shape[1],d.shape[2]])),ce(4===f.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`)),ce(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),pc("fused conv2d",r,o);const g="NHWC"===a?f.shape[3]:f.shape[1];ce(p.shape[2]===g,(()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${p.shape[2]}.`)),ce(cc(s,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${s} and dilations '${i}'`));const y=nc(f.shape,p.shape,s,i,r,o);let b,x;if(null!=l&&(b=Za(l,"bias","fused conv2d"),[b]=Da(b,d),"NHWC"===a?dl(y.outShape,b.shape):(ce(b.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`)),ce(0===b.shape.length||b.shape[0]===y.outChannels||1===b.shape[0],(()=>`Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${y.outChannels})`)))),null!=c){const e=c.shape;if(ce(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)ce(1===e[0]||e[0]===y.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${y.outChannels}).`));else if(3===e.length)try{dl(e,y.outShape)}catch(I){const t=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${y.outShape}).`;throw Error(t)}x=Za(c,"prelu weights","fused conv2d")}const w=(e,t)=>{ce("NHWC"===a,(()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`));const[n,o,l,c]=t,h=Pp(e,l,u);ce(uc(i),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`));const d=[Pc(o.shape,h,n,s,r),zp(o,h,n.shape,s,r)];if(null!=c){const e=Bp(c,h);d.push(e)}return d},v={x:f,filter:p,bias:b,preluActivationWeights:x},k={strides:s,pad:r,dataFormat:a,dilations:i,dimRoundingMode:o,activation:u,leakyreluAlpha:h};if(null==l){const e=qo(((e,t,n)=>{let s=Va.runKernel(vr,v,k);return n([t,e,s]),m&&(s=fc(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}));return e(f,p)}{const e=qo(((e,t,n,s)=>{let r=Va.runKernel(vr,v,k);return s([t,e,r,n]),m&&(r=fc(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}));return e(f,p,b)}}});const Gp=ti({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],i=arguments.length>6?arguments[6]:void 0,o=e;3===e.rank&&(o=fc(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=fc(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Va.runKernel(Kt,u,c)}});const Hp=ti({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],i=arguments.length>6?arguments[6]:void 0,o=t,l=!1;3===t.rank&&(l=!0,o=fc(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Va.runKernel(Xt,u,c);return l?fc(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const jp=ti({fusedDepthwiseConv2d_:function(e){let{x:t,filter:n,strides:s,pad:r,dataFormat:a="NHWC",dilations:i=[1,1],dimRoundingMode:o,bias:l,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}=e;if(!1===Vp(Va.state.gradientDepth,u)){let e=Yc(t,n,s,r,a,i,o);return null!=l&&(e=Oo(e,l)),Wp(e,u,c,h)}const d=Za(t,"x","depthwiseConv2d","float32"),p=Za(n,"filter","depthwiseConv2d","float32");let f=d,m=!1;3===d.rank&&(m=!0,f=fc(d,[1,d.shape[0],d.shape[1],d.shape[2]])),ce(4===f.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`)),ce(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),ce(f.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==i&&(i=[1,1]),ce(cc(s,i),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${s} and dilations '${i}'`)),pc("fused depthwiseConv2d",r,o);const g=nc(f.shape,p.shape,s,i,r,o,!0);let y,b;null!=l&&(y=Za(l,"bias","fused conv2d"),[y]=Da(y,d),dl(g.outShape,y.shape)),null!=c&&(b=Za(c,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{ce(uc(i),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[n,a,l,c]=t,h=Pp(e,l,u),d=Hp(a.shape,h,n,s,r,i,o),p=Gp(a,h,n.shape,s,r,i,o);if(null!=c){return[d,p,Bp(y,h)]}return[d,p]},w={x:f,filter:p,bias:y,preluActivationWeights:b},v={strides:s,pad:r,dataFormat:a,dilations:i,dimRoundingMode:o,activation:u,leakyreluAlpha:h};if(null==l){const e=qo(((e,t,n)=>{let s=Va.runKernel(kr,w,v);return n([t,e,s]),m&&(s=fc(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(f,p)}{const e=qo(((e,t,n,s)=>{let r=Va.runKernel(kr,w,v);return s([t,e,r,n]),m&&(r=fc(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(f,p,y)}}});const qp=ti({fusedMatMul_:function(e){let{a:t,b:n,transposeA:s=!1,transposeB:r=!1,bias:a,activation:i="linear",preluActivationWeights:o,leakyreluAlpha:l=.2}=e;if(!1===Vp(Va.state.gradientDepth,i)){let e=Pl(t,n,s,r);return null!=a&&(e=Oo(e,a)),Wp(e,i,o,l)}let u=Za(t,"a","fused matMul"),c=Za(n,"b","fused matMul");[u,c]=Da(u,c);const h=s?u.shape[u.rank-2]:u.shape[u.rank-1],d=r?c.shape[c.rank-1]:c.shape[c.rank-2],p=s?u.shape[u.rank-1]:u.shape[u.rank-2],f=r?c.shape[c.rank-2]:c.shape[c.rank-1],m=u.shape.slice(0,-2),g=c.shape.slice(0,-2),y=pe(m),b=pe(g);ce(h===d,(()=>`Error in fused matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${u.shape} and ${c.shape} and transposeA=${s} and transposeB=${r} must match.`));const x=dl(u.shape.slice(0,-2),c.shape.slice(0,-2)).concat([p,f]),w=fc(u,s?[y,h,p]:[y,p,h]),v=fc(c,r?[b,f,d]:[b,d,f]);let k,I;null!=a&&(k=Za(a,"bias","fused matMul"),[k]=Da(k,u),dl(x,k.shape)),null!=o&&(I=Za(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[n,o,l,u]=t,c=Pp(fc(e,l.shape),l,i);let h,d;if(s||r?!s&&r?(h=Pl(c,o,!1,!1),d=Pl(c,n,!0,!1)):s&&!r?(h=Pl(o,c,!1,!0),d=Pl(n,c,!1,!1)):(h=Pl(o,c,!0,!0),d=Pl(c,n,!0,!0)):(h=Pl(c,o,!1,!0),d=Pl(n,c,!0,!1)),null!=a){return[h,d,Bp(u,c)]}return[h,d]},S={a:w,b:v,bias:k,preluActivationWeights:I},T={transposeA:s,transposeB:r,activation:i,leakyreluAlpha:l};if(null==a){const e=qo(((e,t,n)=>{const s=Va.runKernel(wr,S,T);return n([e,t,s]),{value:fc(s,x),gradFunc:N}}));return e(w,v)}{const e=qo(((e,t,n,s)=>{const r=Va.runKernel(wr,S,T);return s([e,t,r,n]),{value:fc(r,x),gradFunc:N}}));return e(w,v,k)}}});const Kp=ti({hammingWindow_:function(e){return Mp(e,.54,.46)}});const Xp=ti({hannWindow_:function(e){return Mp(e,.5,.5)}});const Yp=ti({frame_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=0;const i=[];for(;a+t<=e.size;)i.push(xc(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=yc([xc(e,a,t-s),rl([s],r)]);i.push(o),a+=n}return 0===i.length?mp([],[0,t]):fc(yc(i),[i.length,t])}});const Jp=ti({stft_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Xp;null==s&&(s=Op(t));const a=Yp(e,t,n),i=zo(a,r(t));return op(i,s)}});const Zp=ti({cropAndResize_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"bilinear",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const i=Za(e,"image","cropAndResize"),o=Za(t,"boxes","cropAndResize","float32"),l=Za(n,"boxInd","cropAndResize","int32"),u=o.shape[0];ce(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),ce(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),ce(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),ce(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),ce(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),ce("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Va.runKernel(Gt,c,h)}});const Qp=ti({flipLeftRight_:function(e){const t=Za(e,"image","flipLeftRight","float32");ce(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Va.runKernel(pn,n,{})}});const ef=ti({grayscaleToRGB_:function(e){const t=Za(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];ce(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),ce(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,Nh(t,r)}});const tf=ti({rgbToGrayscale_:function(e){const t=Za(e,"image","RGBToGrayscale"),n=t.rank-1,s=t.shape[n];ce(t.rank>=2,(()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`)),ce(3===s,(()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`));const r=t.dtype,a=Fo(t,"float32"),i=fp([.2989,.587,.114]);let o;switch(t.rank){case 2:o=sh("ij,j->i",a,i);break;case 3:o=sh("ijk,k->ij",a,i);break;case 4:o=sh("ijkl,l->ijk",a,i);break;case 5:o=sh("ijklm,m->ijkl",a,i);break;case 6:o=sh("ijklmn,n->ijklm",a,i);break;default:throw new Error("Not a valid tensor rank.")}return o=kh(o,-1),Fo(o,r)}});const nf=ti({rotateWithOffset_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const r=Za(e,"image","rotateWithOffset","float32");ce(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Va.runKernel(xr,a,i)}});function sf(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),ce(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),ce(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),ce(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),ce(1===t.rank,(()=>"scores must be a 1D tensor")),ce(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),ce(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const rf=ti({nonMaxSuppression_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const a=Za(e,"boxes","nonMaxSuppression","float32"),i=Za(t,"scores","nonMaxSuppression","float32"),o=sf(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:s,scoreThreshold:r};return Va.runKernel(rs,{boxes:a,scores:i},l)}});function af(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||of)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function of(e,t){return e>t?1:e<t?-1:0}function lf(e,t,n,s,r){return hf(e,t,n,s,r,0)}function uf(e,t,n,s,r,a){return hf(e,t,n,s,r,0,!1,a,!0)}function cf(e,t,n,s,r,a){return hf(e,t,n,s,r,a,!0)}function hf(e,t,n,s,r,a){let i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],o=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l=arguments.length>8&&void 0!==arguments[8]&&arguments[8];const u=[];for(let g=0;g<t.length;g++)t[g]>r&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(ff);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let l=h.length-1;l>=i;--l){const n=df(e,a,h[l]);if(n>=s){o=!0;break}if(t.score=t.score*pf(s,c,n),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),d.push(t.score)):t.score>r&&af(u,t,ff))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=d),l&&(m.validOutputs=p),m}function df(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(o-a)*(l-i),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,d),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(p+f-x)}function pf(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function ff(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const mf=async function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const a=Za(e,"boxes","nonMaxSuppressionAsync"),i=Za(t,"scores","nonMaxSuppressionAsync"),o=sf(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=lf(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),fp(h,"int32")};const gf=ti({nonMaxSuppressionWithScore_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const i=Za(e,"boxes","nonMaxSuppression"),o=Za(t,"scores","nonMaxSuppression"),l=sf(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u={boxes:i,scores:o},c={maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a},h=Va.runKernel(is,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const yf=async function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const i=Za(e,"boxes","nonMaxSuppressionAsync"),o=Za(t,"scores","nonMaxSuppressionAsync"),l=sf(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=cf(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:fp(d,"int32"),selectedScores:fp(p)}};const bf=ti({nonMaxSuppressionPadded_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const i=Za(e,"boxes","nonMaxSuppression"),o=Za(t,"scores","nonMaxSuppression"),l=sf(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Va.runKernel(as,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const xf=async function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const i=Za(e,"boxes","nonMaxSuppressionAsync"),o=Za(t,"scores","nonMaxSuppressionAsync"),l=sf(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=uf(d,p,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:fp(f,"int32"),validOutputs:Xo(m,"int32")}};const wf=ti({resizeBilinear_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=Za(e,"images","resizeBilinear");ce(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),ce(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),ce(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=fc(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Va.runKernel(Ss,o,l);return i?fc(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const vf=ti({resizeNearestNeighbor_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=Za(e,"images","resizeNearestNeighbor");ce(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),ce(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),ce("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),ce(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=fc(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Va.runKernel(Is,o,l);return i?fc(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const kf=ti({threshold_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"binary",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const r=Za(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,l,u,c=zo(fp([s]),255);if(ce(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),ce(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),ce("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),ce("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,o,l]=ip(r,[1,1,1],-1);const e=zo(i,.2989),t=zo(o,.587),n=zo(l,.114);u=Oo(Oo(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,s,r,a,i,o,l=fp([-1]),u=fp([0]),c=fp([0]);for(let h=0;h<e.size-1;h++){n=xc(e,0,h+1),s=xc(e,h+1),i=Lo(yh(n),t),o=Lo(yh(s),t);const d=yh(zo(n,Od(0,n.size)));r=Lo(d,yh(n));const p=rl(s.shape,n.size),f=Oo(Od(0,s.size),p),m=zo(s,f);a=Lo(yh(m),yh(s));const g=ol(r,a),y=ol(r,a),b=zo(i,o);c=zo(zo(b,g),y);const x=$h(c,u);u=eh(x,c,u),l=eh(x,fp([h]),l)}return l}(Cc(Fo(Gd(u),"int32"),ri([]),256),a)}const h=n?Oh(u,c):$h(u,c);return Fo(zo(h,255),"int32")}});const If=ti({transform_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"nearest",s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"constant",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=arguments.length>5?arguments[5]:void 0;const i=Za(e,"image","transform","float32"),o=Za(t,"transforms","transform","float32");ce(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),ce(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),ce(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Va.runKernel(cr,l,u)}});const Nf=ti({bandPart_:function(e,t,n){const s=Za(e,"a","bandPart");ce(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);let o,l;"number"===typeof t?(ce(t%1===0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),ce(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),o=Za(t<0?a:t,"numLower","bandPart")):(ce("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),o=eh(_h(t,0),a,rd(t,a))),"number"===typeof n?(ce(n%1===0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),ce(n<=i,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`)),l=Za(n<0?i:n,"numUpper","bandPart")):(ce("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),l=eh(_h(n,0),i,rd(n,i)));const u=fc(Od(0,a,1,"int32"),[-1,1]),c=Od(0,i,1,"int32"),h=ol(u,c),d=Gh(Oh(h,o),Eh(h,Vl(l))),p=td([a,i],s.dtype);return fc(cp(Np(fc(s,[-1,a,i])).map((e=>eh(d,e,p)))),r)}});const Sf=ti({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ce(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)ce(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=ip(e,e.shape[0],0).map((e=>up(e,[0])));ce(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let r=0;r<e.length;++r)n.push(Va.tidy((()=>{let e=s[r];if(r>0)for(let t=0;t<r;++t){const s=zo(yh(zo(n[t],e)),n[t]);e=ol(e,s)}return Lo(e,xh(e,"euclidean"))})));return t?cp(n,0):n}});function Tf(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Va.tidy((()=>{ce(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=Sh(n),a=Do(e);const i=mp([[1]],[1,1]);let o=Do(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Va.tidy((()=>{const t=xc(a,[e,e],[n-e,1]),l=xh(t),u=xc(a,[e,e],[1,1]),c=eh($h(u,0),mp([[-1]]),mp([[1]])),h=ol(u,zo(c,l)),d=Lo(t,h);o=1===d.shape[0]?Do(i):yc([i,xc(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Vl(Lo(Pl(c,h),l)),f=xc(a,[e,0],[n-e,s]),m=zo(p,o),g=Gl(o);if(0===e)a=ol(f,Pl(m,Pl(g,f)));else{const t=ol(f,Pl(m,Pl(g,f)));a=yc([xc(a,[0,0],[e,s]),t],0)}const y=Gl(m),b=xc(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=ol(b,Pl(Pl(b,o),y));else{const t=ol(b,Pl(Pl(b,o),y));r=yc([xc(r,[0,0],[n,e]),t],1)}return[o,a,r]})),gi([t,l,u])}return!t&&n>s&&(r=xc(r,[0,0],[n,s]),a=xc(a,[0,0],[s,s])),[r,a]}))}const Cf=ti({qr_:function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(ce(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Tf(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=Np(fc(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=Tf(e,t);r.push(n),a.push(s)}));return[fc(cp(r,0),e.shape),fc(cp(a,0),e.shape)]}}});var $f;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}($f||($f={}));const Ef=ti({computeWeightedLoss_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:$f.SUM_BY_NONZERO_WEIGHTS;const s=Za(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Za(t,"weights","computeWeightedLoss"));const a=null==r?s:zo(s,r);if(n===$f.NONE)return a;if(n===$f.SUM)return yh(a);if(n===$f.MEAN){if(null==r)return ed(a);{const e=s.size/r.size,t=Lo(yh(a),yh(r));return e>1?Lo(t,Xo(e)):t}}if(n===$f.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Lo(yh(a),Xo(s.size));{const e=zo(r,nd(s.shape)),t=Fo(yh(cd(e,Xo(0))),"float32");return Lo(yh(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const Af=ti({absoluteDifference_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:$f.SUM_BY_NONZERO_WEIGHTS;const r=Za(e,"labels","absoluteDifference"),a=Za(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Za(n,"weights","absoluteDifference")),he(r.shape,a.shape,"Error in absoluteDifference: ");const o=ul(ol(r,a));return Ef(o,i,s)}});const Rf=ti({cosineDistance_:function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:$f.SUM_BY_NONZERO_WEIGHTS;const a=Za(e,"labels","cosineDistance"),i=Za(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Za(s,"weights","cosineDistance")),he(a.shape,i.shape,"Error in cosineDistance: ");const l=Xo(1),u=ol(l,yh(zo(a,i),n,!0));return Ef(u,o,r)}});const Ff=ti({hingeLoss_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:$f.SUM_BY_NONZERO_WEIGHTS,r=Za(e,"labels","hingeLoss");const a=Za(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Za(n,"weights","hingeLoss")),he(r.shape,a.shape,"Error in hingeLoss: ");const o=Xo(1);r=ol(zo(Xo(2),r),o);const l=Ld(ol(o,zo(r,a)));return Ef(l,i,s)}});const Df=ti({huberLoss_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:$f.SUM_BY_NONZERO_WEIGHTS;const a=Za(e,"labels","huberLoss"),i=Za(t,"predictions","huberLoss");let o=null;null!=n&&(o=Za(n,"weights","huberLoss")),he(a.shape,i.shape,"Error in huberLoss: ");const l=Xo(s),u=ul(ol(i,a)),c=rd(u,l),h=ol(u,c),d=Oo(zo(Xo(.5),Bo(c)),zo(l,h));return Ef(d,o,r)}});const _f=ti({logLoss_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e-7,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:$f.SUM_BY_NONZERO_WEIGHTS;const a=Za(e,"labels","logLoss"),i=Za(t,"predictions","logLoss");let o=null;null!=n&&(o=Za(n,"weights","logLoss")),he(a.shape,i.shape,"Error in logLoss: ");const l=Xo(1),u=Xo(s),c=Vl(zo(a,zh(Oo(i,u)))),h=zo(ol(l,a),zh(Oo(ol(l,i),u))),d=ol(c,h);return Ef(d,o,r)}});const Of=ti({meanSquaredError_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:$f.SUM_BY_NONZERO_WEIGHTS;const r=Za(e,"labels","meanSquaredError"),a=Za(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Za(n,"weights","meanSquaredError")),he(r.shape,a.shape,"Error in meanSquaredError: ");const o=lp(r,a);return Ef(o,i,s)}});const Mf=ti({sigmoidCrossEntropy_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:$f.SUM_BY_NONZERO_WEIGHTS,a=Za(e,"multiClassLabels","sigmoidCrossEntropy");const i=Za(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Za(n,"weights","sigmoidCrossEntropy")),he(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=Xo(s),t=Xo(1),n=Xo(.5);a=Oo(zo(a,ol(t,e)),zo(n,e))}const l=function(e,t){const n=Za(e,"labels","sigmoidCrossEntropyWithLogits"),s=Za(t,"logits","sigmoidCrossEntropyWithLogits");he(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Ld(s),a=zo(s,n),i=Ph(vh(Vl(ul(s))));return Oo(ol(r,a),i)}(a,i);return Ef(l,o,r)}});const Lf=ti({softmaxCrossEntropy_:function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:$f.SUM_BY_NONZERO_WEIGHTS,a=Za(e,"onehotLabels","softmaxCrossEntropy");const i=Za(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Za(n,"weights","softmaxCrossEntropy")),he(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=Xo(s),t=Xo(1),n=Xo(a.shape[1]);a=Oo(zo(a,ol(t,e)),Lo(e,n))}const l=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=qo(((e,t,s)=>{const r=Uh(t,[n],!0),a=ol(Fo(t,"float32"),r);s([e,a]);const i=Vl(zo(a,e));return{value:yh(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=ch(e.shape,[n]);return[zo(fc(e,a),ol(Fo(s,"float32"),vh(r))),zo(fc(e,a),ol(vh(r),Fo(s,"float32")))]}}}));return s(e,t)}(a,i);return Ef(l,o,r)}});const zf=ti({sparseFillEmptyRows_:function(e,t,n,s){const r=Za(e,"indices","sparseFillEmptyRows","int32"),a=Za(t,"values","sparseFillEmptyRows"),i=Za(n,"denseShape","sparseFillEmptyRows","int32"),o=Za(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:r,values:a,denseShape:i,defaultValue:o},u=Va.runKernel(qs,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const Pf=ti({sparseReshape_:function(e,t,n){const s=Za(e,"inputIndices","sparseReshape","int32"),r=Za(t,"inputShape","sparseReshape","int32"),a=Za(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=Va.runKernel(Ks,i);return{outputIndices:o[0],outputShape:o[1]}}});const Bf=ti({sparseSegmentMean_:function(e,t,n){const s=Za(e,"data","sparseSegmentMean"),r=Za(t,"indices","sparseSegmentMean","int32"),a=Za(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Va.runKernel(Xs,i)}});const Wf=ti({sparseSegmentSum_:function(e,t,n){const s=Za(e,"data","sparseSegmentSum"),r=Za(t,"indices","sparseSegmentSum","int32"),a=Za(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Va.runKernel(Ys,i)}});const Vf=ti({stringNGrams_:function(e,t,n,s,r,a,i,o){const l=Za(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Za(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},h={data:l,dataSplits:u},d=Va.runKernel(nr,h,c);return{nGrams:d[0],nGramsSplits:d[1]}}});const Uf=ti({stringSplit_:function(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const s=Za(e,"input","stringSplit","string"),r=Za(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=Va.runKernel(sr,i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const Gf=ti({stringToHashBucketFast_:function(e,t){const n=Za(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return Va.runKernel(rr,r,s)}});const Hf=ti({staticRegexReplace_:function(e,t,n){let s=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];const r=Za(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:s};return Va.runKernel(er,{x:r},a)}}),jf={fft:sp,ifft:rp,rfft:op,irfft:ap},qf={hammingWindow:Kp,hannWindow:Xp,frame:Yp,stft:Jp},Kf={flipLeftRight:Qp,grayscaleToRGB:ef,resizeNearestNeighbor:vf,resizeBilinear:wf,rgbToGrayscale:tf,rotateWithOffset:nf,cropAndResize:Zp,nonMaxSuppression:rf,nonMaxSuppressionAsync:mf,nonMaxSuppressionWithScore:gf,nonMaxSuppressionWithScoreAsync:yf,nonMaxSuppressionPadded:bf,nonMaxSuppressionPaddedAsync:xf,threshold:kf,transform:If},Xf={bandPart:Nf,gramSchmidt:Sf,qr:Cf},Yf={absoluteDifference:Af,computeWeightedLoss:Ef,cosineDistance:Rf,hingeLoss:Ff,huberLoss:Df,logLoss:_f,meanSquaredError:Of,sigmoidCrossEntropy:Mf,softmaxCrossEntropy:Lf},Jf={sparseFillEmptyRows:zf,sparseReshape:Pf,sparseSegmentMean:Bf,sparseSegmentSum:Wf},Zf={stringNGrams:Vf,stringSplit:Uf,stringToHashBucketFast:Gf,staticRegexReplace:Hf},Qf=Bu,em="undefined"!==typeof requestAnimationFrame?requestAnimationFrame:"undefined"!==typeof setImmediate?setImmediate:e=>e();function tm(){return new Promise((e=>em((()=>e()))))}function nm(e,t){const n=e[0].length;e.forEach(((e,t)=>{ce(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),ce(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)ce(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function sm(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var rm;function am(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],i=s[s.length-n.length+r],o=s[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${o}`)}else s[i]=a}return s}function im(e){const t={FIRST_DIM_SIZE:rm.FIRST_DIM_SIZE,VALUE_ROWIDS:rm.VALUE_ROWIDS,ROW_LENGTHS:rm.ROW_LENGTHS,ROW_SPLITS:rm.ROW_SPLITS,ROW_LIMITS:rm.ROW_LIMITS,ROW_STARTS:rm.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function om(e){return 0===e.length?0:e[0]===rm.FIRST_DIM_SIZE?e.length-1:e.length}function lm(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(rm||(rm={}));const um=30;function cm(e){return e<=um?e:ze(e,Math.floor(Math.sqrt(e)))}function hm(e,t,n){return[n*("number"===typeof e?e:e[0]),t*("number"===typeof e?e:e[1])]}function dm(e,t,n){let s=[];if(!(arguments.length>3&&void 0!==arguments[3])||arguments[3])s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function pm(e,t){const n=[];if(!(arguments.length>2&&void 0!==arguments[2])||arguments[2]){n.push(t);for(let s=t+1;s<e;++s)s<=2*t?(n.push(s),n.push(s-(t+1))):n.push(s)}else{const s=[],r=[];for(let n=1;n<e;++n)n>=2*t+1||n%2===1?r.push(n):s.push(n);n.push(...s),n.push(0),n.push(...r)}return n}function fm(e,t,n){let s=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let a=1;a<e.length;++a)a<=t.length?s?r.push(t[a-1]*e[a]):r.push(e[a]/t[a-1]):r.push(e[a]);return r}function mm(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function gm(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}const ym=1.7580993408473768,bm=1.0507009873554805,xm=.3275911,wm=.254829592,vm=-.284496736,km=1.421413741,Im=-1.453152027,Nm=1.061405429;function Sm(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Tm(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Cm(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function $m(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function Em(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Am(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Rm(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Fm(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Dm="->",_m=/->/g,Om=",",Mm="...";function Lm(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(_m,"").length)/Dm.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${Dm}").`);const[s,r]=e.split(Dm);ce(-1===s.indexOf(Mm),(()=>`The ellipsis notation ("${Mm}") is not supported yet.`));const a=s.split(Om),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let h=0;h<r.length;++h){const e=r[h];if(!a.some((t=>-1!==t.indexOf(e))))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===o.indexOf(e)&&o.push(e)}for(let h=0;h<s.length;++h){const e=s[h];-1===o.indexOf(e)&&e!==Om&&o.push(e)}const l=new Array(a.length);for(let h=0;h<i;++h){if(new Set(a[h].split("")).size!==a[h].length)throw new Error(`Found duplicate axes in input component ${a[h]}. Support for duplicate axes in input is not implemented yet.`);l[h]=[];for(let e=0;e<a[h].length;++e)l[h].push(o.indexOf(a[h][e]))}const u=o.length,c=[];for(let h=r.length;h<u;++h)c.push(h);return{allDims:o,summedDims:c,idDims:l}}function zm(e,t){let n=new Array(e);n.fill(-1);for(let r=0;r<t.length;++r)n[t[r]]=r;const s=[];for(let r=0;r<e;++r)-1===n[r]&&s.push(r);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function Pm(e,t,n){const s=new Array(e);for(let r=0;r<n.length;++r){const e=n[r].shape;for(let n=0;n<t[r].length;++n)void 0===s[t[r][n]]?s[t[r][n]]=e[n]:ce(s[t[r][n]]===e[n],(()=>`Expected dimension ${s[t[r][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension ${e[n]}`))}}function Bm(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let i=0;i<r;++i)s.push([]);const a=[];for(let i=0;i<n.length;++i){const e=Vm(t,n[i]);for(const t of e)-1===a.indexOf(t)&&(s[i].push(t),a.push(t))}return{path:n,steps:s}}function Wm(e){return e.every(((e,t)=>e===t))}function Vm(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Um(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=[];if("number"===typeof t)ce(e.shape[n]%t===0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);ce(r<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const s=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-s}ce(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Gm(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Hm(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function jm(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function qm(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Km(e,t){return`size ${e} must be non-negative, not ${t}`}function Xm(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Ym(e,t){return`Input to reshape is a SparseTensor with ${pe(e)}\n  dense values, but the requested shape requires a multiple of ${pe(t)}. inputShape=${e} outputShape= ${t}`}function Jm(e,t){return`Input to reshape is a tensor with ${pe(e)} dense values, but the requested shape has ${pe(t)}. inputShape=${e} outputShape=${t}`}function Zm(){return"segment ids must be >= 0"}function Qm(){return"segment ids are not increasing"}function eg(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function tg(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function ng(e,t){let n,s=!1;for(e<=um?(n=e,s=!0):n=ze(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=ze(e,n+1);return n}function sg(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function rg(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let h=0;h<s;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)o.push(e.shape[h]),l*=e.shape[h];for(let h=s;h<n;h++)o.push(e.shape[h]),u*=e.shape[h];for(let h=s;h<r;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function ag(e){try{return e.map((e=>na(e)))}catch(Fj){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${Fj}`)}}function ig(e){return e.map((e=>ta(e)))}var og;!function(){for(const e of bl)el(e)}(),function(e){e.UNDEFINED="undefined",e.INVALID_MODEL_TYPE="invalidModelType",e.MISSING_PATH="missingPath"}(og||(og={}));const lg=e=>!(!Boolean(e)||!Array.isArray(e)||4!==e.length)&&e.every((e=>null===e||"number"===typeof e)),ug=e=>lg(e)&&null!==e[1]&&null!==e[2]&&e[1]>0&&e[2]>0;function cg(e){return function(t){try{return t.shape.length===e}catch(Fj){}return!1}}const hg=cg(4),dg=cg(3),pg=e=>e instanceof wa;class fg extends Error{type;constructor(e){super(e),this.type=e}}const mg=e=>"number"===typeof e,gg=e=>Array.isArray(e)&&2===e.length&&e.every(mg),yg=e=>{console.warn(Array.isArray(e)?e.join("\n"):e)};function bg(e){return void 0!==e&&"function"===typeof e}function xg(e){return bg(e)&&e.length<=1}const wg=(e,t,n)=>!(!bg(e)||e.length<=1)&&(void 0===n&&"tensor"===t||"tensor"===n);async function vg(e,t){let n;for(n=await e.next();!n.done;n=await e.next())t&&await t(n.value);return n.value}function kg(e){return null!==e&&void 0!==e}function Ig(e,t){for(var n=arguments.length,s=new Array(n>2?n-2:0),r=2;r<n;r++)s[r-2]=arguments[r];const a=s.filter(kg);if(a.length){const n=e.tidy((()=>a.reduce(((e,t)=>t(e)),t)));return t.isDisposed||t===n||t.dispose(),n}return t}const Ng=["Passing a model definition as a function is deprecated and will be removed in a future version.","To leverage model lifecycle methods, use the setup and teardown methods.","For more information, see https://upscalerjs.com/documentation/troubleshooting#deprecated-model-definition-function."].join(" "),Sg=['"padding" is undefined, but "patchSize" is explicitly defined.',"Without padding, patches of images often have visible artifacting at the seams. Defining an explicit padding will resolve the artifacting.","For more information, see https://upscalerjs.com/documentation/troubleshooting#padding-is-undefined.",'To hide this warning, pass an explicit padding of "0".'].join(" "),Tg=['The "progress" callback was provided but "patchSize" was not defined.','Without a "patchSize", the "progress" callback will never be called.',"For more information, see https://upscalerjs.com/documentation/troubleshooting#progress-specified-without-patch-size."].join(" "),Cg=["The model output was not a valid tensor. UpscalerJS only supports models returning valid tensors.","This is likely an error with the model itself, not UpscalerJS.","For more information, see https://upscalerjs.com/documentation/troubleshooting#invalid-model-prediction."].join(" "),$g=new Error("No defined tensors were passed to concatTensors");class Eg extends Error{message="The upscale request received an abort signal"}const Ag="There is a bug with the upscaler code. Please report this.",Rg=["You have provided a patchSize, but the model definition already includes an input size.","Your patchSize will be ignored.","For more information, see https://upscalerjs.com/documentation/troubleshooting#input-size-and-patch-size."].join(" "),Fg=new Error(["Model input sizes must be square. If you are using a model with a non-square input size and would like to request support,","please file a feature request at https://github.com/thekevinscott/upscalerjs"].join(" "));function Dg(e,t){switch(e){case og.INVALID_MODEL_TYPE:return new Error((s=t?.modelType,[`You've provided an invalid model type: ${JSON.stringify(s)}. Accepted types are "layers" and "graph".`,"For more information, see https://upscalerjs.com/documentation/troubleshooting#invalid-model-type."].join(" ")));case og.MISSING_PATH:return new Error((n=t,['Provided model configuration is missing both a "path" and "_internals". A valid path to a model JSON file must be provided.',"For more information, see https://upscalerjs.com/documentation/troubleshooting#missing-path-and-internals.",`The model configuration provided was: ${JSON.stringify(n)}`].join(" ")));default:return new Error(Ag)}var n,s}const _g=(e,t,n)=>async s=>{if(n&&await e.nextFrame(),(r=t)&&r.aborted)throw Array.isArray(s)?s.forEach((e=>e?.dispose())):pg(s)&&s.dispose(),new Eg;var r},Og=e=>!(!e||"object"!==typeof e)&&("patchSize"in e&&"number"===typeof e.patchSize),Mg=e=>Boolean(e)&&"number"===typeof e&&e>0,Lg=e=>new Error((e=>["Invalid value passed to warmup in warmupSizes:",JSON.stringify(e),"For more information, see https://upscalerjs.com/documentation/troubleshooting#invalid-warmup-value."].join("\n"))(e)),zg=e=>{if(Og(e)){const{patchSize:t}=e;return t}return e};const Pg=async function(e,t,n){let{signal:s,awaitNextFrame:r=!1}=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const a=_g(e,s||(arguments.length>4?arguments[4]:void 0).signal,r);await a(),await vg(async function*(e,t,n){const{model:s,modelDefinition:r}=await t;for(const a of n){if(!Og(a)&&!Mg(a))throw Lg(a);const t=zg(a);let n=e.zeros([1,t,t,3]);yield[n];const i=[r.preprocess,e=>s.predict(e),r.postprocess].filter(Boolean);for(const s of i)n=Ig(e,n,s),yield[n];n.dispose(),yield}}(e,t,(e=>{if(Array.isArray(e)){for(const t of e)if(!Og(t)&&!Mg(t))throw Lg(e);return e}if(Og(e)||Mg(e))return[e];throw Lg(e)})(n)),a)};async function Bg(e,t){const n=function(e,t){return function(e){return"function"===typeof e}(t)?(yg(Ng),t(e)):t}(e,t);return n.setup&&await n.setup(e),n}function Wg(e,t,n){return"graph"===n?e.loadGraphModel(t):e.loadLayersModel(t)}const Vg=(e,t)=>{let{model:n}=t;const s=((e,t)=>((e,t)=>t instanceof e.LayersModel)(e,t)?t.layers[0].batchInputShape:t.inputs[0].shape)(e,n);if(!lg(s))throw new Error((r=s,[`Expected model to have a rank-4 compatible input shape. Instead got: ${JSON.stringify(r)}.`,"For more information, see https://upscalerjs.com/documentation/troubleshooting#error-with-model-input-shape."].join(" ")));var r;return s},Ug=(e,t)=>Math.ceil(t/e)*e,Gg=(e,t,n,s)=>{let{patchSize:r,padding:a}=n;const i=Vg(e,t);if(void 0!==r){if(r<=0)throw(e=>new Error([`Invalid patch size: ${e}. Patch size must be greater than 0.`].join(" ")))(r);if(void 0!==a&&2*a>=r)throw((e,t)=>new Error([`Invalid patch size and padding: ${e} and ${t}. Patch size must be greater than padding * 2.`].join(" ")))(r,a)}if(ug(i)){if(void 0!==r&&yg(Rg),i[1]!==i[2])throw Fg;return{patchSize:i[1],padding:a,modelInputShape:i}}void 0!==r&&void 0===a&&yg(Sg);const{divisibilityFactor:o}=t.modelDefinition;if(void 0!==o){if(void 0!==r){const e=Ug(o,r);return e!==r&&yg(((e,t,n)=>[`Invalid patch size: ${e}. The model has a defined divibility factor of ${t} and patch size must be a multiple of this number.`,`Patch size has been scaled up to ${n}.`,"\nFor more information, see https://upscalerjs.com/documentation/troubleshooting#patch-size-indivisible-by-divisibility-factor."].join(" "))(r,o,e)),{patchSize:e,padding:a,modelInputShape:[null,e,e,3]}}return{patchSize:void 0,padding:void 0,modelInputShape:[null,Ug(o,s[1]),Ug(o,s[2]),3]}}return{patchSize:r,padding:a,modelInputShape:void 0}},Hg=(e,t)=>n=>{const s=n.shape[1],r=n.shape[2];return ug(t)&&(t[1]>s||t[2]>r)?e.tidy((()=>{const a=Math.max(s,t[1]),i=Math.max(r,t[2]),o=e.zeros([1,s,i-r,3]),l=e.zeros([1,a-s,i,3]),u=e.concat([n,o],2);return e.concat([u,l],1)})):n},jg=(e,t,n)=>s=>{const r=t[1]*n,a=t[2]*n;return r<s.shape[1]||a<s.shape[2]?e.tidy((()=>e.slice(s,[0,0,0],[1,r,a,3]))):s},qg=e=>t=>{const n=gg(e)?e[1]:255;return t.clipByValue(0,n).mul(1===n?255:1)},Kg=(e,t)=>n=>gg(t)&&1===t[1]?e.mul(n,1/255):n;function Xg(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const s=t.filter(kg);if(0===s.length)throw $g;const r=e.concat(s,n);return t.forEach((e=>e?.dispose())),r}const Yg=(e,t,n,s)=>{let r=t;const a=0===t||n===e?0:s,i=r+n>e;let o=i?n-(e-r):0;const l=i||n===e?0:s,u=i?0:a;let c=n-(i?o:0);i&&(r=e-n),r-=u,o+=u,c-=u+l;return{pre:{origin:r,size:n},post:{origin:o,size:c},increment:n>e?e:n-a-l}},Jg=(e,t,n)=>{let[s,r]=e;const a=[];let i=0,o=0;for(;o<r;){const{pre:{origin:e,size:l},post:{origin:u,size:c},increment:h}=Yg(r,o,Math.min(t,r),n),d=[];for(;i<s;){const{pre:{origin:r,size:a},post:{origin:o,size:h},increment:p}=Yg(s,i,Math.min(t,s),n);d.push({pre:{origin:[e,r],size:[l,a]},post:{origin:[u,o],size:[c,h]}}),i+=p}a.push(d),i=0,o+=h}return a},Zg=(e,t,n,s)=>(e*n+t+1)/s,Qg=(e,t)=>{const n=e.predict(t);if(!pg(n))throw new Error(Cg);if(hg(n))return n;throw new Error((s=n.shape,[`The tensor returned by the model was not a valid rank-4 tensor. It's shape is ${JSON.stringify(s)}.}`,"UpscalerJS only supports models returning valid image-like data in four dimensional form.","For more information, see https://upscalerjs.com/documentation/troubleshooting#invalid-predicted-tensor."].join(" ")));var s};function ey(e,t,n,s,r){try{let{getImageAsTensor:a,tensorAsBase64:i}=r;return async function*(){const r=function(e){return pg(e)?e.clone():e}(t),o=await a(e,r);yield o;const l=o.shape,{patchSize:u,padding:c,modelInputShape:h}=Gg(e,s,n,l),d=Ig(e,o,s.modelDefinition.preprocess,Kg(e,s.modelDefinition.inputRange),h?Hg(e,h):void 0);yield d;const p=function(e,t,n,s,r,a){try{let{output:i,progress:o,progressOutput:l}=n,{originalImageSize:u,patchSize:c,padding:h=0}=r,{tensorAsBase64:d}=a;return async function*(){const{model:n,modelDefinition:r}=s,a=r.scale??1;if(c){const[s,p]=t.shape.slice(1),f=Jg([p,s],c,h);let m;yield;const g=f.length*f[0].length;for(let u=0;u<f.length;u++){const s=f[u],c=s.length;let h;yield[h,m];for(let p=0;p<c;p++){const{pre:f,post:y}=s[p];yield[m,h];const b=t.slice([0,...f.origin],[-1,...f.size]);yield[m,h,b];const x=Qg(n,b);b.dispose(),yield[m,h,x];const w=[0,y.origin[0]*a,y.origin[1]*a],v=[-1,y.size[0]*a,y.size[1]*a],k=x.slice(w,v);x.dispose(),yield[m,h,k];const I=Ig(e,k,r.postprocess,qg(r.outputRange));if(yield[m,h,I],void 0!==o&&bg(o)){const t=Zg(u,p,c,g);if(xg(o))o(t);else{const n=I.squeeze(),s={row:u,col:p,patchCoordinates:{pre:f,post:y}};if(wg(o,i,l))o(t,n,s);else{const r=d(e,n);n.dispose(),o(t,r,s)}}}yield[m,h,I],h=Xg(e,[h,I],2),I.dispose(),yield[m,h]}m=Xg(e,[m,h],1),h.dispose(),yield[m]}const y=Ig(e,m.clone(),jg(e,u,a));m?.dispose(),yield[y];const b=y.squeeze();return y.dispose(),b}o&&yg(Tg);const p=Qg(n,t);yield[p];const f=Ig(e,p.clone(),r.postprocess,qg(r.outputRange),jg(e,u,a));p.dispose(),yield[f];const m=f.squeeze();return f.dispose(),m}()}catch(i){return Promise.reject(i)}}(e,d,{output:n.output,progressOutput:n.progressOutput,progress:n.progress},s,{originalImageSize:l,patchSize:u,padding:c},{tensorAsBase64:i});let f=await p.next();for(yield f.value;!f.done;)f=await p.next(),Array.isArray(f.value)?yield[...f.value,d]:pg(f.value)?yield[f.value,d]:yield d;d.dispose();const m=f.value;if("tensor"===n.output)return m;const g=i(e,m);return m.dispose(),g}()}catch(a){return Promise.reject(a)}}const ty=Z;const ny={kernelName:rt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(e,hp(Fo(n,"float32"),-1))}}},sy={kernelName:at,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Bo(Fo(n,"float32")),s=Po(ol(Xo(1),t));return Vl(Lo(e,s))}}}},ry={kernelName:it,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Po(ol(Bo(Fo(n,"float32")),1));return Lo(e,t)}}}},ay={kernelName:ot,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dl(n.shape,s.shape);return{a:()=>{let t=e;const s=hl(n.shape,r);return s.length>0&&(t=yh(t,s)),fc(t,n.shape)},b:()=>{let t=e;const n=hl(s.shape,r);return n.length>0&&(t=yh(t,n)),fc(t,s.shape)}}}},iy={kernelName:lt,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},oy={kernelName:ht,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wo(n)}}},ly={kernelName:dt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wo(n)}}},uy={kernelName:pt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,Po(ol(Xo(1),Bo(Fo(n,"float32")))))}}},cy={kernelName:ft,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Po(Oo(Xo(1),Bo(Fo(n,"float32"))));return Lo(e,t)}}}},hy={kernelName:yt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dl(n.shape,s.shape);return{a:()=>{const t=Oo(Bo(n),Bo(s));let a=zo(e,Lo(s,t));const i=hl(n.shape,r);return i.length>0&&(a=yh(a,i)),fc(a,n.shape)},b:()=>{const t=Oo(Bo(n),Bo(s));let a=Vl(zo(e,Lo(n,t)));const i=hl(s.shape,r);return i.length>0&&(a=yh(a,i)),fc(a,s.shape)}}}},dy={kernelName:mt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,Oo(Bo(Fo(n,"float32")),1))}}},py={kernelName:gt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,ol(Xo(1),Bo(Fo(n,"float32"))))}}};const fy=ti({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Za(e,"dy","avgPool3dGrad"),o=Za(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=fc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=fc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ce(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),ce(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),pc("avgPool3dGrad",r,a);const h={dy:l,input:u},d={filterSize:n,strides:s,pad:r,dimRoundingMode:a},p=Va.runKernel(vt,h,d);return c?fc(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),my={kernelName:wt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>fy(e,s,r,a,i,o)}}};const gy=ti({avgPoolGrad_:function(e,t,n,s,r){const a=Za(e,"dy","avgPoolGrad"),i=Za(t,"input","avgPoolGrad");ce(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=fc(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=fc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ce(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),ce(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},d=Va.runKernel(xt,c,h);return u?fc(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),yy={kernelName:bt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>gy(e,s,r,a,i)}}},by={kernelName:kt,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Pl(e,r,!1,!1),b:()=>Pl(e,s,!0,!1)}:a&&!i?{a:()=>Pl(r,e,!1,!0),b:()=>Pl(s,e,!1,!1)}:{a:()=>Pl(r,e,!0,!0),b:()=>Pl(e,s,!0,!0)}:{a:()=>Pl(e,r,!1,!0),b:()=>Pl(s,e,!0,!1)}}},xy={kernelName:It,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>bd(e,s,r)}}},wy={kernelName:Tt,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let l=r.length-1;l>=0;l--)if(r[l]===a[l])i[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let l=0;l<i.length;l++)i[l]>1&&o.push(l);return{x:()=>yh(e,o,!0)}}},vy={kernelName:$t,gradFunc:e=>({x:()=>e.clone()})},ky={kernelName:Et,gradFunc:e=>({x:()=>Wo(e)})},Iy={kernelName:At,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>eh(Gh(Eh(s,r),Oh(s,a)),e,Wo(e))}}},Ny={kernelName:Ft,inputsToSave:["x"],gradFunc:ny.gradFunc},Sy={kernelName:Dt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=Ne(r,t[0].shape)[0],i=s.map((e=>e[a]));return ip(e,i,a).map((e=>()=>e))}},Ty={kernelName:_t,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return ce(uc(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Pc(s.shape,e,r,i,o,l),filter:()=>zp(s,e,r.shape,i,o,l)}}},Cy={kernelName:Mt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Lc(e,r,a,i,o,1,l),filter:()=>zp(e,s,r.shape,a,i,o,l)}}};const $y=ti({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=fc(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=fc(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),ce(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),ce(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),ce(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),ce(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),ce(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Va.runKernel(zt,o,l)}}),Ey={kernelName:Lt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;ce(uc(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Vc(i.shape,e,o,r,a),filter:()=>$y(i,e,o.shape,r,a)}}},Ay={kernelName:Bt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(Vl(Yd(Fo(n,"float32"))),e)}}},Ry={kernelName:Wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(Jd(Fo(n,"float32")),e)}}},Fy={kernelName:Ut,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=dh([r],s.rank);let n=qc(e,r,a,!i);return null!=t&&(n=Gl(n,t)),n}}}},Dy={kernelName:qt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;ce(uc(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return ce(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),ce(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),ce(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),ce(cc(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),pc("depthwiseConv2d",a,i),{x:()=>Hp(l.shape,e,u,r,a,o,i),filter:()=>Gp(l,e,u.shape,r,a,o,i)}}},_y={kernelName:Jt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Va.runKernel(Zt,a,n),filter:()=>Va.runKernel(Qt,i,n)}}},Oy={kernelName:sn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Va.runKernel(rn,s)}}},My={kernelName:an,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=zo(vh(Vl(Bo(n))),2/Math.sqrt(Math.PI));return{x:()=>zo(e,s)}}},Ly={kernelName:ln,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(e,n)}}},zy={kernelName:un,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>fc(e,n.shape)}}},Py={kernelName:cn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(e,vh(n))}}},By={kernelName:fn,gradFunc:e=>({x:()=>Wo(e)})},Wy={kernelName:mn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dl(n.shape,s.shape);return{a:()=>{const t=Lo(e,Fo(s,"float32")),a=hl(n.shape,r);return a.length>0?fc(yh(t,a),n.shape):t},b:()=>{let t=zo(e,Fo(n,"float32"));const a=hl(s.shape,r);a.length>0&&(t=fc(yh(t,a),s.shape));const i=Bo(s);return Vl(Lo(t,Fo(i,"float32")))}}}},Vy={kernelName:gn,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?Xo(1):o,u=hl(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=ol(r,a),d=zo(e,l),p=Hd(Oo(i,Xo(s))),f=zo(zo(zo(p,p),p),Xo(-.5));return{x:()=>1===a.rank?fc(zo(zo(e,Nh(fc(p,[1,1,1,a.shape[0]]),c)),l),r.shape):fc(zo(zo(e,p),l),r.shape),mean:()=>{let e=zo(zo(p,Xo(-1)),d);return 1===a.rank&&(e=yh(e,u)),fc(e,a.shape)},variance:()=>{let e=zo(zo(f,h),d);return 1===a.rank&&(e=yh(e,u)),fc(e,a.shape)},scale:()=>{const t=zo(h,p);let n=zo(e,t);return 1===a.rank&&(n=yh(n,u)),fc(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=yh(t,u)),fc(t,a.shape)}}}},Uy={kernelName:yn,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a,batchDims:i}=n,o=Ne(a,s.shape)[0],l=(e,t,n)=>()=>{const s=e.shape,r=t.size,i=s.slice(0,o),l=i.length,u=s.slice(a,s.length).slice(1),c=u.length,h=Gy(0,l),d=Gy(l+1,l+1+c),p=Hy([i,[r],u]),f=fc(n,p),m=fc(t,[r]),g=Hy([[l],h,d]),y=Gl(f,g);let b=Ip(y,m,e.shape[o]);const x=ph(g);return b=Gl(b,x),b};if(1===i){const t=s.shape[0],n=s.split(t,0);return{x:()=>{const t=cp(n.map(((t,n)=>l(t,r.slice(n,1),e.slice(n,1))())));return t.reshape(s.shape)},indices:()=>r}}return{x:l(s,r,e),indices:()=>r}}};function Gy(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Hy(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const jy={kernelName:wn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Wo(n),b:()=>Wo(s)}}},qy={kernelName:vn,gradFunc:e=>({x:()=>Fo(e,"float32")})},Ky={kernelName:Nn,gradFunc:e=>({x:()=>Wo(e)})},Xy={kernelName:Sn,gradFunc:e=>({x:()=>Wo(e)})},Yy={kernelName:Tn,gradFunc:e=>({x:()=>Wo(e)})},Jy={kernelName:Cn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=$h(s,0);return{x:()=>eh(a,e,zo(e,r))}}},Zy={kernelName:Fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,Oo(n,1))}}},Qy={kernelName:Rn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,Fo(n,"float32"))}}},eb={kernelName:Ln,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=vh(s);return ol(e,zo(yh(e,r,!0),t))}}}};const tb=ti({localResponseNormalizationBackprop_:function(e,t,n){const s={x:e,y:t,dy:n},r={depthRadius:arguments.length>3&&void 0!==arguments[3]?arguments[3]:5,bias:arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,alpha:arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,beta:arguments.length>6&&void 0!==arguments[6]?arguments[6]:.5};return Va.runKernel(Bn,s,r)}}),nb={kernelName:Pn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>tb(s,r,e,a,i,o,l)}}};function sb(e,t,n,s){return t.rank<n.rank&&(t=fc(t,ch(t.shape,s))),e.rank<n.rank&&(e=fc(e,ch(e.shape,s))),{x:()=>zo(e,Fo(Qc(n,t),e.dtype))}}const rb={kernelName:Vn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=sb(e,t[1],a,Ne(r,a.shape));return{x:()=>i.x()}}},ab={kernelName:Un,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>zo(e,Fo(Eh(n,s),"float32")),b:()=>zo(e,Fo(_h(n,s),"float32"))}}};const ib=ti({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Za(e,"dy","maxPool3dGrad"),l=Za(t,"input","maxPool3dGrad"),u=Za(n,"output","maxPool3dGrad");let c=o,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=fc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=fc(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=fc(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),ce(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),ce(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),ce(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),pc("maxPool3dGrad",a,i);const f={dy:c,input:h,output:d},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},g=Va.runKernel(qn,f,m);return p?fc(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),ob={kernelName:jn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>ib(e,s,r,a,i,o,l)}}};const lb=ti({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Za(e,"dy","maxPoolGrad"),l=Za(t,"input","maxPoolGrad"),u=Za(n,"output","maxPoolGrad");ce(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),ce(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),ce(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),pc("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Va.runKernel(Hn,c,h)}}),ub={kernelName:Gn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>lb(e,s,r,a,i,o)}}},cb={kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>xc(e,a,s.shape)}}},hb={kernelName:cs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>xc(e,a,s.shape)}}},db={kernelName:ds,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=dl(a.shape,i.shape);return{a:()=>{const t=Fo(i,"float32");let n=zo(e,zo(t,il(a,ol(t,Xo(1)))));const s=hl(a.shape,o);return s.length>0&&(n=yh(n,s)),fc(n,a.shape)},b:()=>{const t=$h(a,0),n=eh(t,zh(a),Wo(a));let s=zo(e,zo(r,n));const l=hl(i.shape,o);return l.length>0&&(s=yh(s,l)),fc(s,i.shape)}}}};function pb(e,t,n){const s=e.shape.length,r=s-n.length,a=dh(n,s);let i=e;null!=a&&(i=Gl(e,a));const o=i.shape.slice(),l=o.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=fc(t,s),a=jc(e,n,!0,!1),i=jc(e,n,!0,!0),o=zo(a,i);return zo(r,o)}(i.reshape(o),t,r);if(u=u.reshape(i.shape),null!=a){const e=ph(a);u=Gl(u,e)}return u}const fb={kernelName:Os,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=$h(n,Xo(0)),s=Xo(ym),r=Xo(bm),a=zo(e,r),i=zo(zo(e,s),vh(Fo(n,"float32")));return eh(t,a,i)}}}},mb={kernelName:Gs,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>kc(e,s,r)}}},gb={kernelName:Hs,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>yc(e,s)}}};const yb=[ny,sy,ry,ay,iy,oy,ly,uy,cy,hy,dy,py,my,yy,by,xy,wy,vy,ky,Iy,Ny,Sy,Cy,Ty,Ey,Ay,Ry,Fy,Dy,_y,{kernelName:tn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dl(n.shape,s.shape);return{a:()=>{const t=Lo(e,Fo(s,"float32")),a=hl(n.shape,r);return a.length>0?fc(yh(t,a),n.shape):t},b:()=>{let t=zo(e,Fo(n,"float32"));const a=hl(s.shape,r);a.length>0&&(t=fc(yh(t,a),s.shape));const i=Bo(s);return Vl(Lo(t,Fo(i,"float32")))}}}},Oy,My,Ly,zy,Py,Wy,By,Vy,Uy,jy,qy,Ky,Xy,Yy,Jy,Zy,Qy,eb,nb,rb,rb,ab,ob,ub,{kernelName:Xn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=Ne(r,s.shape),i=pe(uh(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=fc(e,t);return Lo(zo(n,nd(s.shape,"float32")),i)}}}},{kernelName:Yn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=sb(e,i,a,Ne(r,a.shape));return{x:()=>o.x()}}},{kernelName:Jn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>zo(e,Fo(Oh(n,s),"float32")),b:()=>zo(e,Fo($h(n,s),"float32"))}}},cb,{kernelName:Qn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dl(n.shape,s.shape);return{a:()=>{const t=hl(n.shape,r);return t.length>0?fc(yh(e,t),n.shape):e},b:()=>{const t=zo(e,Vl(Th(Lo(n,s)))),a=hl(s.shape,r);return a.length>0?fc(yh(t,a),s.shape):t}}}},{kernelName:ts,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dl(n.shape,s.shape);return{a:()=>{const t=zo(e,Fo(s,"float32")),a=hl(n.shape,r);return a.length>0?fc(yh(t,a),n.shape):t},b:()=>{const t=zo(e,Fo(n,"float32")),a=hl(s.shape,r);return a.length>0?fc(yh(t,a),s.shape):t}}}},{kernelName:ns,gradFunc:e=>({x:()=>Vl(e)})},{kernelName:ls,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>td(n.shape,"float32")}}},{kernelName:os,gradFunc:e=>({x:()=>Wo(e)})},{kernelName:us,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return Np(e,s).map((e=>()=>e))}},hb,hb,db,{kernelName:ps,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=$h(n,0);return{x:()=>eh(r,e,zo(e,s)),alpha:()=>{let t=eh(r,Wo(e),zo(e,n));const a=hl(s.shape,e.shape);return a.length>0&&(t=yh(t,a)),fc(t,s.shape)}}}},{kernelName:fs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=void 0===r||null===r?s.shape.map(((e,t)=>t)):"number"===typeof r?[r]:r,{x:()=>pb(s,e,a)}}},{kernelName:ws,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,Vl(Bo(n)))}}},{kernelName:Cs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=zo(Oh(n,6),hp(n));return{x:()=>zo(e,Fo(s,"float32"))}}},{kernelName:vs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(e,Fo(hp(n),"float32"))}}},{kernelName:ks,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fc(e,n.shape)}}},{kernelName:Ss,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Va.runKernel(Ts,r,n)}}},{kernelName:Is,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Va.runKernel(Ns,r,n)}}},{kernelName:$s,gradFunc:(e,t,n)=>{const{dims:s}=n,r=Ne(s,e.shape);return{x:()=>Pd(e,r)}}},{kernelName:Es,gradFunc:e=>({x:()=>Wo(e)})},{kernelName:As,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(Lo(e,zo(il(n,1.5),2)))}}},{kernelName:_s,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Fo(Wo(n),"float32"),t:()=>zo(e,Fo(n,e.dtype)),e:()=>zo(e,Fo(Hh(n),e.dtype))}}},fb,{kernelName:Bs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(e,zo(n,ol(Xo(1),n)))}}},{kernelName:Ps,gradFunc:e=>({x:()=>Wo(e)})},{kernelName:Ls,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(Gc(Fo(n,"float32")),e)}}},{kernelName:zs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(Hc(Fo(n,"float32")),e)}}},{kernelName:Ms,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=ku(s,r,a),u=[];for(let c=0;c<e.rank;c++)u.push([o[c],i[c]-o[c]-l[c]]);return{x:()=>pd(e,u)}}},{kernelName:js,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=zo(e,s);return{logits:()=>ol(a,zo(yh(a,[r],true),s))}}},{kernelName:Ws,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(e,bc(n))}}},mb,mb,gb,gb,{kernelName:Vs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,zo(Po(Fo(n,"float32")),2))}}},{kernelName:Zs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Xo(2);return{a:()=>zo(e,zo(r,ol(n,s))),b:()=>zo(e,zo(r,ol(s,n)))}}},{kernelName:Qs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(e,zo(Fo(n,"float32"),2))}}},{kernelName:yr,gradFunc:e=>({x:()=>Wo(e)})},{kernelName:ar,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dl(n.shape,s.shape);return{a:()=>{let t=e;const s=hl(n.shape,r);return s.length>0&&(t=yh(t,s)),fc(t,n.shape)},b:()=>{let t=e;const n=hl(s.shape,r);return n.length>0&&(t=yh(t,n)),fc(Vl(t),s.shape)}}}},{kernelName:Us,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;Ne(a,s.shape).forEach((e=>{r[e]=1}));const i=fc(e,r),o=zo(i,nd(s.shape,"float32"));return{x:()=>o}}},{kernelName:ir,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Lo(e,Bo(Gc(n)))}}},{kernelName:or,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>zo(ol(Xo(1),Bo(n)),e)}}},{kernelName:lr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Wo(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=Oo(t,xc(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=Oo(t,xc(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=Oo(t,xc(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=Oo(t,xc(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:hr,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=ph(r);return{x:()=>Gl(e,a)}}},{kernelName:pr,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>cp(e,r)}}},{kernelName:fr,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=pl(t,Wo(t)),s=Ch(e,n);let r=Eh(t,Xo(0,"int32"));const a=s.rank-r.rank;for(let o=0;o<a;++o)r=kh(r,o+1);r=Gh(r,nd(s.shape,"bool"));const i=Wo(s);return eh(r,s,i)}(e,n)}}},{kernelName:gr,gradFunc:e=>({x:()=>Wo(e)})}];for(const Dj of yb)Rr(Dj);va().prototype.abs=function(){return this.throwIfDisposed(),ul(this)},va().prototype.acos=function(){return this.throwIfDisposed(),Wu(this)},va().prototype.acosh=function(){return this.throwIfDisposed(),Vu(this)},va().prototype.add=function(e){return this.throwIfDisposed(),Oo(this,e)},va().prototype.all=function(e,t){return this.throwIfDisposed(),Gu(this,e,t)},va().prototype.any=function(e,t){return this.throwIfDisposed(),Hu(this,e,t)},va().prototype.argMax=function(e){return this.throwIfDisposed(),ju(this,e)},va().prototype.argMin=function(e){return this.throwIfDisposed(),qu(this,e)},va().prototype.asScalar=function(){return this.throwIfDisposed(),ce(1===this.size,(()=>"The array must have only 1 element.")),fc(this,[])},va().prototype.asType=function(e){return this.throwIfDisposed(),Fo(this,e)},va().prototype.as1D=function(){return this.throwIfDisposed(),fc(this,[this.size])},va().prototype.as2D=function(e,t){return this.throwIfDisposed(),fc(this,[e,t])},va().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),fc(this,[e,t,n])},va().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),fc(this,[e,t,n,s])},va().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),fc(this,[e,t,n,s,r])},va().prototype.asin=function(){return this.throwIfDisposed(),Ku(this)},va().prototype.asinh=function(){return this.throwIfDisposed(),Xu(this)},va().prototype.atan=function(){return this.throwIfDisposed(),Yu(this)},va().prototype.atan2=function(e){return this.throwIfDisposed(),Ju(this,e)},va().prototype.atanh=function(){return this.throwIfDisposed(),Zu(this)},va().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),mc(this,e,t,n,s)},va().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),kc(this,e,t)},va().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),Ic(this,e,t,n,s,r)},va().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Ac(this,e)},va().prototype.cast=function(e){return this.throwIfDisposed(),Fo(this,e)},va().prototype.ceil=function(){return this.throwIfDisposed(),Rc(this)},va().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Fc(this,e,t)},va().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof wa&&(e=[e]),yc([this,...e],t)},va().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),zc(this,e,t,n,s,r,a)},va().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Bc(this,e,t,n,s,r)},va().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Lc(this,e,t,n,s,r,a)},va().prototype.cos=function(){return this.throwIfDisposed(),Gc(this)},va().prototype.cosh=function(){return this.throwIfDisposed(),Hc(this)},va().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),jc(this,e,t,n)},va().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),qc(this,e,t,n)},va().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Xc(this,e,t)},va().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Yc(this,e,t,n,s,r,a)},va().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),Zc(this,e,t,n,s,r)},va().prototype.divNoNan=function(e){return this.throwIfDisposed(),th(this,e)},va().prototype.div=function(e){return this.throwIfDisposed(),Lo(this,e)},va().prototype.dot=function(e){return this.throwIfDisposed(),nh(this,e)},va().prototype.elu=function(){return this.throwIfDisposed(),rh(this)},va().prototype.equal=function(e){return this.throwIfDisposed(),Qc(this,e)},va().prototype.erf=function(){return this.throwIfDisposed(),ih(this)},va().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),wh(this,e,t)},va().prototype.exp=function(){return this.throwIfDisposed(),vh(this)},va().prototype.expandDims=function(e){return this.throwIfDisposed(),kh(this,e)},va().prototype.expm1=function(){return this.throwIfDisposed(),Ih(this)},va().prototype.fft=function(){return this.throwIfDisposed(),sp(this)},va().prototype.flatten=function(){return this.throwIfDisposed(),fc(this,[this.size])},va().prototype.floor=function(){return this.throwIfDisposed(),Th(this)},va().prototype.floorDiv=function(e){return this.throwIfDisposed(),Mo(this,e)},va().prototype.gather=function(e,t,n){return this.throwIfDisposed(),Ch(this,e,t,n)},va().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Eh(this,e)},va().prototype.greater=function(e){return this.throwIfDisposed(),$h(this,e)},va().prototype.ifft=function(){return this.throwIfDisposed(),rp(this)},va().prototype.irfft=function(){return this.throwIfDisposed(),ap(this)},va().prototype.isFinite=function(){return this.throwIfDisposed(),Ah(this)},va().prototype.isInf=function(){return this.throwIfDisposed(),Rh(this)},va().prototype.isNaN=function(){return this.throwIfDisposed(),Fh(this)},va().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Dh(this,e)},va().prototype.lessEqual=function(e){return this.throwIfDisposed(),Oh(this,e)},va().prototype.less=function(e){return this.throwIfDisposed(),_h(this,e)},va().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Lh(this,e,t,n,s)},va().prototype.logSigmoid=function(){return this.throwIfDisposed(),Wh(this)},va().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Vh(this,e)},va().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Uh(this,e,t)},va().prototype.log=function(){return this.throwIfDisposed(),zh(this)},va().prototype.log1p=function(){return this.throwIfDisposed(),Ph(this)},va().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Gh(this,e)},va().prototype.logicalNot=function(){return this.throwIfDisposed(),Hh(this)},va().prototype.logicalOr=function(e){return this.throwIfDisposed(),jh(this,e)},va().prototype.logicalXor=function(e){return this.throwIfDisposed(),qh(this,e)},va().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Pl(this,e,t,n)},va().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Jh(this,e,t,n,s)},va().prototype.max=function(e,t){return this.throwIfDisposed(),mh(this,e,t)},va().prototype.maximum=function(e){return this.throwIfDisposed(),pl(this,e)},va().prototype.mean=function(e,t){return this.throwIfDisposed(),ed(this,e,t)},va().prototype.min=function(e,t){return this.throwIfDisposed(),gh(this,e,t)},va().prototype.minimum=function(e){return this.throwIfDisposed(),rd(this,e)},va().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),ad(this,e,t)},va().prototype.mod=function(e){return this.throwIfDisposed(),id(this,e)},va().prototype.mul=function(e){return this.throwIfDisposed(),zo(this,e)},va().prototype.neg=function(){return this.throwIfDisposed(),Vl(this)},va().prototype.norm=function(e,t,n){return this.throwIfDisposed(),xh(this,e,t,n)},va().prototype.notEqual=function(e){return this.throwIfDisposed(),cd(this,e)},va().prototype.oneHot=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return this.throwIfDisposed(),Bl(this,e,t,n)},va().prototype.onesLike=function(){return this.throwIfDisposed(),hd(this)},va().prototype.pad=function(e,t){return this.throwIfDisposed(),pd(this,e,t)},va().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),xd(this,e,t,n,s,r,a)},va().prototype.pow=function(e){return this.throwIfDisposed(),il(this,e)},va().prototype.prelu=function(e){return this.throwIfDisposed(),wd(this,e)},va().prototype.prod=function(e,t){return this.throwIfDisposed(),vd(this,e,t)},va().prototype.reciprocal=function(){return this.throwIfDisposed(),Md(this)},va().prototype.relu=function(){return this.throwIfDisposed(),Ld(this)},va().prototype.relu6=function(){return this.throwIfDisposed(),zd(this)},va().prototype.reshapeAs=function(e){return this.throwIfDisposed(),fc(this,e.shape)},va().prototype.reshape=function(e){return this.throwIfDisposed(),fc(this,e)},va().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),wf(this,e,t,n)},va().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),vf(this,e,t,n)},va().prototype.reverse=function(e){return this.throwIfDisposed(),Pd(this,e)},va().prototype.rfft=function(){return this.throwIfDisposed(),op(this)},va().prototype.round=function(){return this.throwIfDisposed(),Gd(this)},va().prototype.rsqrt=function(){return this.throwIfDisposed(),Hd(this)},va().prototype.selu=function(){return this.throwIfDisposed(),jd(this)},va().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),qd(this,e,t,n,s,r,a)},va().prototype.sigmoid=function(){return this.throwIfDisposed(),bc(this)},va().prototype.sign=function(){return this.throwIfDisposed(),Xd(this)},va().prototype.sin=function(){return this.throwIfDisposed(),Yd(this)},va().prototype.sinh=function(){return this.throwIfDisposed(),Jd(this)},va().prototype.slice=function(e,t){return this.throwIfDisposed(),xc(this,e,t)},va().prototype.softmax=function(e){return this.throwIfDisposed(),np(this,e)},va().prototype.softplus=function(){return this.throwIfDisposed(),Bh(this)},va().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),bd(this,e,t)},va().prototype.split=function(e,t){return this.throwIfDisposed(),ip(this,e,t)},va().prototype.sqrt=function(){return this.throwIfDisposed(),Po(this)},va().prototype.square=function(){return this.throwIfDisposed(),Bo(this)},va().prototype.squaredDifference=function(e){return this.throwIfDisposed(),lp(this,e)},va().prototype.squeeze=function(e){return this.throwIfDisposed(),up(this,e)},va().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof wa?[this,e]:[this,...e];return cp(n,t)},va().prototype.step=function(e){return this.throwIfDisposed(),hp(this,e)},va().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),dp(this,e,t,n,s,r,a,i,o)},va().prototype.sub=function(e){return this.throwIfDisposed(),ol(this,e)},va().prototype.sum=function(e,t){return this.throwIfDisposed(),yh(this,e,t)},va().prototype.tan=function(){return this.throwIfDisposed(),pp(this)},va().prototype.tanh=function(){return this.throwIfDisposed(),wc(this)},va().prototype.tile=function(e){return this.throwIfDisposed(),Nh(this,e)},va().prototype.toBool=function(){return this.throwIfDisposed(),Fo(this,"bool")},va().prototype.toFloat=function(){return this.throwIfDisposed(),Fo(this,"float32")},va().prototype.toInt=function(){return this.throwIfDisposed(),Fo(this,"int32")},va().prototype.topk=function(e,t){return this.throwIfDisposed(),wp(this,e,t)},va().prototype.transpose=function(e){return this.throwIfDisposed(),Gl(this,e)},va().prototype.unique=function(e){return this.throwIfDisposed(),kp(this,e)},va().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Ip(this,e,t)},va().prototype.unstack=function(e){return this.throwIfDisposed(),Np(this,e)},va().prototype.where=function(e,t){return this.throwIfDisposed(),eh(e,this,t)},va().prototype.zerosLike=function(){return this.throwIfDisposed(),Wo(this)};class bb extends Error{constructor(e){super(e),Object.setPrototypeOf(this,bb.prototype)}}class xb extends Error{constructor(e){super(e),Object.setPrototypeOf(this,xb.prototype)}}class wb extends Error{constructor(e){super(e),Object.setPrototypeOf(this,wb.prototype)}}class vb extends Error{constructor(e){super(e),Object.setPrototypeOf(this,vb.prototype)}}class kb extends Error{constructor(e){super(e),Object.setPrototypeOf(this,kb.prototype)}}Error;class Ib{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function Nb(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Sb(e,t){if(!e)throw new kb(t)}function Tb(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Cb(e){return 1===e.length?e[0]:e}function $b(e){return Array.isArray(e)?e:[e]}function Eb(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Ab(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let Rb={};function Fb(e){if(null===e||void 0===e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Db(e){if(null!=e&&"object"===typeof e)if(Array.isArray(e))e.forEach((e=>Db(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"===typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!==typeof t.value?Db(t):e[n]=t.value)}}}function _b(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"object",r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if("string"===typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Rb)a=Rb[r];else if(a=t[r],null==a)throw new wb(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new wb(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Rb?[o,l]=Rb.className:i in t&&([o,l]=t[i]),null==o)throw new wb(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const n of Object.keys(Rb))e[n]=Rb[n];for(const r of Object.keys(n))e[r]=n[r];a.config.customObjects=e;const t=Object.assign({},Rb);for(const r of Object.keys(n))Rb[r]=n[r];Db(a.config);const s=l(o,a.config,n,r);return Rb=Object.assign({},t),s}{const e=Object.assign({},Rb);for(const s of Object.keys(n))Rb[s]=n[s];const t=new o(a.config);return Rb=Object.assign({},e),t}}}function Ob(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Mb(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Lb(e){if(null==e)throw new wb(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function zb(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new wb(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Pb(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1/0;return Sb(n>=0),Sb(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function Bb(e,t){Array.isArray(e)?(ce(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Bb(e,`element ${n+1} of ${t}`)))):ce(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Wb(e)}.`))}function Wb(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Wb(e))).join(",")+"]":"string"===typeof e?`"${e}"`:`${e}`}function Vb(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let Ub=0;function Gb(){return Ub++}const Hb={};function jb(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e in Hb||(Hb[e]=0),Hb[e]+=1,e+Hb[e].toString()}const qb=["channelsFirst","channelsLast"],Kb=["nearest","bilinear"],Xb=["valid","same","causal"],Yb=["max","avg"],Jb=["sum","mul","concat","ave"],Zb=new Map;function Qb(e){zb(qb,"DataFormat",e)}function ex(e){zb(Xb,"PaddingMode",e)}function tx(e){zb(Yb,"PoolMode",e)}const nx=[],sx="/";function rx(e,t){nx.push(e);try{const e=t();return nx.pop(),e}catch(n){throw nx.pop(),n}}function ax(e){if(!lx(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===nx.length?"":nx.join(sx)+sx)+e}function ix(e){if(!lx(e))throw new Error("Not a valid tensor name: '"+e+"'");Zb.has(e)||Zb.set(e,0);const t=Zb.get(e);if(Zb.set(e,Zb.get(e)+1),t>0){const n=`${e}_${t}`;return Zb.set(n,1),n}return e}const ox=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function lx(e){return!!e.match(ox)}function ux(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function cx(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function hx(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function dx(e,t){if(t<e)throw new wb(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let px;function fx(){return null==px&&(px=Ti().epsilon()),px}function mx(e,t){return Fo(e,t)}function gx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),fc(e,n)}function yx(e,t,n){return mi((()=>{switch(e.rank){case 1:return Zd(e,t,n);case 2:return Qd(e,[t,0],[n,e.shape[1]]);case 3:return ep(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return tp(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return xc(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return xc(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new wb(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function bx(e,t,n){return mi((()=>{switch(e.rank){case 1:return Zd(e,t,n);case 2:return Qd(e,[0,t],[e.shape[0],n]);case 3:return ep(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return tp(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new wb(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function xx(e,t,n,s){return mi((()=>{switch(e.rank){case 1:return Zd(e,t,n);case 2:switch(s){case 1:return yx(e,t,n);case 2:return bx(e,t,n);default:throw new wb(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return yx(e,t,n);case 2:return ep(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return bx(e,t,n);default:throw new wb(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return yx(e,t,n);case 2:return tp(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return tp(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return bx(e,t,n);default:throw new wb(`The axis is not within the rank of the tensor ${s}`)}default:throw new wb(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function wx(e){let t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;return n<0&&(t=e[0].rank,n=0!==t?t:0),n===e[0].rank&&(n=-1),yc(e,n)}function vx(e,t){switch(e.rank){case 1:return Dc([e,t]);case 2:return _c([e,t],0);case 3:return Oc([e,t],0);case 4:return Mc([e,t],0);default:throw new wb(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function kx(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new wb(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Nh(e,t)}function Ix(e){return Rd(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,arguments.length>3?arguments[3]:void 0,arguments.length>4?arguments[4]:void 0)}function Nx(e,t,n,s){if(e.rank<2||t.rank<2)throw new vb(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new vb(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return qp({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Cx(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=fc(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=fc(Gl(t,c),[l,-1]);const h=[...r,...u];return fc(qp({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Cx(e.rank,s,"channelsLast"):null,activation:n}),h)}}function Sx(e,t,n){return mi((()=>(t=Array.isArray(t)?fp(t,"int32"):Fo(t,"int32"),Ch(e,t,n))))}function Tx(e){return zo(e,e)}function Cx(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new wb(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?fc(t,[1,s[0],1,1,1]):fc(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?fc(t,[1,1,1,1,s[0]]):fc(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?fc(t,[1,s[0],1,1]):fc(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?fc(t,[1,1,1,s[0]]):fc(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?fc(t,[1,s[0],1]):fc(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?fc(t,[1,1,s[0]]):fc(t,[1].concat(s))}else if(e<3)return t;throw new wb(`Unsupported input rank by biasAdd: ${t.rank}`)}function $x(e,t,n){return mi((()=>(null==n&&(n="channelsLast"),Qb(n),Oo(e,Cx(e.rank,t,n)))))}function Ex(e,t,n,s){return mi((()=>_p(e,t,n,s)))}function Ax(e,t){return arguments.length>2&&void 0!==arguments[2]&&arguments[2]?e():t()}const Rx=["fanIn","fanOut","fanAvg"],Fx=["normal","uniform","truncatedNormal"];class Dx extends Zo{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class _x extends Dx{apply(e,t){return td(e,t)}}_x.className="Zeros",el(_x);class Ox extends Dx{apply(e,t){return nd(e,t)}}Ox.className="Ones",el(Ox);class Mx extends Dx{constructor(e){if(super(),"object"!==typeof e)throw new wb(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new wb(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return mi((()=>zo(Xo(this.value),nd(e,t))))}getConfig(){return{value:this.value}}}Mx.className="Constant",el(Mx);class Lx extends Dx{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Dd(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Lx.className="RandomUniform",el(Lx);class zx extends Dx{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new vb(`randomNormal does not support dType ${t}.`);return Ix(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}zx.className="RandomNormal",el(zx);class Px extends Dx{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new vb(`truncatedNormal does not support dType ${t}.`);return vp(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Px.className="TruncatedNormal",el(Px);class Bx extends Dx{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return mi((()=>{if(2!==e.length||e[0]!==e[1])throw new wb("Identity matrix initializer can only be used for 2D square matrices.");return zo(this.gain,Sh(e[0]))}))}getConfig(){return{gain:this.gain}}}Bx.className="Identity",el(Bx);class Wx extends Dx{constructor(e){if(super(),e.scale<0)throw new wb(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,zb(Rx,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){zb(Fx,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e){let t,n,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"channelsLast";if(Qb(s),2===e.length)t=e[0],n=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===s){const s=ux(e,2);t=e[1]*s,n=e[0]*s}else if("channelsLast"===s){const s=ux(e,0,e.length-2);t=e[e.length-2]*s,n=e[e.length-1]*s}}else{const s=ux(e);t=Math.sqrt(s),n=Math.sqrt(s)}return[t,n]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new vb(`${this.getClassName()} does not support dType ${t}.`);return vp(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return Dd(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Wx.className="VarianceScaling",el(Wx);class Vx extends Wx{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Wx.className}}Vx.className="GlorotUniform",el(Vx);class Ux extends Wx{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Wx.className}}Ux.className="GlorotNormal",el(Ux);class Gx extends Wx{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Wx.className}}Gx.className="HeNormal",el(Gx);class Hx extends Wx{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Wx.className}}Hx.className="HeUniform",el(Hx);class jx extends Wx{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Wx.className}}jx.className="LeCunNormal",el(jx);class qx extends Wx{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Wx.className}}qx.className="LeCunUniform",el(qx);class Kx extends Dx{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return mi((()=>{if(e.length<2)throw new vb("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=pe(e.slice(0,-1)),s=e[e.length-1],r=n*s;r>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`);const a=Ix([Math.max(s,n),Math.min(s,n)],0,1,t,this.seed),i=Xf.qr(a,!1);let o=i[0];const l=i[1].flatten().stridedSlice([0],[Math.min(s,n)*Math.min(s,n)],[Math.min(s,n)+1]);return o=zo(o,l.sign()),n<s&&(o=o.transpose()),zo(Xo(this.gain),o.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Kx.className="Orthogonal",el(Kx);const Xx={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Yx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _b(e,Qo.getMap().classNameMap,t,"initializer")}function Jx(e){return Fb(e)}function Zx(e){if("string"===typeof e){const t=e in Xx?Xx[e]:e;if("GlorotNormal"===t)return new Ux;if("GlorotUniform"===t)return new Vx;if("HeNormal"===t)return new Gx;if("HeUniform"===t)return new Hx;if("LeCunNormal"===t)return new jx;if("LeCunUniform"===t)return new qx;{const e={};return e.className=t,e.config={},Yx(e)}}return e instanceof Dx?e:Yx(e)}function Qx(e){return Array.isArray(e)&&Array.isArray(e[0])}function ew(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function tw(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new wb(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function nw(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new wb(`Expected exactly 1 Shape; got ${e.length}`)}return e}function sw(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const rw="Variable";class aw{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:rw,s=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Gb(),n=null==n?rw:n,this.originalName=ax(n),this.name=ix(this.originalName),this.trainable_=s,this.constraint=r,this.val=Tp(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function iw(e){return e.map((e=>e.read()))}function ow(e){e.forEach((e=>{e[0].write(e[1])}))}class lw{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class uw{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Gb(),null!=a&&(this.originalName=ax(a),this.name=ix(this.originalName)),this.rank=t.length}}let cw=0;class hw{constructor(e,t){this.callArgs=t,this.id=cw++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let dw=0;class pw extends Zo{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=dw++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Eb(e)+"_"+jb(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new xb(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new wb(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Cb(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Cb(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new bb(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new bb(`Layer ${this.name} is not connected, no input to return.`);return Cb(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new bb(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new bb(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Cb(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=$b(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=$b(this.inputSpec);if(t.length!==n.length)throw new wb(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let s=0;s<t.length;s++){const e=t[s],r=n[s];if(null==r)continue;const a=e.rank;if(null!=r.ndim&&a!==r.ndim)throw new wb(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new wb(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new wb(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&e.dtype!==r.dtype)throw new wb(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${e.dtype}.`);if(r.axes){const t=e.shape;for(const e in r.axes){const n=Number(e),a=r.axes[e],i=n>=0?t[n]:t[t.length+n];if(null!=a&&-1===[a,null].indexOf(i))throw new wb(`Input ${s} is incompatible with layer ${this.name}: expected axis ${n} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const n=r.shape[t],a=e.shape[t];if(null!=n&&null!=a&&n!==a)throw new wb(`Input ${s} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${e.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=$b(e),s=function(e){let t=!0;for(const n of $b(e))if(!(n instanceof uw)){t=!1;break}return t}(e),r=function(e){let t=!0;for(const n of $b(e))if(n instanceof uw){t=!1;break}return t}(e);if(s===r)throw new wb("Arguments to apply() must be all SymbolicTensors or all Tensors");return rx(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of $b(e))t.push(n.shape);this.build(Cb(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,s);const r=$b(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Cb(a),null!=this.activityRegularizer)throw new vb("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=$b(e);const t=[];for(const n of e)t.push(n.shape);return Cb(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new uw(a,n,this,$b(e),t,this.name,s))):new uw(a,s,this,$b(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new vb("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new bb(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new bb(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new xb(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return sw(this.weights)}build(e){this.built=!0}getWeights(){return iw(arguments.length>0&&void 0!==arguments[0]&&arguments[0]?this.trainableWeights:this.weights)}setWeights(e){mi((()=>{const t=this.weights;if(t.length!==e.length)throw new wb(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=iw(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!ge(a.shape,o.shape))throw new wb(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}ow(n)}))}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new wb(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():Zx("zeros"));const l=s.apply(t,n),u=new aw(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss((()=>r.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=$b(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const s=this.computeMask(e,n),r=$b(t),a=$b(s);if(r.length!==a.length)throw new Error(`${this.name} outputs ${r.length} tensors but ${r.length} masks for those tensors`);for(let i=0;i<r.length;i++)r[i].kerasMask=a[i]}addInboundNode(e,t,n,s,r,a){let i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null;const o=$b(e);t=$b(t),n=$b(n),s=$b(s),r=ew(r),a=ew(a);const l=[],u=[],c=[];for(const h of o)l.push(h.sourceLayer),u.push(h.nodeIndex),c.push(h.tensorIndex);new hw({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let h=0;h<t.length;h++)t[h].sourceLayer=this,t[h].nodeIndex=this.inboundNodes.length-1,t[h].tensorIndex=h}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0===--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function fw(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=fw(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class mw extends pw{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:jb("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new wb("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new wb("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new wb("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new uw(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new hw({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new wb(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function gw(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new wb("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new mw({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}mw.className="InputLayer",el(mw);class yw{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof yw)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new wb(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Fo(t,e.dtype)}catch(Fj){throw new wb(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof uw){if(null==this.id2Value[e.id])throw new wb(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new wb(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof uw){if(null==this.id2Value[e.id])throw new wb(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new wb(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&gi(this.id2Mask)}}const bw=new Ib,xw=new Ib;function ww(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const f of o)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let h,d=bw.get(c);if(null==d){const e=function(e,t){ce(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=kw(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=kw(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach((e=>s[t].add(e)))}}return{sorted:n,recipientCounts:vw(s)}}(i,t);d=e.sorted,h=e.recipientCounts,bw.put(c,d),xw.put(c,h)}h={},r||Object.assign(h,xw.get(c));const p=new yw(t);for(let f=0;f<d.length;++f){if(null!=s){const e=pi().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const e=d[f],a=e.sourceLayer;if(a instanceof mw)continue;const i=[],u=[],c=[];let m=!1;for(const n of e.inputs){const e=p.getValue(n),s=p.getMask(n);i.push(e),u.push(s),null!=s&&(m=!0),r||(h[n.name]--,0!==h[n.name]||t.hasKey(n)||-1!==o.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||c.push(e))}m&&((n=n||{}).mask=u[0]);const g=$b(a.apply(i,n));let y=null;a.supportsMasking&&(y=a.computeMask(i,u));const b=Iw(e),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){p.hasKey(x[t])||p.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}r||gi(c)}return p.disposeMasks(),a?l:l[0]}function vw(e){const t={};for(const n in e)t[n]=e[n].size;return t}function kw(e,t){const n=new Set,s=[],r={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function Iw(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function Nw(e,t){return mi((()=>Po(yh(zo(e,e),t,!0))))}Qe().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=bw&&bw.setMaxEntries(e),null!=xw&&xw.setMaxEntries(e)}));class Sw extends Zo{getConfig(){return{}}}class Tw extends Sw{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return mi((()=>{const t=Nw(e,this.axis),n=Fc(t,0,this.maxValue);return zo(e,Lo(n,Oo(fx(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Tw.className="MaxNorm",el(Tw);class Cw extends Sw{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return mi((()=>Lo(e,Oo(fx(),Nw(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Cw.className="UnitNorm",el(Cw);class $w extends Sw{apply(e){return Ld(e)}}$w.className="NonNeg",el($w);class Ew extends Sw{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return mi((()=>{const t=Nw(e,this.axis),n=Oo(zo(this.rate,Fc(t,this.minValue,this.maxValue)),zo(1-this.rate,t));return zo(e,Lo(n,Oo(fx(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Ew.className="MinMaxNorm",el(Ew);const Aw={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Rw(e){return Fb(e)}function Fw(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _b(e,Qo.getMap().classNameMap,t,"constraint")}function Dw(e){if(null==e)return null;if("string"===typeof e){return Fw({className:e in Aw?Aw[e]:e,config:{}})}return e instanceof Sw?e:Fw(e)}function _w(e){return new Tw(e)}function Ow(e){return new Cw(e)}function Mw(){return new $w}function Lw(e){return new Ew(e)}function zw(){return new _x}function Pw(){return new Ox}function Bw(e){return new Mx(e)}function Ww(e){return new Lx(e)}function Vw(e){return new zx(e)}function Uw(e){return new Px(e)}function Gw(e){return new Bx(e)}function Hw(e){return new Wx(e)}function jw(e){return new Vx(e)}function qw(e){return new Ux(e)}function Kw(e){return new Gx(e)}function Xw(e){return new Hx(e)}function Yw(e){return new jx(e)}function Jw(e){return new qx(e)}function Zw(e){return new Kx(e)}async function Qw(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!==typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];gi(s)}}function ev(e){if(null!=e)for(const t in e){const n=e[t];"number"!==typeof n&&n.dispose()}}var tv;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(tv||(tv={}));class nv{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class sv{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class rv extends nv{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const s in t){const e=t[s];if("number"===typeof e)this.totals.hasOwnProperty(s)||(this.totals[s]=0),this.totals[s]=this.totals[s]+e*n;else{let t;s in this.totals?t=this.totals[s]:this.totals[s]=0;const r=mi((()=>Oo(this.totals[s],zo(e,n))));this.totals[s]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const n of this.params.metrics)null!=this.totals[n]&&("number"===typeof this.totals[n]?t[n]=this.totals[n]/this.seen:mi((()=>{const e=zo(Lo(1,this.seen),this.totals[n]);t[n]=e,this.totals[n].dispose(),yi(t[n])})))}}class av extends nv{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const n in t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!==typeof s[a]){const i=s[a];e.push(i.data()),t.push(r),n.push(a)}}const s=await Promise.all(e);for(let r=0;r<s.length;++r){this.history[t[r]][n[r]].dispose(),this.history[t[r]][n[r]]=s[r][0]}}}class iv extends nv{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||tm,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Oe(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():Qr();return function(){const a=null!=n?n():Qr();return a-r<t||(r=a,s=e(...arguments)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Qw(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Qw(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Qw(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Qw(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Qw(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Oe(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Qw(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Qw(e),await this.trainEnd(e))}}function ov(e,t){if(null==e&&(e={}),e instanceof nv)return[e];if(Array.isArray(e)&&e[0]instanceof nv)return e;return $b(e).map((e=>new iv(e,t)))}class lv{constructor(){}static registerCallbackConstructor(e,t){ce(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),lv.checkForDuplicate(t),null==lv.constructors[e]&&(lv.constructors[e]=[]),lv.constructors[e].push(t)}static checkForDuplicate(e){for(const t in lv.constructors){lv.constructors[+t].forEach((t=>{if(t===e)throw new wb("Duplicate callback constructor.")}))}}static clear(){lv.constructors={}}static createCallbacks(e){const t=[];for(const n in lv.constructors){const s=+n;e>=s&&t.push(...lv.constructors[s])}return t.map((e=>new e))}}function uv(e,t,n,s,r,a,i,o,l){const u=new av,c=[new rv,...lv.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new sv(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function cv(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return _b(e,Qo.getMap().classNameMap,t,"layer",n)}function hv(e,t){return mi((()=>{"float32"!==e.dtype&&(e=Fo(e,"float32"));const n=yh(Tx(e),t,!0),s=rl(n.shape,fx()),r=Po(pl(n,s));return Lo(e,r)}))}function dv(e,t){return mi((()=>ed(Tx(ol(t,e)),-1)))}function pv(e,t){return mi((()=>ed(ul(ol(t,e)),-1)))}function fv(e,t){return mi((()=>{const n=ol(e,t),s=Fc(ul(e),fx(),Number.MAX_VALUE),r=ul(Lo(n,s));return zo(100,ed(r,-1))}))}function mv(e,t){return mi((()=>{const n=Fc(t,fx(),Number.MAX_VALUE),s=zh(Oo(1,n)),r=Fc(e,fx(),Number.MAX_VALUE),a=zh(Oo(1,r));return ed(Tx(ol(s,a)),-1)}))}function gv(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return mi((()=>{if(n)t=np(t);else{const e=yh(t,t.shape.length-1,!0);t=Lo(t,e)}return t=Fc(t,fx(),1-fx()),Vl(yh(zo(Fo(e,"float32"),zh(t)),t.shape.length-1))}))}function yv(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return mi((()=>{const s=Fo(Th(function(e){const t=[ux(e.shape)];return fc(e,t)}(e)),"int32"),r=(t=Fc(t,fx(),1-fx())).shape;return gv(fc(Bl(s,r[r.length-1]),r),t,n)}))}function bv(e,t){return mi((()=>{let n;return n=Fc(t,fx(),1-fx()),n=zh(Lo(n,ol(1,n))),ed(function(e,t){if(!ge(e.shape,t.shape))throw new wb(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return mi((()=>{const n=Ld(t),s=Vl(ul(t));return Oo(ol(n,zo(t,e)),Ph(vh(s)))}))}(e,n),-1)}))}function xv(e,t){return mi((()=>{const n=Fc(e,fx(),1),s=Fc(t,fx(),1);return yh(zo(e,zh(Lo(n,s))),-1)}))}function wv(e,t){return mi((()=>{const n=hv(e,-1),s=hv(t,-1),r=zo(n,s);return Vl(yh(r,-1))}))}lv.constructors={};const vv={meanSquaredError:dv,meanAbsoluteError:pv,meanAbsolutePercentageError:fv,meanSquaredLogarithmicError:mv,squaredHinge:function(e,t){return mi((()=>{const n=pl(0,ol(1,zo(e,t)));return ed(Tx(n),-1)}))},hinge:function(e,t){return mi((()=>{const n=pl(0,ol(1,zo(e,t)));return ed(n,-1)}))},categoricalHinge:function(e,t){return mi((()=>{const n=yh(zo(e,t),-1),s=mh(zo(ol(1,e),t),-1);return pl(0,Oo(1,ol(s,n)))}))},logcosh:function(e,t){return mi((()=>{const n=Math.log(2),s=ol(t,e),r=ol(Oo(s,Bh(zo(-2,s))),n);return ed(r,-1)}))},categoricalCrossentropy:gv,sparseCategoricalCrossentropy:yv,binaryCrossentropy:bv,kullbackLeiblerDivergence:xv,poisson:function(e,t){return mi((()=>{const n=zh(Oo(fx(),t));return ed(ol(t,zo(e,n)),-1)}))},cosineProximity:wv};function kv(e){if("string"===typeof e){if(e in vv)return vv[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new wb(t)}return e}function Iv(e,t){return mi((()=>{const n=zo(.5,hd(t)),s=mx($h(t,n),e.dtype);return ed(Qc(e,s),-1)}))}function Nv(e,t){return mi((()=>mx(Qc(ju(e,-1),ju(t,-1)),"float32")))}function Sv(e,t){return mi((()=>Fo(yh(Gh(Qc(e,1),Qc(t,1))),"float32")))}function Tv(e,t){return mi((()=>{const n=Sv(e,t),s=function(e,t){return mi((()=>Fo(yh(Gh(Qc(e,0),Qc(t,1))),"float32")))}(e,t),r=Oo(n,s);return Fo(eh($h(r,0),Lo(n,r),0),"float32")}))}function Cv(e,t){return mi((()=>{const n=Sv(e,t),s=function(e,t){return mi((()=>Fo(yh(Gh(Qc(e,1),Qc(t,0))),"float32")))}(e,t),r=Oo(n,s);return Fo(eh($h(r,0),Lo(n,r),0),"float32")}))}function $v(e,t){return bv(e,t)}function Ev(e,t){return e.rank===t.rank&&(e=up(e,[e.rank-1])),(t=ju(t,-1)).dtype!==e.dtype&&(t=Fo(t,e.dtype)),Fo(Qc(e,t),"float32")}const Av=gv,Rv=yv,Fv={binaryAccuracy:Iv,categoricalAccuracy:Nv,precision:Tv,categoricalCrossentropy:Av,sparseCategoricalCrossentropy:Rv,mse:dv,MSE:dv,mae:pv,MAE:pv,mape:fv,MAPE:fv,cosine:wv};function Dv(e){if("string"===typeof e&&e in Fv)return Fv[e];if("string"!==typeof e&&null!=e)return e;throw new wb(`Unknown metric ${e}`)}function _v(e){if(Sb(null!==e,`Unknown LossOrMetricFn ${e}`),"string"===typeof e)return e;{let t;for(const n of Object.keys(vv))if(vv[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Fv))if(Fv[n]===e){t=n;break}return void 0!==t?t:e.name}}const Ov=1048576;function Mv(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==e||"object"!==typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Lv(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>Ov&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Lv(e){if(null===e)return!0;if("object"===typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!==typeof n)return!1;if(!Lv(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Lv(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function zv(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:console.log;const r=function(e){let t=!0;const n=[],s=[];for(const r in e.nodesByDepth)n.push(e.nodesByDepth[r]);for(const r of n){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of e.layers){let e=!1;for(const n of r.inboundNodes)if(-1!==s.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Pv(a,n,s),s("=".repeat(t));const o=e.layers;for(let c=0;c<o.length;++c)r?Bv(o[c],n,s):Wv(o[c],n,i,s),s((c===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?sw(e.collectedTrainableWeights):sw(e.trainableWeights);return t}(e),u=sw(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function Pv(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log,s="";for(let r=0;r<e.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=e[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);n(s)}function Bv(e,t,n){let s,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(Fj){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(Fj){s="multiple"}Pv([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function Wv(e,t,n,s){let r,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(Fj){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(Fj){r="multiple"}const i=[];for(const c of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(c)))for(let e=0;e<c.inboundLayers.length;++e){const t=c.inboundLayers[e].name,n=c.nodeIndices[e],s=c.tensorIndices[e];i.push(`${t}[${n}][${s}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];Pv([`${o} (${l})`,a,r,e.countParams().toString(),u],t,s);for(let c=1;c<i.length;++c)Pv(["","","","",i[c]],t,s)}function Vv(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"===typeof n}function Uv(e,t){if(null===e)return null;if("string"===typeof e)return Ab(e);if("number"===typeof e||"boolean"===typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Vv(t,r,s)?n.push(s):n.push(Uv(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"===typeof s)t[n]=s;else{const e=Ab(n);t[e]=Uv(s,e)}}return t}}function Gv(e,t){if(null===e||void 0===e)return null;if("string"===typeof e)return Eb(e);if("number"===typeof e||"boolean"===typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Vv(t,r,s)?n.push(s):n.push(Gv(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=Eb(n);t[r]="name"!==n&&"className"!==n||"string"!==typeof s?Gv(s,n):s}return t}}const Hv="4.22.0";class jv extends pw{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=jb(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Mb(this.inputs).length!==this.inputs.length)throw new wb(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Mb(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(t),this.outputLayersTensorIndices.push(n)}for(const y of this.inputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;Sb(0===t,"input layer has >1 nodes"),Sb(0===n,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(t),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const t=this.inputLayers[y];if(!(t instanceof mw))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${y} (0-based) originates from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new xb(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(jv.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let a=0;a<c;a++){const e=u.inputTensors[a],s=u.inboundLayers[a],r=u.nodeIndices[a],i=u.tensorIndices[a];o(e,t,n,s,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const y of this.outputs)o(y,l,u);const c=i.slice().reverse();for(const y of c){n[y.id]=y,y.id in t||(t[y.id]=0);let e=t[y.id];const a=null==s[y.outboundLayer.id]?0:s[y.outboundLayer.id];e=Math.max(e,a),s[y.outboundLayer.id]=e,r[y.outboundLayer.id]=y.outboundLayer,t[y.id]=e;for(let s=0;s<y.inboundLayers.length;s++){const r=y.inboundLayers[s],a=y.nodeIndices[s],i=r.inboundNodes[a],o=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(e+1,o),n[i.id]=i}}const h={};for(const y in t){const e=t[y];e in h||(h[e]=[]),h[e].push(n[y])}const d={};for(const y in s){const e=s[y];e in d||(d[e]=[]),d[e].push(r[y])}let p=Object.keys(d).map((e=>parseInt(e,10))).sort(Ob);this.layers=[];for(const y of p){const e=d[y];e.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const t of e)t instanceof jv&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map((e=>parseInt(e,10))).sort(Ob);const f=this.inputs.slice(),m=[];for(const y of p)for(const e of h[y]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new xb(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${t.name}". The following previous layers were accessed without issue: ${m}`);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const y of g){const e=g.filter((e=>e===y)).length;if(1!==e)throw new xb(`The name "${y}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new hw({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0===--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new wb("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n={};let s=0;const r=(e=>{const t=Object.keys(e);if(0===t.length)return!1;const n=t[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(e);r&&this.parseWeights(e);for(const i of this.layers)for(const[e,t]of i.weights.entries()){const a=r?`${t.name.split("/").slice(0,-1).join("/")+"/"}${e}`:t.originalName;if(null!=n[a])throw new wb(`Duplicate weight name: ${a}`);n[a]=t,s++}const a=[];for(const i in e){let s=i;if(null==n[i]){const e=i.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])a.push([n[s],e[i]]);else if(t)throw new wb(`Provided weight data has no target variable: ${i}`);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new wb(`${e.length} of ${s} weights are not set: ${e}`)}ow(a)}parseWeights(e){for(const t in Object.keys(e)){const n=t.split("/"),s=["vars","layer_checkpoint_dependencies"],r=n.map((e=>e.startsWith("_")?e.slice(1):e)).filter((e=>!s.includes(e))).join("/");r!==t&&(e[r]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Hv}`,t.backend="TensorFlow.js",t}toJSON(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=Gv(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return mi((()=>{e=$b(e);const n=new yw;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return ww(this.outputs,n,t)}))}computeMask(e,t){return mi((()=>{let n;return e=$b(e),n=null==t?Nb(null,e.length):$b(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=ew(e);if(t.length!==this.inputLayers.length)throw new wb(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++){const e=this.inputLayers[i],s=t[i];n[e.name+"_0_0"]=s}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Ob);if(s.length>1)for(const i of s){const e=this.nodesByDepth[i];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(e.id))continue;const s=[];for(let i=0;i<t.inboundLayers.length;i++){const e=t.inboundLayers[i],r=t.nodeIndices[i],a=t.tensorIndices[i],o=n[`${e.name}_${r}_${a}`];s.push(o)}const r=ew(e.computeOutputShape(Cb(s))),a=e.inboundNodes.indexOf(t);for(let t=0;t<r.length;t++){n[`${e.name}_${a}_${t}`]=r[t]}}}const r=[],a=[];for(let i=0;i<this.outputLayers.length;i++){const e=this.outputLayers[i],t=this.outputLayersNodeIndices[i],n=this.outputLayersTensorIndices[i],s=`${e.name}_${t}_${n}`;a.push(s)}for(let i=0;i<a.length;i++){const e=a[i];Sb(e in n),r.push(n[e])}return Cb(r)}runInternalGraph(e,t){null==t&&(t=Nb(null,e.length));const n={};for(let o=0;o<this.inputs.length;++o){const s=this.inputs[o],r=e[o],a=t[o];n[s.id]=[r,a]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Ob);for(const o of s){const e=this.nodesByDepth[o];for(const t of e){const e=t.outboundLayer,s=t.inputTensors,r=t.outputTensors,a=new Array;for(const t of s)t.id in n&&a.push(n[t.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=$b(e.call(t,u)),l=$b(e.computeMask(t,n)),s=[t],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=$b(e.call(s,u)),l=$b(e.computeMask(s,i));if(e.activityRegularizer)throw new vb("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const o of this.outputs){Sb(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[e,t]=n[o.id];i.push(e.shape),r.push(e),a.push(t)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const s of this.layers){n=s instanceof jv?1:0;for(let e=0;e<s.inboundNodes.length;e++){const r=jv.nodeKey(s,e);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new wb("Provide either a layer name or layer index");if("number"===typeof e)return this.findLayer(e);for(const n of this.layers)if(n.name===e)return n;throw new wb(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new wb(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return mi((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=jv.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const e=a.getClassName(),s=a.getConfig(),r=[];for(let n=0;n<a.inboundNodes.length;n++){const e=a.inboundNodes[n],s=jv.nodeKey(a,n);let i={};if(this.containerNodes.has(s)){if(e.callArgs)try{JSON.stringify(e.callArgs),i=e.callArgs}catch(Fj){console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${e.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(e.inboundLayers.length>0){const n=[];for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],a=e.nodeIndices[s],o=e.tensorIndices[s];let l=t[jv.nodeKey(r,a)];null==l&&(l=0),n.push([r.name,l,o,i])}r.push(n)}}}const i={};i.name=a.name,i.className=e,i.config=s,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let a=0;a<this.inputLayers.length;a++){const e=this.inputLayers[a],n=this.inputLayersNodeIndices[a],r=jv.nodeKey(e,n);if(!this.containerNodes.has(r))continue;let i=t[r];null!==i&&void 0!==i||(i=0);const o=this.inputLayersTensorIndices[a];s.push([e.name,i,o])}e.inputLayers=s;const r=[];for(let a=0;a<this.outputLayers.length;a++){const e=this.outputLayers[a],n=this.outputLayersNodeIndices[a],s=jv.nodeKey(e,n);if(!this.containerNodes.has(s))continue;let i=t[s];null!==i&&void 0!==i||(i=0);const o=this.outputLayersTensorIndices[a];r.push([e.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t){let n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s={},r={};function a(e,t){e.name in r?r[e.name].push(t):r[e.name]=[t]}function i(e,t){const n=[];let r;for(const i of t){const o=i[0],l=i[1],u=i[2];if(r=null==i[3]?{}:i[3],!(o in s))return void a(e,t);const c=s[o];if(c.inboundNodes.length<=l)return void a(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Cb(n),r)}function o(e){const r=e.name,i=cv(e,null!=t.customObjects?t.customObjects:{});i.setFastWeightInitDuringBuild(n),s[r]=i;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new wb(`Corrupted configuration, expected array for nodeData: ${e}`);a(i,e)}))}const l=t.name,u=t.layers;for(const f of u)o(f);for(;!Lb(r);)for(const e of u){const t=s[e.name];if(t.name in r){const e=r[t.name];delete r[t.name];for(const n of e)i(t,n)}}const c=[],h=[],d=t.inputLayers;for(const f of d){const e=f[0],t=f[1],n=f[2];Sb(e in s);const r=s[e].inboundNodes[t].outputTensors;c.push(r[n])}const p=t.outputLayers;for(const f of p){const e=f[0],t=f[1],n=f[2];Sb(e in s);const r=s[e].inboundNodes[t].outputTensors;h.push(r[n])}return new e({inputs:c,outputs:h,name:l})}get stateful(){if(this._stateful)throw new wb("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){mi((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function qv(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"===typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"===typeof e&&Object.keys(e).length>0&&"object"===typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function Kv(e,t){return qv(e,t,"classWeight")}async function Xv(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=mi((()=>{if(1===e.shape.length)return Do(e);if(2===e.shape.length){if(e.shape[1]>1){return ju(e,1)}if(1===e.shape[1])return fc(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());gi(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),fp(r,"float32")}return null}function Yv(e,t){return zo(e,t)}function Jv(e,t){let n,s;const r=t;n=r.xs,s=r.ys,ce(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Zv("input",e.inputNames,n),i=Zv("output",e.outputNames,s),o=a[0].shape[0];ce(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),ce(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let l=0;l<a.length;l++)ce(a[l].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[l]} has ${a[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let l=0;l<i.length;l++)ce(i[l].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[l]} has ${i[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function Zv(e,t,n){if(n instanceof wa)return[n];if(Array.isArray(n))return ce(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new wb(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}async function Qv(e,t,n){const s=null!=n.batchesPerEpoch;if(ce(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),ce(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),ce(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),ce(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),ce(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(ek(n.validationData))ce(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new vb("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=ov(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=uv(c,h,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,r,u);d.setModel(e),e.history=p,await d.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await d.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=Jv(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Kv(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Xv(r[e],null,t[e]))}const u=s.concat(r).concat(i),p=o(u);gi(u);for(let e=0;e<l.length;++e){const t=l[e],n=p[e];a[t]=n,yi(n)}await d.onBatchEnd(h,a),ev(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=ek(n.validationData)?$b(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):$b(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(f,u),f++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function ek(e){return"function"===typeof e.iterator}function tk(e){ce(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function nk(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>yx(e,t,n-t))):yx(e,t,n-t)}function sk(e,t){return mi((()=>null==e?null:Array.isArray(e)?e.map((e=>sk(e,t))):Sx(e,"int32"===t.dtype?t:Fo(t,"int32"))))}function rk(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function ak(e){const t=[];e instanceof wa&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(gx(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function ik(e,t){if(null==e)return;const n=[];if(t instanceof wa)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const r in t){const e=t[r];n.push(e.id)}const s=[];if(e instanceof wa)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const r in e){const t=e[r];-1===n.indexOf(t.id)&&s.push(t)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function ok(e){return Array.isArray(e)}function lk(e){return!function(e){return e instanceof wa}(e)&&!ok(e)}function uk(e,t,n){let s,r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(null==t||0===t.length){if(null!=e){let t=!1;if(ok(e)&&e.length>0)t=!0;else if(lk(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new wb(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));if(lk(e)){s=[];for(const n of t){if(null==e[n])throw new wb(`No data provided for "${n}". Need data for each key in: ${t}`);s.push(e[n])}}else if(ok(e)){if(e.length!==t.length)throw new wb(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);s=e}else{if(t.length>1)throw new wb(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);s=[e]}if(s=ak(s),null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=s[i];if(e.shape.length!==n[i].length)throw new wb(`Error when checking ${a}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape ${e.shape}`);for(let t=0;t<n[i].length;++t){if(0===t&&!r)continue;const s=e.shape[t],o=n[i][t];if(null!=o&&o>=0&&s!==o)throw new wb(`${a} expected a batch of elements where each example has shape [${n[i].slice(1,n[i].length)}] (i.e.,tensor shape [*,${n[i].slice(1,n[i].length)}]) but the ${a} received an input with ${e.shape[0]} examples, each with shape [${e.shape.slice(1,e.shape.length)}] (tensor shape [${e.shape}])`)}}return s}function ck(e,t,n){let s,r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(Array.isArray(e)){if(e.length!==t.length)throw new wb(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);s=e}else{if(t.length>1)throw new wb(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);s=[e]}if(null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=s[i];if(e.shape.length!==n[i].length)throw new wb(`Error when checking ${a}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape ${JSON.stringify(e.shape)}`);for(let s=0;s<n[i].length;++s){if(0===s&&!r)continue;const o=e.shape[s],l=n[i][s];if(null!=l&&l!==o)throw new wb(`Error when checking ${a}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(e.shape)}.`)}}}class hk extends jv{constructor(e){super(e),this.isTraining=!1}summary(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log;if(!this.built)throw new wb("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");zv(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"===typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Qf.adagrad(.01),Adadelta:()=>Qf.adadelta(1,.95,fx()),Adam:()=>Qf.adam(.001,.9,.999,fx()),Adamax:()=>Qf.adamax(.002,.9,.999,fx(),0),RMSProp:()=>Qf.rmsprop(.001,.9,0,fx()),SGD:()=>Qf.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new wb(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof nl))throw new wb("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"===typeof e.loss||"function"===typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new wb(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>kv(e)))}else{const n=kv(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new wb(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(kv(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const e=this.internalOutputShapes[a],t=this.outputNames[a];this.feedOutputNames.push(t),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],rx("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"===typeof e||"function"===typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!==typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};rx("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"===typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===bv?-1!==["accuracy","acc"].indexOf(i)?s=Iv:-1!==["crossentropy","ce"].indexOf(i)&&(s=$v):this.lossFunctions[e]===yv?-1!==["accuracy","acc"].indexOf(i)?s=Ev:-1!==["crossentropy","ce"].indexOf(i)&&(s=Rv):-1!==["accuracy","acc"].indexOf(i)?s=Nv:-1!==["crossentropy","ce"].indexOf(i)&&(s=Av),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=Dv(i);a=e,n=""+_v(i)}let t;rx(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const s=null==n.batchSize?32:n.batchSize;tk(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const e=r[0].concat(r[1]);this.makeTestFunction();const t=this.testFunction;return Cb(this.testLoop(t,e,s,n.verbose,n.steps))}finally{ik(r[0],e),ik(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new vb("Verbose mode is not implemented yet.");ce(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"===typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=mi((()=>{if(t.value){const{xs:n,ys:s}=Jv(e,t.value),i=n.concat(s),u=mi((()=>r(i)));if(gi(i),0===l)for(let e=0;e<u.length;++e)a.push(Xo(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=mi((()=>Oo(a[e],zo(c,t)))),l>0&&gi(n)}gi(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<a.length;++u){const e=a[u];a[u]=Lo(a[u],o),gi(e)}return Cb(a)}(this,e,t)}checkNumSamples(e,t,n){let s,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"steps";if(null!=n){if(s=null,null!=t)throw new wb(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new wb(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new wb("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new yw;if(e instanceof wa&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new wb(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const o of this.inputs){const t=e[o.name];if(null==t)throw new wb(`No value is provided for the model's input ${o.name}`);a.add(o,t)}const i=ww(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=Nb(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new wb(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return mi((()=>{const s=this.checkNumSamples(e);if(n)throw new vb("Verbose predictLoop() is not implemented yet.");const r=rk(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){mi((()=>{const n=r[t][0],s=r[t][1],a=nk(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new yw(i);return ww(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return Cb(a.map((e=>yc(e,0))))}))}predict(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=ak(e);ck(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return tk(e),this.predictLoop(n,e)}finally{ik(n,e)}}predictOnBatch(e){ck(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t){let n=arguments.length>3?arguments[3]:void 0;if(null==this.optimizer_)throw new xb("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let r=0;r<this.feedOutputShapes.length;++r){const e=this.feedOutputShapes[r];this.feedLossFns[r]===yv?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(e,t){const n=Mb(e.map((e=>e.shape[0])));n.sort();const s=Mb(t.map((e=>e.shape[0])));if(s.sort(),n.length>1)throw new wb(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new wb(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(n.length>0&&s.length>0&&!ge(n,s))throw new wb(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=uk(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=uk(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const s=[dv,bv,gv];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===gv&&1===a.shape[a.shape.length-1])throw new wb(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new wb(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=n&&n>0&&e[0].shape[0]%n!==0)throw new wb(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s){let r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],a=arguments.length>5?arguments[5]:void 0;const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Kv(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Xv(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4?arguments[4]:void 0;return mi((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new vb("Verbose mode is not implemented yet.");if(null!=r)throw new vb("steps mode in testLoop() is not implemented yet");{const s=rk(a,n),r=fp(dx(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=yx(r,a,o-a),u=sk(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Xo(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=Oo(i[e],zo(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=Lo(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(Tb(e,s)>1){r+=`_${Tb(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new yw(e),o=ww(this.outputs,i,{training:!0});let l;for(let n=0;n<this.lossFunctions.length;++n){let e=(0,this.lossFunctions[n])(s[n],o[n]);null!=r[n]&&(e=Yv(e,r[n]));const a=ed(e);t.push(a),l=0===n?e:Oo(l,e)}for(let n=0;n<this.metricsTensors.length;++n){let e;if(this.outputs.length>1&&n<this.outputs.length)e=t[n];else{const t=this.metricsTensors[n][0],r=this.metricsTensors[n][1];e=ed(t(s[r],o[r]))}yi(e),a.push(e)}return l=ed(l),this.calculateLosses().forEach((e=>{l=Oo(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>mi((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new yw(a),o=ww(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=ed(s(r[e],o[e]));n=0===e?a:Oo(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=ed(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t){let n,s,r,a,i,o,l,u,c,h=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");this.isTraining=!0;try{const d=null==h.batchSize?32:h.batchSize;tk(d);const p=!1,f=await this.standardizeUserData(e,t,h.sampleWeight,h.classWeight,p,d);n=f[0],s=f[1],c=f[2];let m,g=!1;if(null!=h.validationData&&h.validationData.length>0){if(g=!0,2!==h.validationData.length)throw 3===h.validationData.length?new vb("validationData including sample weights is not supported yet."):new wb(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${h.validationData} is invalid.`);i=h.validationData[0],o=h.validationData[1];const e=!0,t=await this.standardizeUserData(i,o,null,null,e,d);l=t[0],u=t[1],m=l.concat(u)}else if(null!=h.validationSplit&&h.validationSplit>0&&h.validationSplit<1){g=!0;const e=Math.floor(n[0].shape[0]*(1-h.validationSplit)),t=n[0].shape[0];l=nk(n,e,t),r=n,n=nk(n,0,e),u=nk(s,e,t),a=s,s=nk(s,0,e),m=l.concat(u)}else null!=h.validationSteps&&(g=!0);const y=n.concat(s).concat(c);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),x=this.getDedupedMetricsNames();let w,v;g?(this.makeTestFunction(),w=this.testFunction,v=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],v=x.slice());const k=ov(h.callbacks,h.yieldEvery);return await this.fitLoop(b,y,x,d,h.epochs,h.verbose,k,w,m,h.shuffle,v,h.initialEpoch,null,null)}finally{this.isTraining=!1,ik(n,e),ik(s,t),ik(r,e),ik(a,t),ik(l,i),ik(u,o),null!=c&&gi(c)}}async fitLoop(e,t,n,s,r,a,i,o,l,u,c,h,d,p){null==s&&(s=32),null==r&&(r=1),null==u&&(u=!0),null==h&&(h=0);let f=!1;if(null!=o&&null!=l&&(f=!0),null!=p&&(f=!0,null==d))throw new wb("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,s,d,"steps_per_epoch");let g;null!=m&&(g=dx(0,m)),null==a&&(a=1);const{callbackList:y,history:b}=uv(i,a,r,h,m,d,s,f,c);y.setModel(this),this.history=b,await y.onTrainBegin(),this.stopTraining_=!1;for(let x=h;x<r;++x){await y.onEpochBegin(x);const r={};if(null!=d)throw new vb("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new vb("batch shuffling is not implemneted yet");u&&ne(g);const a=fp(g),i=rk(m,s);for(let u=0;u<i.length;++u){const c={};if(await y.onBatchBegin(u,c),mi((()=>{const h=i[u][0],d=i[u][1],p=yx(a,h,d-h);c.batch=u,c.size=d-h;const m=sk(t,p),g=e(m);for(let e=0;e<n.length;++e){const t=n[e],s=g[e];c[t]=s,yi(s)}if(u===i.length-1&&f){const e=this.testLoop(o,l,s);for(let t=0;t<n.length;++t){const s=n[t],a=e[t];yi(a),r["val_"+s]=a}}})),await y.onBatchEnd(u,c),ev(c),this.stopTraining_)break}a.dispose()}if(await y.onEpochEnd(x,r),this.stopTraining_)break}return await y.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return Qv(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const o of a){const e=await o.data();i.push(e[0])}return gi(a),ik(n[0],e),ik(n[1],t),Cb(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let a=0;a<s.length;++a)n&&!s[a].trainable||t.push({name:s[a].originalName,tensor:r[a]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=pi().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-pi().numTensors}return e}getLossIdentifiers(){let e;if("string"===typeof this.loss)e=Eb(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!==typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Eb(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!==typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Eb(n[s])}}return e}getMetricIdentifiers(){if("string"===typeof this.metrics||"function"===typeof this.metrics)return[Eb(_v(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Eb(_v(e))));{const e={};for(const t in this.metrics)e[t]=Eb(_v(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=cv(Uv(e.optimizer_config));let n,s;if("string"===typeof e.loss)n=Ab(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Ab(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Ab(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>Ab(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=Ab(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"===typeof e){const t=Xi(e);if(0===t.length)throw new wb(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new wb(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new wb("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Ei(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Hv}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await Ei(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=Pi([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Mv(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Mv(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}hk.className="Model",el(hk);class dk extends hk{}async function pk(e,t){"modelTopology"in e||(e={modelTopology:e});let n=e.modelTopology;null!=n.model_config&&(n=n.model_config);const s=cv(Uv(n),t);if(null!=e.weightsManifest){const t=await Sl(e.weightsManifest,e.pathPrefix,s.weights.map((e=>e.originalName))),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),gi(t)}return s}async function fk(e,t){if(null==t&&(t={}),"string"===typeof e){const n=Yi(e,t);if(0===n.length)n.push(Rl(e,t));else if(n.length>1)throw new wb(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){null==n&&(n={});if(null==e.load)throw new wb("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=cv(Uv(r),t,i),l=s.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata);if(null!=s.weightData){if(null==s.weightSpecs)throw new wb("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=Ai(e,t),s={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),gi(e),gi(t.map((e=>e.tensor)))}return o}(e,void 0,t)}dk.className="Functional",el(dk);class mk extends hk{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:jb("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new wb(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof mk||e instanceof hk;let n;if(t){if(n=e,1!==n.outputs.length)throw new wb("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new wb("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new wb("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=gw({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new wb(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new wb("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=fw(this.outputs[0])}this.inboundNodes=[],new hw({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Nb(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(nw(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new hk({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log;this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!this.built)throw new xb("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new xb("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!this.built)throw new xb("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new xb("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t){let n,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new wb("Legacy serialization format not supported yet.");n=t}else ce(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),n=t.layers,delete t.layers,r=t;const a=new e(r);if(!(a instanceof mk))throw new vb(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(const i of n){const e=cv(i,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),a.add(e)}return a}set stopTraining(e){if(null==this.model)throw new wb("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new wb("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function gk(e){return new hk(e)}function yk(e){return new mk(e)}function bk(e){return gw(e)}function xk(e,t){lv.registerCallbackConstructor(e,t)}mk.className="Sequential",el(mk);class wk extends Zo{getConfig(){return{}}}class vk extends wk{apply(e){return function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(1!==t)throw new vb(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return rh(e)}(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:1)}}vk.className="elu",el(vk);class kk extends wk{apply(e){return jd(e)}}kk.className="selu",el(kk);class Ik extends wk{apply(e){return Ld(e)}}Ik.className="relu",el(Ik);class Nk extends wk{apply(e){return mi((()=>rd(6,Ld(e))))}}Nk.className="relu6",el(Nk);class Sk extends wk{apply(e){return e}}Sk.className="linear",el(Sk);class Tk extends wk{apply(e){return bc(e)}}Tk.className="sigmoid",el(Tk);class Ck extends wk{apply(e){return function(e){return mi((()=>{const t=Oo(.5,zo(.2,e));return Fc(t,0,1)}))}(e)}}Ck.className="hardSigmoid",el(Ck);class $k extends wk{apply(e){return Bh(e)}}$k.className="softplus",el($k);class Ek extends wk{apply(e){return function(e){return mi((()=>Lo(e,Oo(ul(e),1))))}(e)}}Ek.className="softsign",el(Ek);class Ak extends wk{apply(e){return wc(e)}}Ak.className="tanh",el(Ak);class Rk extends wk{apply(e){return np(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)}}Rk.className="softmax",el(Rk);class Fk extends wk{apply(e){return Vh(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)}}Fk.className="logSoftmax",el(Fk);class Dk extends wk{apply(e){return mi((()=>mi((()=>{const t=Math.sqrt(2),n=zo(.5,Oo(1,ih(Lo(e,t))));return zo(e,n)}))))}}Dk.className="gelu",el(Dk);class _k extends wk{apply(e){return mi((()=>zo(.5,zo(e,Oo(1,wc(zo(Po(Lo(2,Math.PI)),Oo(e,zo(.044715,il(e,3))))))))))}}_k.className="gelu_new",el(_k);class Ok extends wk{apply(e){return mi((()=>zo(e,wc(Bh(e)))))}}Ok.className="mish",el(Ok);class Mk extends wk{apply(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return mi((()=>zo(bc(zo(e,t)),e)))}}function Lk(e){return e.getClassName()}function zk(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _b(e,Qo.getMap().classNameMap,t,"activation")}function Pk(e){if(null==e){const e={className:"linear",config:{}};return zk(e)}if("string"===typeof e){const t={};return t.className=e,t.config={},zk(t)}return e instanceof wk?e:zk(e)}function Bk(e){if(null!=e&&"object"!==typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}Mk.className="swish",el(Mk);class Wk extends Zo{}class Vk extends Wk{constructor(e){super(),Bk(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return mi((()=>{let t=td([1]);return this.hasL1&&(t=Oo(t,yh(zo(this.l1,ul(e))))),this.hasL2&&(t=Oo(t,yh(zo(this.l2,Tx(e))))),fc(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Vk.className="L1L2",el(Vk);const Uk={l1l2:"L1L2"};function Gk(e){return Fb(e)}function Hk(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return _b(e,Qo.getMap().classNameMap,t,"regularizer")}function jk(e){if(null==e)return null;if("string"===typeof e){return Hk({className:e in Uk?Uk[e]:e,config:{}})}return e instanceof Wk?e:Hk(e)}class qk extends pw{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=tw(e);let n=Ld(e);return null!=this.maxValue&&(n=Fc(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}qk.className="ReLU",el(qk);class Kk extends pw{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=tw(e);return Dh(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Kk.className="LeakyReLU",el(Kk);class Xk extends pw{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Zx(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=jk(e.alphaRegularizer),this.alphaConstraint=Dw(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!==typeof e.sharedAxes)throw new wb(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=nw(e)).slice(1);if(null!=this.sharedAxes)for(const s of this.sharedAxes)t[s-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let s=1;s<e.length;++s)n[s]=e[s];this.inputSpec=[new lw({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=tw(e),wd(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Jx(this.alphaInitializer),alphaRegularizer:Gk(this.alphaRegularizer),alphaConstraint:Rw(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Xk.className="PReLU",el(Xk);class Yk extends pw{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new vb(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=tw(e);return rh(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Yk.className="ELU",el(Yk);class Jk extends pw{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=tw(e);return zo(n,Fo($h(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Jk.className="ThresholdedReLU",el(Jk);class Zk extends pw{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Rk).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return mi((()=>{let n=tw(e);const s=t.mask;if(null!=s){const e=zo(ol(nd(n.shape),Fo(s,n.dtype)),Xo(-1e9));n=Oo(n,e)}return this.axis instanceof Array?this.axis.length>1?vh(ol(n,Uh(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)}))}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Qk(e,t,n){if("number"===typeof e)return Nb(e,t);if(e.length!==t)throw new wb(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new wb(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function eI(e,t,n,s){if(null==e)return e;let r;return r="same"===n?e:e-(t+(t-1)*((arguments.length>4&&void 0!==arguments[4]?arguments[4]:1)-1))+1,Math.floor((r+s-1)/s)}function tI(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+hx([n-t,0]);else{if("same"!==s)throw new wb(`Unsupport padding mode: ${s}.`);e*=t}return e}function nI(e,t){return mi((()=>(Qb(t),"channelsFirst"===t?Gl(e,[0,2,3,1]):e)))}function sI(e,t){return mi((()=>(Qb(t),"channelsFirst"===t?Gl(e,[0,2,3,4,1]):e)))}function rI(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",a=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:1;return mi((()=>{if(null==a&&(a="channelsLast"),Qb(a),3!==e.shape.length)throw new wb(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new wb(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new wb(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===a&&(e=Gl(e,[0,2,1])),"causal"===r)throw new vb("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=zc(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=$x(o,n)),o}))}function aI(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[1,1],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",a=arguments.length>5?arguments[5]:void 0,i=arguments.length>6?arguments[6]:void 0,o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null;return mi((()=>{if(null==a&&(a="channelsLast"),Qb(a),3!==e.rank&&4!==e.rank)throw new wb(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new wb(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=nI(e,a);if("causal"===r)throw new vb("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Up({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Gl(l,[0,3,1,2])),l}))}function iI(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[1,1,1],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",a=arguments.length>5?arguments[5]:void 0,i=arguments.length>6?arguments[6]:void 0;return mi((()=>{if(null==a&&(a="channelsLast"),Qb(a),4!==e.rank&&5!==e.rank)throw new wb(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new wb(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=sI(e,a);if("causal"===r)throw new vb("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Wc(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=$x(o,n)),"channelsFirst"===a&&(o=Gl(o,[0,4,1,2,3])),o}))}Zk.className="Softmax",el(Zk);class oI extends pw{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",oI.verifyArgs(t),this.rank=e,Bb(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new vb(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Qk(t.kernelSize,e,"kernelSize"),this.strides=Qk(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,ex(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Qb(this.dataFormat),this.activation=Pk(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Zx(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Dw(t.biasConstraint),this.biasRegularizer=jk(t.biasRegularizer),this.activityRegularizer=jk(t.activityRegularizer),this.dilationRate=Qk(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new wb(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"===typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new wb(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"===typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new wb(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Sb("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!==typeof e.kernelSize&&!Pb(e.kernelSize,"number",1,3))throw new wb(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Lk(this.activation),useBias:this.useBias,biasInitializer:Jx(this.biasInitializer),biasRegularizer:Gk(this.biasRegularizer),activityRegularizer:Gk(this.activityRegularizer),biasConstraint:Rw(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class lI extends oI{constructor(e,t){super(e,t),this.kernel=null,lI.verifyArgs(t),this.filters=t.filters,Bb(this.filters,"filters"),this.kernelInitializer=Zx(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Dw(t.kernelConstraint),this.kernelRegularizer=jk(t.kernelRegularizer)}build(e){e=nw(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new wb(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return mi((()=>{let t;e=tw(e);const n=null==this.bias?null:this.bias.read(),s=Vb(this.activation.getClassName());if(null!=s&&2===this.rank)t=aI(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=rI(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=aI(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new vb("convolutions greater than 3D are not implemented yet.");t=iI(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=nw(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let r=0;r<n.length;++r){const e=eI(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"===typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);t.push(e)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Jx(this.kernelInitializer),kernelRegularizer:Gk(this.kernelRegularizer),kernelConstraint:Rw(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!==typeof e.filters||e.filters<1)throw new wb(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class uI extends lI{constructor(e){super(2,e),uI.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!==typeof e.kernelSize&&!Pb(e.kernelSize,"number",1,2))throw new wb(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}uI.className="Conv2D",el(uI);class cI extends lI{constructor(e){super(3,e),cI.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!==typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new wb(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}cI.className="Conv3D",el(cI);class hI extends uI{constructor(e){if(super(e),this.inputSpec=[new lw({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new wb(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=nw(e)).length)throw new wb("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new wb("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new lw({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return mi((()=>{let t=tw(e);if(4!==t.shape.length)throw new wb(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[s,tI(i,c,l,this.padding),tI(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Gl(t,[0,2,3,1]));let p=Bc(t,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=Gl(p,[0,3,1,2])),null!=this.bias&&(p=$x(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p}))}computeOutputShape(e){const t=(e=nw(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=tI(t[s],o,a,this.padding),t[r]=tI(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}hI.className="Conv2DTranspose",el(hI);class dI extends cI{constructor(e){if(super(e),this.inputSpec=[new lw({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new wb(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=nw(e)).length)throw new wb("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new wb("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new lw({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return mi((()=>{let t=tw(e);if(5!==t.shape.length)throw new wb(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],d=this.kernelSize[2],p=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,tI(o,p,c,this.padding),tI(l,f,h,this.padding),tI(u,m,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Gl(t,[0,2,3,4,1]));let y=Uc(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Gl(y,[0,4,1,2,3])),null!==this.bias&&(y=$x(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=nw(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=tI(t[s],u,i,this.padding),t[r]=tI(t[r],c,o,this.padding),t[a]=tI(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}dI.className="Conv3DTranspose",el(dI);class pI extends lI{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new wb("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new wb("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new wb(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Zx(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=jk(t.depthwiseRegularizer),this.depthwiseConstraint=Dw(t.depthwiseConstraint),this.pointwiseInitializer=Zx(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=jk(t.pointwiseRegularizer),this.pointwiseConstraint=Dw(t.pointwiseConstraint)}build(e){if((e=nw(e)).length<this.rank+2)throw new wb(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new wb(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let i=0;i<this.rank;++i)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new lw({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return mi((()=>{let t;if(e=tw(e),1===this.rank)throw new vb("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Gl(e,[0,2,3,1])),t=qd(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=$x(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Gl(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Jx(this.depthwiseInitializer),e.pointwiseInitializer=Jx(this.pointwiseInitializer),e.depthwiseRegularizer=Gk(this.depthwiseRegularizer),e.pointwiseRegularizer=Gk(this.pointwiseRegularizer),e.depthwiseConstraint=Rw(this.depthwiseConstraint),e.pointwiseConstraint=Rw(this.pointwiseConstraint),e}}pI.className="SeparableConv";class fI extends pI{constructor(e){super(2,e)}}fI.className="SeparableConv2D",el(fI);class mI extends lI{constructor(e){super(1,e),mI.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!==typeof e.kernelSize&&!Pb(e.kernelSize,"number",1,1))throw new wb(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}mI.className="Conv1D",el(mI);class gI extends pw{constructor(e){super(e),"number"===typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"===typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return mi((()=>{if(e=tw(e),"channelsLast"===this.dataFormat){const t=xx(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return xx(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=xx(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return xx(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}gI.className="Cropping2D",el(gI);class yI extends pw{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qb(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,zb(Kb,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return mi((()=>{let t=tw(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Gl(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?Kf.resizeNearestNeighbor(t,[e,s]):Kf.resizeBilinear(t,[e,s]);return Gl(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?Kf.resizeNearestNeighbor(t,[e,s]):Kf.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}yI.className="UpSampling2D",el(yI);class bI extends oI{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Zx(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Dw(e.depthwiseConstraint),this.depthwiseRegularizer=jk(e.depthwiseRegularizer)}build(e){if((e=nw(e)).length<4)throw new wb(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new wb(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return mi((()=>{let t=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[1,1],s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"valid",r=arguments.length>4?arguments[4]:void 0,a=arguments.length>5?arguments[5]:void 0;return mi((()=>{null==r&&(r="channelsLast"),Qb(r);let i=nI(e,r);if(4!==e.rank)throw new wb(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new wb(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Yc(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=Gl(i,[0,3,1,2])),i}))}(e=tw(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=$x(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=nw(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=eI(t,this.kernelSize[0],this.padding,this.strides[0]),a=eI(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Jx(this.depthwiseInitializer),e.depthwiseRegularizer=Gk(this.depthwiseRegularizer),e.depthwiseConstraint=Rw(this.depthwiseRegularizer),e}}function xI(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new wb("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function wI(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4?arguments[4]:void 0,a=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],o=arguments.length>7&&void 0!==arguments[7]&&arguments[7];return mi((()=>{const l=t.shape.length;if(l<3)throw new wb(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(dx(2,l));if(t=Gl(t,u),null!=a)throw new vb("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&(r=Fo(Fo(r,"bool"),"float32"),r.rank===l-1&&(r=kh(r,-1)),r=Gl(r,u)),s&&(t=Pd(t,0),null!=r&&(r=Pd(r,0)));const c=[];let h,d=n;const p=t.shape[0],f=Np(t);let m,g;null!=r&&(m=Np(r));for(let t=0;t<p;++t){const n=f[t],s=mi((()=>e(n,d)));if(null==r)h=s[0],d=s[1];else{const e=mi((()=>{const e=m[t],n=ol(hd(e),e);return{output:Oo(zo(s[0],e),zo(d[0],n)),newStates:d.map(((t,r)=>Oo(zo(s[1][r],e),zo(t,n))))}}));h=e.output,d=e.newStates}o&&c.push(h)}if(o){g=cp(c,1)}return[h,g,d]}))}bI.className="DepthwiseConv2D",el(bI);class vI extends pw{constructor(e){let t;if(super(e),null==e.cell)throw new wb("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new EI({cells:e.cell}):e.cell,null==t.stateSize)throw new wb("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new lw({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return dx(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Qx(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return mi((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new vb("Constants support is not implemented in RNN yet.");Qx(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new lw({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!ge(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new wb(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new lw({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];mi((()=>{if(!this.stateful)throw new bb("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new wb("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>td([n,e]))):this.states_=[td([n,this.cell.stateSize])];else if(null==e)gi(this.states_),null!=this.keptStates&&(gi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>td([n,e]))):this.states_[0]=td([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new wb(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):gi(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!ge(s.shape,a))throw new wb(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>yi(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=xI(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new lw({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof uw){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return mi((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=tw(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new wb(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=wI(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return mi((()=>{let t=td(e.shape);return t=yh(t,[1,2]),t=gx(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?kx(t,[1,e]):t)):this.cell.stateSize>1?[kx(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===vI.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const s=cv(t.cell,n);return new e(Object.assign(t,{cell:s}))}}vI.className="RNN",el(vI);class kI extends pw{}class II extends kI{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Bb(this.units,"units"),this.activation=Pk(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Zx(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zx(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zx(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=jk(e.kernelRegularizer),this.recurrentRegularizer=jk(e.recurrentRegularizer),this.biasRegularizer=jk(e.biasRegularizer),this.kernelConstraint=Dw(e.kernelConstraint),this.recurrentConstraint=Dw(e.recurrentConstraint),this.biasConstraint=Dw(e.biasConstraint),this.dropout=cx([1,hx([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=cx([1,hx([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nw(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return mi((()=>{if(2!==e.length)throw new wb(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=AI({ones:()=>hd(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=AI({ones:()=>hd(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Nx(null!=a?zo(e,a):e,this.kernel.read()),null!=this.bias&&(r=$x(r,this.bias.read())),null!=i&&(n=zo(n,i));let o=Oo(r,Nx(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Lk(this.activation),useBias:this.useBias,kernelInitializer:Jx(this.kernelInitializer),recurrentInitializer:Jx(this.recurrentInitializer),biasInitializer:Jx(this.biasInitializer),kernelRegularizer:Gk(this.kernelRegularizer),recurrentRegularizer:Gk(this.recurrentRegularizer),biasRegularizer:Gk(this.biasRegularizer),activityRegularizer:Gk(this.activityRegularizer),kernelConstraint:Rw(this.kernelConstraint),recurrentConstraint:Rw(this.recurrentConstraint),biasConstraint:Rw(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}II.className="SimpleRNNCell",el(II);class NI extends vI{constructor(e){e.cell=new II(e),super(e)}call(e,t){return mi((()=>{null!=this.cell.dropoutMask&&(gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}NI.className="SimpleRNN",el(NI);class SI extends kI{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new wb("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Bb(this.units,"units"),this.activation=Pk(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Pk(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Zx(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zx(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zx(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=jk(e.kernelRegularizer),this.recurrentRegularizer=jk(e.recurrentRegularizer),this.biasRegularizer=jk(e.biasRegularizer),this.kernelConstraint=Dw(e.kernelConstraint),this.recurrentConstraint=Dw(e.recurrentConstraint),this.biasConstraint=Dw(e.biasConstraint),this.dropout=cx([1,hx([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=cx([1,hx([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=nw(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return mi((()=>{if(2!==e.length)throw new wb(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=AI({ones:()=>hd(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=AI({ones:()=>hd(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=zo(e,r[0]));let u=Nx(e,this.kernel.read());this.useBias&&(u=$x(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=zo(s,a[0]));const c=this.recurrentKernel.read(),[h,d]=ip(c,[2*this.units,this.units],c.rank-1),p=Nx(s,h),[f,m,g]=ip(u,3,u.rank-1),[y,b]=ip(p,2,p.rank-1);i=this.recurrentActivation.apply(Oo(f,y)),o=this.recurrentActivation.apply(Oo(m,b));const x=Nx(zo(o,s),d);l=this.activation.apply(Oo(g,x));const w=Oo(zo(i,s),zo(Oo(1,Vl(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Lk(this.activation),recurrentActivation:Lk(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Jx(this.kernelInitializer),recurrentInitializer:Jx(this.recurrentInitializer),biasInitializer:Jx(this.biasInitializer),kernelRegularizer:Gk(this.kernelRegularizer),recurrentRegularizer:Gk(this.recurrentRegularizer),biasRegularizer:Gk(this.biasRegularizer),activityRegularizer:Gk(this.activityRegularizer),kernelConstraint:Rw(this.kernelConstraint),recurrentConstraint:Rw(this.recurrentConstraint),biasConstraint:Rw(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}SI.className="GRUCell",el(SI);class TI extends vI{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new SI(e),super(e)}call(e,t){return mi((()=>{null!=this.cell.dropoutMask&&(gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}TI.className="GRU",el(TI);class CI extends kI{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Bb(this.units,"units"),this.activation=Pk(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Pk(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Zx(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zx(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zx(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=jk(e.kernelRegularizer),this.recurrentRegularizer=jk(e.recurrentRegularizer),this.biasRegularizer=jk(e.biasRegularizer),this.kernelConstraint=Dw(e.kernelConstraint),this.recurrentConstraint=Dw(e.recurrentConstraint),this.biasConstraint=Dw(e.biasConstraint),this.dropout=cx([1,hx([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=cx([1,hx([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=nw(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Dx{apply(t,s){const r=e.apply([n]),a=(new Ox).apply([n]),i=e.apply([2*n]);return vx(vx(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return mi((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new wb(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=AI({ones:()=>hd(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=AI({ones:()=>hd(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=zo(e,a[0]));let h=Nx(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=zo(s,i[0])),h=Oo(h,Nx(s,this.recurrentKernel.read())),this.useBias&&(h=$x(h,this.bias.read()));const[d,p,f,m]=ip(h,4,h.rank-1);o=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(p),u=Oo(zo(l,r),zo(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=zo(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Lk(this.activation),recurrentActivation:Lk(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Jx(this.kernelInitializer),recurrentInitializer:Jx(this.recurrentInitializer),biasInitializer:Jx(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Gk(this.kernelRegularizer),recurrentRegularizer:Gk(this.recurrentRegularizer),biasRegularizer:Gk(this.biasRegularizer),activityRegularizer:Gk(this.activityRegularizer),kernelConstraint:Rw(this.kernelConstraint),recurrentConstraint:Rw(this.recurrentConstraint),biasConstraint:Rw(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}CI.className="LSTMCell",el(CI);class $I extends vI{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new CI(e),super(e)}call(e,t){return mi((()=>{null!=this.cell.dropoutMask&&(gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}$I.className="LSTM",el($I);class EI extends kI{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return mi((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Qx(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{rx(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const s=[];for(const r of t.cells)s.push(cv(r,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return iw(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}ow(t)}}function AI(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):Ex(t(),n),o=()=>Ax(i,t,s);if(!r||r<=1)return yi(o().clone());return Array(r).fill(void 0).map(o).map((e=>yi(e.clone())))}EI.className="StackedRNNCells",el(EI);var RI=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"===typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class FI extends vI{constructor(e){if(e.unroll)throw new vb("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new vb("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new lw({ndim:5})]}call(e,t){return mi((()=>{if(null!=this.cell.dropoutMask&&(gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new wb("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return mi((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=td([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];mi((()=>{if(!this.stateful)throw new bb("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new wb("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>td(r))):this.states_=[td(r)];else if(null==e)gi(this.states_),null!=this.keptStates&&(gi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>td(r))):this.states_[0]=td(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new wb(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):gi(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!ge(n.shape,s))throw new wb(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>yi(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=eI(l,s[0],r,a[0],i[0]),h=eI(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}FI.className="ConvRNN2D";class DI extends CI{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,Bb(this.filters,"filters"),this.kernelSize=Qk(n,2,"kernelSize"),this.kernelSize.forEach((e=>Bb(e,"kernelSize"))),this.strides=Qk(s||1,2,"strides"),this.strides.forEach((e=>Bb(e,"strides"))),this.padding=r||"valid",ex(this.padding),this.dataFormat=a||"channelsLast",Qb(this.dataFormat),this.dilationRate=Qk(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>Bb(e,"dilationRate")))}build(e){var t;e=nw(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new wb(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Dx{apply(e,t){return wx([n.apply([s]),nd([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return mi((()=>{if(3!==e.length)throw new wb(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=AI({ones:()=>hd(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?zo(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=AI({ones:()=>hd(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let p=o(r,d,0),f=o(r,d,1),m=o(r,d,2),g=o(r,d,3);const[y,b,x,w]=ip(this.kernel.read(),4,3),[v,k,I,N]=this.useBias?ip(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,T,C,$]=ip(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,S),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(Oo(l,p)),A=this.recurrentActivation.apply(Oo(u,f)),R=Oo(zo(A,a),zo(E,this.activation.apply(Oo(c,m)))),F=zo(this.recurrentActivation.apply(Oo(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=RI(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),s)}inputConv(e,t,n,s){const r=Lc(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?$x(r,n,this.dataFormat):r}recurrentConv(e,t){return Lc(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}DI.className="ConvLSTM2DCell",el(DI);class _I extends FI{constructor(e){const t=new DI(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}_I.className="ConvLSTM2D",el(_I);class OI extends pw{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let s=0;s<this.noiseShape.length;++s)n.push(null==this.noiseShape[s]?t[s]:this.noiseShape[s]);return n}call(e,t){return mi((()=>{this.invokeCallHook(e,t);const n=tw(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Ax((()=>Ex(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}OI.className="Dropout",el(OI);class MI extends OI{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}MI.className="SpatialDropout1D",el(MI);class LI extends pw{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Bb(this.units,"units"),this.activation=Pk(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Zx(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Zx(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Dw(e.kernelConstraint),this.biasConstraint=Dw(e.biasConstraint),this.kernelRegularizer=jk(e.kernelRegularizer),this.biasRegularizer=jk(e.biasRegularizer),this.activityRegularizer=jk(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=nw(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=nw(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return mi((()=>{this.invokeCallHook(e,t);const n=tw(e),s=Vb(this.activation.getClassName());let r;return null!=s?r=Nx(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Nx(n,this.kernel.read()),null!=this.bias&&(r=$x(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:Lk(this.activation),useBias:this.useBias,kernelInitializer:Jx(this.kernelInitializer),biasInitializer:Jx(this.biasInitializer),kernelRegularizer:Gk(this.kernelRegularizer),biasRegularizer:Gk(this.biasRegularizer),activityRegularizer:Gk(this.activityRegularizer),kernelConstraint:Rw(this.kernelConstraint),biasConstraint:Rw(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}LI.className="Dense",el(LI);class zI extends pw{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=nw(e);for(const t of e.slice(1))if(null==t)throw new wb(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],ux(e,1)]}call(e,t){return mi((()=>{this.invokeCallHook(e,t);let n=tw(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Gl(n,e)}return function(e){if(e.rank<=1)throw new wb(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],ux(e.shape,1)];return fc(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}zI.className="Flatten",el(zI);class PI extends pw{constructor(e){super(e),this.supportsMasking=!0,this.activation=Pk(e.activation)}call(e,t){return mi((()=>{this.invokeCallHook(e,t);const n=tw(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Lk(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}PI.className="Activation",el(PI);class BI extends pw{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return mi((()=>{return e=tw(e),t=e,n=this.n,mi((()=>{if(2!==t.shape.length)throw new wb(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return kx(gx(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}BI.className="RepeatVector",el(BI);class WI extends pw{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let o=0;o<s.length;++o){const e=s[o];if(this.isUnknown(e)){if(null!==a)throw new wb("Can only specifiy one unknown dimension.");a=o}else r*=e}const i=ux(e);if(null!==a){if(0===r||i%r!==0)throw new wb(n);s[a]=i/r}else if(i!==r)throw new wb(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return mi((()=>{this.invokeCallHook(e,t);const n=tw(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return fc(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}WI.className="Reshape",el(WI);class VI extends pw{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=dx(1,e.dims.length+1);if(!ge(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new lw({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=nw(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return Gl(tw(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}VI.className="Permute",el(VI);class UI extends pw{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=tw(e);return Hu(cd(n,this.maskValue),-1)}call(e,t){return mi((()=>{this.invokeCallHook(e,t);const n=tw(e),s=Hu(cd(n,this.maskValue),-1,!0);return zo(n,Fo(s,n.dtype))}))}}UI.className="Masking",el(UI);class GI extends pw{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat($b(e.inputLength))}this.inputDim=e.inputDim,Bb(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Bb(this.outputDim,"outputDim"),this.embeddingsInitializer=Zx(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=jk(e.embeddingsRegularizer),this.activityRegularizer=jk(e.activityRegularizer),this.embeddingsConstraint=Dw(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return mi((()=>this.maskZero?(e=tw(e),cd(e,Wo(e))):null))}computeOutputShape(e){if(e=nw(e),null==this.inputLength)return[...e,this.outputDim];const t=$b(this.inputLength);if(t.length!==e.length-1)throw new wb(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new wb(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return mi((()=>{this.invokeCallHook(e,t);let n=tw(e);"int32"!==n.dtype&&(n=mx(n,"int32"));const s=Sx(this.embeddings.read(),fc(n,[n.size]));return fc(s,nw(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Jx(this.embeddingsInitializer),embeddingsRegularizer:Gk(this.embeddingsRegularizer),activityRegularizer:Gk(this.activityRegularizer),embeddingsConstraint:Rw(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}GI.className="Embedding",el(GI);class HI extends pw{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new vb}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new wb("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[nw(e)]),e.length<2)throw new wb(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const r of e)null!=r&&null!==r[0]&&t.push(r[0]);if(t=Mb(t),t.length>1)throw new wb(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const t=null==e[r]?null:e[r].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===Mb(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return mi((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=hx(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=gx(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,s=e[0],r=e.slice(1).concat([s]);let i=fc(a,[s].concat(ux(e.slice(1))));i=Gl(i,[1,0]),i=fc(i,r),t.push(i),n=!0}else if(e>1){const s=dx(1,e).concat([0]);t.push(Gl(a,s)),n=!0}else t.push(a)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=fc(Gl(fc(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(dx(0,r-1));s=Gl(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const n=null==e[s]?null:e[s].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const s of e)null!=s&&null!==s[0]&&n.push(s[0]);return n=Mb(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return mi((()=>{if(null==t)return null;if(!Array.isArray(t))throw new wb("`mask` should be an Array");if(!Array.isArray(e))throw new wb("`inputs` should be an Array");if(t.length!==e.length)throw new wb(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:kh(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Gh(n,t[e]);return n}))}}class jI extends HI{constructor(e){super(e)}mergeFunction(e){return mi((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Oo(t,e[n]);return t}))}}jI.className="Add",el(jI);class qI extends HI{constructor(e){super(e)}mergeFunction(e){return mi((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=zo(t,e[n]);return t}))}}qI.className="Multiply",el(qI);class KI extends HI{constructor(e){super(e)}mergeFunction(e){return mi((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Oo(t,e[n]);return zo(1/e.length,t)}))}}KI.className="Average",el(KI);class XI extends HI{constructor(e){super(e)}mergeFunction(e){return mi((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=pl(t,e[n]);return t}))}}XI.className="Maximum",el(XI);class YI extends HI{constructor(e){super(e)}mergeFunction(e){return mi((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=rd(t,e[n]);return t}))}}YI.className="Minimum",el(YI);class JI extends HI{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new wb("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const s of e)if(null!=s){t=!1;break}if(t)return;const n=[];for(let s=0;s<e.length;++s){const t=e[s].slice();t.splice(this.axis,1);let r=!1;for(const e of n)if(ge(e,t)){r=!0;break}r||n.push(t)}if(n.length>1)throw new wb("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return mi((()=>wx(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new wb("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const r of t.slice(1)){if(null==n[s]||null==r[s]){n[s]=null;break}n[s]+=r[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new wb("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new wb("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new wb(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return mi((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let a=0;a<e.length;++a)null==t[a]?s.push(Fo(hd(e[a]),"bool")):t[a].rank<e[a].rank?s.push(kh(t[a],-1)):s.push(t[a]);const r=yc(s,this.axis);return Gu(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function ZI(e,t){for(;e<0;)e+=t;return e}JI.className="Concatenate",el(JI);class QI extends HI{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){ce(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new vb("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new wb(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new wb(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>ZI(t,e[n].shape.length))):[ZI(this.axes,n.shape.length),ZI(this.axes,s.shape.length)],this.normalize&&(n=hv(n,t[0]),s=hv(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new vb("batchDot is not implemented for tensors of 4D or higher rank yet");if(ce(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),ce(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"===typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new vb("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return mi((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=fc(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=fc(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?yh(zo(e,t),a[0]):yh(zo(Gl(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=Pl(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=up(i,t)}return 1===i.shape.length&&(i=kh(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[ZI(this.axes,e.length),ZI(this.axes,t.length)],n}computeOutputShape(e){ce(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new vb("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}QI.className="Dot",el(QI);class eN extends pw{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return mi((()=>{this.invokeCallHook(e,t);const n=tw(e);return Ax((()=>Oo(Ix(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}eN.className="GaussianNoise",el(eN);class tN extends pw{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return mi((()=>{this.invokeCallHook(e,t);const n=tw(e);if(this.rate>0&&this.rate<1){return Ax((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return zo(n,Ix(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}tN.className="GaussianDropout",el(tN);class nN extends pw{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||tw(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return mi((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),s=()=>{const t=tw(e),s=-1.7580993408473766;let r=Eh(Dd(n),this.rate);r=mx(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=Oo(zo(t,r),zo(Oo(r,-1),s));return Oo(zo(o,a),i)};return Ax(s,(()=>tw(e)),t.training||!1)}return e}))}}function sN(e,t,n,s,r){let a,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:.001;if(2===e.rank)a=Nc(e,t,n,s,r,i);else if(3===e.rank)a=Sc(e,t,n,s,r,i);else{if(4!==e.rank)throw new vb(`batchNormalization is not implemented for array of rank ${e.rank} yet`);a=Tc(e,t,n,s,r,i)}return a}function rN(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return ge(s.slice().sort(),dx(0,e.rank-1))?function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return mi((()=>{const a=od(e,s),i=a.mean,o=a.variance;return[sN(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return mi((()=>{const a=od(e,s),i=a.mean,o=a.variance,l=[];for(const t of dx(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=fc(i,l),c=fc(o,l),h=null==t?null:fc(t,l),d=null==n?null:fc(n,l);return[sN(e,u,c,d,h,r),i,o]}))}(e,t,n,s,r)}nN.className="AlphaDropout",el(nN);class aN extends pw{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Zx(e.betaInitializer||"zeros"),this.gammaInitializer=Zx(e.gammaInitializer||"ones"),this.movingMeanInitializer=Zx(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Zx(e.movingVarianceInitializer||"ones"),this.betaConstraint=Dw(e.betaConstraint),this.gammaConstraint=Dw(e.gammaConstraint),this.betaRegularizer=jk(e.betaRegularizer),this.gammaRegularizer=jk(e.gammaRegularizer)}build(e){e=nw(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new wb(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new lw({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return mi((()=>{const n=null!=t.training&&t.training,s=tw(e),r=s.shape,a=r.length,i=dx(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Nb(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!ge(u,dx(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=fc(this.movingMean.read(),l),t=fc(this.movingVariance.read(),l),n=this.center?fc(this.beta.read(),l):null,r=this.scale?fc(this.gamma.read(),l):null;return sN(s,e,t,n,r,this.epsilon)}return sN(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=rN(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{mi((()=>{const s=1-n,r=e.read(),a=zo(ol(r,t),s);e.write(ol(r,a))}))};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Jx(this.betaInitializer),gammaInitializer:Jx(this.gammaInitializer),movingMeanInitializer:Jx(this.movingMeanInitializer),movingVarianceInitializer:Jx(this.movingVarianceInitializer),betaRegularizer:Gk(this.betaRegularizer),gammaRegularizer:Gk(this.gammaRegularizer),betaConstraint:Rw(this.betaConstraint),gammaConstraint:Rw(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}aN.className="BatchNormalization",el(aN);class iN extends pw{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"===typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Zx(e.betaInitializer||"zeros"),this.gammaInitializer=Zx(e.gammaInitializer||"ones"),this.betaRegularizer=jk(e.betaRegularizer),this.gammaRegularizer=jk(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=nw(e)).length;"number"===typeof this.axis&&(this.axis=[this.axis]);for(let r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=t);for(const r of this.axis)if(r<0||r>=t)throw new Error(`Invalid axis: ${r}`);if(this.axis.length!==Mb(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t])),s=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,s):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,s):this.beta=null,this.built=!0}call(e,t){const n=tw(e),s=n.shape,r=s.length;return mi((()=>{let{mean:e,variance:t}=od(n,this.axis,!0);const a=Nb(1,r);for(const n of this.axis)a[n]=s[n];const i=e=>null!=e&&e.shape.length!==r?fc(e,a):e;let o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null;const u=[],c=[];for(let n=0;n<r;++n)-1!==this.axis.indexOf(n)?(u.push(s[n]),c.push(1)):(u.push(1),c.push(s[n]));return e=Nh(e,u),t=Nh(t,u),null!=o&&(o=Nh(o,c)),null!=l&&(l=Nh(l,c)),sN(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Jx(this.betaInitializer),gammaInitializer:Jx(this.gammaInitializer),betaRegularizer:Gk(this.betaRegularizer),gammaRegularizer:Gk(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}iN.className="LayerNormalization",el(iN);class oN extends pw{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"===typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new wb(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"===typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new wb(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new wb(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new lw({ndim:4})]}computeOutputShape(e){let t,n;return e=nw(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return mi((()=>{return t=tw(e),n=this.padding,s=this.dataFormat,mi((()=>{if(4!==t.rank)throw new wb(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new wb("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new wb(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],pd(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function lN(e,t,n,s,r,a){return mi((()=>{let i;Qb(r),tx(a),ex(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=nI(e,r);const o="same"===s?"same":"valid";return i="max"===a?Jh(e,t,n,o):mc(e,t,n,o),"channelsFirst"===r&&(i=Gl(i,[0,3,1,2])),i}))}function uN(e,t,n,s,r,a){return mi((()=>{let i;Qb(r),tx(a),ex(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=sI(e,r);const o="same"===s?"same":"valid";return i="max"===a?Zh(e,t,n,o):gc(e,t,n,o),"channelsFirst"===r&&(i=Gl(i,[0,4,1,2,3])),i}))}oN.className="ZeroPadding2D",el(oN);class cN extends pw{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"===typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!==typeof e.poolSize[0])throw new wb(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Bb(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"===typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!==typeof e.strides[0])throw new wb(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Bb(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,ex(this.padding),this.inputSpec=[new lw({ndim:3})]}computeOutputShape(e){const t=eI((e=nw(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return mi((()=>{this.invokeCallHook(e,t),e=gx(tw(e),2);const n=this.poolingFunction(tw(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return up(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class hN extends cN{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Qb(r),ex(s),lN(e,t,n,s,r,"max")}}hN.className="MaxPooling1D",el(hN);class dN extends cN{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Qb(r),ex(s),lN(e,t,n,s,r,"avg")}}dN.className="AveragePooling1D",el(dN);class pN extends pw{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new wb(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Bb(this.poolSize,"poolSize"),Bb(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qb(this.dataFormat),ex(this.padding),this.inputSpec=[new lw({ndim:4})]}computeOutputShape(e){e=nw(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=eI(t,this.poolSize[0],this.padding,this.strides[0]),n=eI(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return mi((()=>(this.invokeCallHook(e,t),this.poolingFunction(tw(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class fN extends pN{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Qb(r),ex(s),lN(e,t,n,s,r,"max")}}fN.className="MaxPooling2D",el(fN);class mN extends pN{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Qb(r),ex(s),lN(e,t,n,s,r,"avg")}}mN.className="AveragePooling2D",el(mN);class gN extends pw{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new wb(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Bb(this.poolSize,"poolSize"),Bb(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qb(this.dataFormat),ex(this.padding),this.inputSpec=[new lw({ndim:5})]}computeOutputShape(e){e=nw(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=eI(t,this.poolSize[0],this.padding,this.strides[0]),n=eI(n,this.poolSize[1],this.padding,this.strides[1]),s=eI(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return mi((()=>(this.invokeCallHook(e,t),this.poolingFunction(tw(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class yN extends gN{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Qb(r),ex(s),uN(e,t,n,s,r,"max")}}yN.className="MaxPooling3D",el(yN);class bN extends gN{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Qb(r),ex(s),uN(e,t,n,s,r,"avg")}}bN.className="AveragePooling3D",el(bN);class xN extends pw{constructor(e){super(e),this.inputSpec=[new lw({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new vb}}class wN extends xN{constructor(e){super(e||{})}call(e,t){return mi((()=>{const t=tw(e);return ed(t,1)}))}}wN.className="GlobalAveragePooling1D",el(wN);class vN extends xN{constructor(e){super(e||{})}call(e,t){return mi((()=>{const t=tw(e);return mh(t,1)}))}}vN.className="GlobalMaxPooling1D",el(vN);class kN extends pw{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qb(this.dataFormat),this.inputSpec=[new lw({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new vb}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class IN extends kN{call(e,t){return mi((()=>{const t=tw(e);return"channelsLast"===this.dataFormat?ed(t,[1,2]):ed(t,[2,3])}))}}IN.className="GlobalAveragePooling2D",el(IN);class NN extends kN{call(e,t){return mi((()=>{const t=tw(e);return"channelsLast"===this.dataFormat?mh(t,[1,2]):mh(t,[2,3])}))}}NN.className="GlobalMaxPooling2D",el(NN);class SN extends pw{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const s=cv(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class TN extends SN{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=nw(e)).length<3)throw new wb(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=nw(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return mi((()=>wI(((e,n)=>[tw(this.layer.call(e,t)),[]]),e=tw(e),[],!1,null,null,!1,!0)[1]))}}TN.className="TimeDistributed",el(TN);class CN extends SN{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=cv(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=cv(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,zb(Jb,"BidirectionalMergeMode",r),e.weights)throw new vb("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Cb(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=xI(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new wb("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new lw({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new vb("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof uw;for(const l of a)if(l instanceof uw!==o)throw new wb("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return mi((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Pd(r,1)),"concat"===this.mergeMode?i=wx([s,r]):"sum"===this.mergeMode?i=Oo(s,r):"ave"===this.mergeMode?i=zo(.5,Oo(s,r)):"mul"===this.mergeMode?i=zo(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){rx(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),rx(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=cv(t.layer);if(delete t.layer,null!=t.numConstants)throw new vb("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}CN.className="Bidirectional",el(CN);class $N extends pw{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return mi((()=>("float32"!==(e=tw(e)).dtype&&(e=mx(e,"float32")),Oo(zo(e,this.scale),this.offset))))}}$N.className="Rescaling",el($N);const{resizeBilinear:EN,cropAndResize:AN}=Kf;class RN extends pw{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,s,r,a,i,o){return mi((()=>{let l,u=!1;const c=[t/a,n/i,(s+t)/a,(r+n)/i],h=[];3===e.rank?(u=!0,l=cp([e])):l=e;for(let e=0;e<l.shape[0];e++)h.push(c);const d=ri(h,[h.length,4]),p=Od(0,h.length,1,"int32"),f=AN(l,d,p,[s,r],"nearest");return mx(u?tw(Np(f)):f,o)}))}upsize(e,t,n,s){return mi((()=>mx(EN(e,[t,n]),s)))}call(e,t){return mi((()=>{const t=tw(e),n=t.dtype,s=t.shape,r=s[s.length-3],a=s[s.length-2];let i=0;r!==this.height&&(i=Math.floor((r-this.height)/2));let o=0;return a!==this.width&&(o=Math.floor((a-this.width)/2),0===o&&(o=1)),i>=0&&o>=0?this.centerCrop(t,i,o,this.height,this.width,r,a,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=nw(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}RN.className="CenterCrop",el(RN);class FN extends pw{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=nw(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return mi((()=>{let n;if("int32"!==(e=tw(e)).dtype&&(e=mx(e,"int32")),"undefined"!==typeof t.countWeights){if("count"!==this.outputMode)throw new wb(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=tw(t.countWeights)}const s=mh(e),r=gh(e),a=$h(this.numTokens,s).bufferSync().get(0),i=Eh(r,0).bufferSync().get(0);if(!a||!i)throw new wb(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,s){let r=tw(e);if("int32"!==r.dtype&&(r=mx(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=kh(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=kh(r,-1)),r.rank>2)throw new wb(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const i=["multiHot","oneHot"].includes(t),o=r;let l;if(l=Kc(o,"undefined"!==typeof s&&"count"===t?s:[],n,i),"tfIdf"!==t)return l;if(s)return zo(l,s);throw new wb("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}FN.className="CategoryEncoding",el(FN);const DN=new Set(["bilinear","nearest"]);class _N extends pw{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!DN.has(e.interpolation))throw new wb(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=nw(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return mi((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return Kf.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Kf.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...DN]} are supported`)}))}}_N.className="Resizing",el(_N);class ON{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}ON.className="RandomSeed";class MN extends pw{constructor(e){super(e),this.randomGenerator=new ON(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}MN.className="BaseRandomLayer";const LN=new Set(["bilinear","nearest"]);class zN extends MN{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new wb(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new wb(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new wb(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!LN.has(n))throw new wb(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=nw(e))[2];return[this.imgHeight,-1,t]}call(e,t){return mi((()=>{const t=tw(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=Dd([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);const r=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return Kf.resizeBilinear(e,r);case"nearest":return Kf.resizeNearestNeighbor(e,r);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...LN]} are supported`)}}))}}function PN(e){return new mw(e)}function BN(e){return new Yk(e)}function WN(e){return new qk(e)}function VN(e){return new Kk(e)}function UN(e){return new Xk(e)}function GN(e){return new Zk(e)}function HN(e){return new Jk(e)}function jN(e){return new mI(e)}function qN(e){return new uI(e)}function KN(e){return new hI(e)}function XN(e){return new cI(e)}function YN(e){return new dI(e)}function JN(e){return new fI(e)}function ZN(e){return new gI(e)}function QN(e){return new yI(e)}function eS(e){return new bI(e)}function tS(e){return new PI(e)}function nS(e){return new LI(e)}function sS(e){return new OI(e)}function rS(e){return new MI(e)}function aS(e){return new zI(e)}function iS(e){return new BI(e)}function oS(e){return new WI(e)}function lS(e){return new VI(e)}function uS(e){return new GI(e)}function cS(e){return new jI(e)}function hS(e){return new KI(e)}function dS(e){return new JI(e)}function pS(e){return new XI(e)}function fS(e){return new YI(e)}function mS(e){return new qI(e)}function gS(e){return new QI(e)}function yS(e){return new aN(e)}function bS(e){return new iN(e)}function xS(e){return new oN(e)}function wS(e){return new dN(e)}function vS(e){return wS(e)}function kS(e){return wS(e)}function IS(e){return new mN(e)}function NS(e){return IS(e)}function SS(e){return IS(e)}function TS(e){return new bN(e)}function CS(e){return TS(e)}function $S(e){return TS(e)}function ES(e){return new wN(e)}function AS(e){return new IN(e)}function RS(e){return new vN(e)}function FS(e){return new NN(e)}function DS(e){return new hN(e)}function _S(e){return new fN(e)}function OS(e){return new yN(e)}function MS(e){return new TI(e)}function LS(e){return new SI(e)}function zS(e){return new $I(e)}function PS(e){return new CI(e)}function BS(e){return new NI(e)}function WS(e){return new II(e)}function VS(e){return new _I(e)}function US(e){return new DI(e)}function GS(e){return new vI(e)}function HS(e){return new EI(e)}function jS(e){return new CN(e)}function qS(e){return new TN(e)}zN.className="RandomWidth",el(zN);const KS=RS,XS=FS,YS=DS,JS=_S;function ZS(e){return new eN(e)}function QS(e){return new tN(e)}function eT(e){return new nN(e)}function tT(e){return new UI(e)}function nT(e){return new $N(e)}function sT(e){return new RN(e)}function rT(e){return new _N(e)}function aT(e){return new FN(e)}function iT(e){return new zN(e)}function oT(e,t){return Iv(e,t)}function lT(e,t){return $v(e,t)}function uT(e,t){return Ev(e,t)}function cT(e,t){return Nv(e,t)}function hT(e,t){return Av(e,t)}function dT(e,t){return Tv(e,t)}function pT(e,t){return Cv(e,t)}function fT(e,t){return wv(e,t)}function mT(e,t){return pv(e,t)}function gT(e,t){return fv(e,t)}function yT(e,t){return fv(e,t)}function bT(e,t){return fv(e,t)}function xT(e,t){return dv(e,t)}function wT(e,t){return dv(e,t)}function vT(e,t){return dv(e,t)}function kT(e,t){return function(e,t){return mi((()=>{const n=e.sub(t).square().sum(),s=e.sub(e.mean()).square().sum();return Xo(1).sub(n.div(s))}))}(e,t)}function IT(e){return new Vk(e)}function NT(e){return Bk(t=e),new Vk({l1:null!=t?t.l1:null,l2:0});var t}function ST(e){return Bk(t=e),new Vk({l2:null!=t?t.l2:null,l1:0});var t}class TT extends nv{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof hk))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function CT(e,t){return e<t}function $T(e,t){return e>t}class ET extends TT{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new vb("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=CT:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=$T:this.monitorFunc=CT,this.monitorFunc===CT&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===CT?1/0:-1/0}async onEpochEnd(e,t){await Qw(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const AT={earlyStopping:function(e){return new ET(e)}};var RT,FT;Qe().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(RT||(RT={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(FT||(FT={}));const DT={};function _T(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};DT[e]=n}function OT(e){return DT[e]}function MT(e){delete DT[e]}function LT(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return zT(t.inputNames[o],n,s,r);if("tensors"===a.type){const a=t.inputs.slice(e,i);return t.inputNames.slice(e,i).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)})).map((e=>zT(e,n,s,r)))}const l=zT(t.inputNames[o],n,s,r),u=l.dataSync();return"number"===a.type?u[0]:We(l.shape,u)}const i=t.attrParams[e];return i&&i.value}function zT(e,t,n,s){const[r,a]=VT(e,n);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[WT(r,e)]));return void 0!==i?t[WT(r,i)][a]:void 0}function PT(e,t,n){return t[WT(e,n.currentContextId)]}function BT(e,t){const[n,s,r]=VT(e,t);return[WT(n,t&&t.currentContextId),s,r]}function WT(e,t){return t?`${e}-${t}`:e}function VT(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const s=e.split(":");let r;if(1===s.length)r=[e,0,void 0];else{const e=s[0],t=3===s.length?s[1]:void 0;r=[e,Number(s[s.length-1]),t]}return n&&t.parseNodeNameCache.set(e,r),r}function UT(e,t,n){let s=LT("pad",e,t,n);if("explicit"===s){s=LT("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function GT(e){return e.kept?e:Do(e)}const HT=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],jT=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],qT=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],KT=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],XT=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],YT=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],JT=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],ZT=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],QT=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],eC=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],tC=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],nC=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],sC=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],rC=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],aC=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],iC=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],oC=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],lC=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],uC=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class cC{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[S,T,C,$,E,A,R,F,D,_,O,M,L,z,P,B,W,V,U].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,r]=BT(e),a=i[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=BT(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=BT(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const p={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:d};return a.length>0&&(p.initNodes=a),p}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=OT(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=dC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=dC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=kC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=kC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=fC(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=fC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=vC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=vC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=pC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=pC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=NC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=NC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=wC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=wC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=IC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=IC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=yC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=yC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=bC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=bC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=gC(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=gC(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=BT(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:mC(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=BT(e),i=s[r];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=BT(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function hC(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Qe().global;if("undefined"!==typeof t.atob)return t.atob(e);if("undefined"!==typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function dC(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=e[t];return null!=r?hC(r.s,s):n}function pC(e,t,n){const s=e[t];return s?s.b:n}function fC(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"===typeof r?r:parseInt(r,10)}function mC(e){switch("string"===typeof e&&(e=RT[e]),e){case RT.DT_FLOAT:case RT.DT_HALF:return"float32";case RT.DT_INT32:case RT.DT_INT64:case RT.DT_INT8:case RT.DT_UINT8:return"int32";case RT.DT_BOOL:return"bool";case RT.DT_DOUBLE:return"float32";case RT.DT_STRING:return"string";case RT.DT_COMPLEX64:case RT.DT_COMPLEX128:return"complex64";default:return null}}function gC(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function yC(e,t,n){const s=e[t];return s&&s.type?mC(s.type):n}function bC(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>mC(e))):n}function xC(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"===typeof e.size?e.size:parseInt(e.size,10))):[]}function wC(e,t,n){const s=e[t];return s&&s.shape?xC(s.shape):n}function vC(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"===typeof e?e:parseInt(e,10))):n}function kC(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>hC(e,s))):n}function IC(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>xC(e))):n}function NC(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class SC{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return zT(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return zT(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return fC(this.node.rawAttrs,e,t);if(null!=n.s)return dC(this.node.rawAttrs,e,t);if(null!=n.b)return pC(this.node.rawAttrs,e,t);if(null!=n.shape)return wC(this.node.rawAttrs,e,t);if(null!=n.type)return yC(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return vC(this.node.rawAttrs,e,t);if(null!=n.list.s)return kC(this.node.rawAttrs,e,t);if(null!=n.list.shape)return IC(this.node.rawAttrs,e,t);if(null!=n.list.b)return NC(this.node.rawAttrs,e,t);if(null!=n.list.type)return bC(this.node.rawAttrs,e,t)}return t}}function TC(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if("number"!==typeof e&&"number"!==typeof t){ce(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];ce(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function CC(e){return"number"!==typeof e&&!e.some((e=>e<0))}function $C(e,t,n){let s=EC(e,n);const r=!CC(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=EC(e.shape,s)})),!CC(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function EC(e,t){if("number"===typeof e)return t;if("number"===typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class AC{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Xo(0),yi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),TC(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,yi(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return ri([],[0].concat(this.elementShape));const n=this.readMany(e);return TC(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),cp(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return ri([],[0].concat(this.elementShape));const t=[];for(let s=0;s<this.size();s++)t.push(s);const n=this.readMany(t);return TC(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),yc(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Np(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];mi((()=>{t=fc(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=fc(xc(t,i,o),this.elementShape)}return a}));const i=[];for(let o=0;o<e.length;o++)i[o]=o;this.writeMany(i,a)}}class RC{get id(){return this.idTensor.id}constructor(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);TC(t,e.shape,"TensorList shape mismatch: "),yi(e)})),this.idTensor=Xo(0),this.maxNumElements=s,yi(this.idTensor)}copy(){return new RC([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);TC(e,this.elementShape,"TensorList shape mismatch: ");const s=$C(this.elementShape,this.tensors,e);return mi((()=>{const e=this.tensors.map((e=>fc(e,s)));return cp(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=$C(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,TC(s.shape,e,"TensorList shape mismatch: "),fc(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(TC(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");yi(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new RC([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);TC(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=$C(this.elementShape,this.tensors,t);return fc(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);TC(this.elementShape,t.shape,"TensorList shape mismatch: "),yi(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);TC(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=$C(this.elementShape,this.tensors,n);return 0===e.length?ri([],[0].concat(s)):mi((()=>{const t=e.map((e=>fc(this.tensors[e],s)));return cp(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);TC(this.elementShape,t,"TensorList shape mismatch: ");const n=$C(this.elementShape,this.tensors,t);return 0===this.size()?ri([],[0].concat(n)):mi((()=>{const e=this.tensors.map((e=>fc(e,n)));return yc(e,0)}))}}const FC=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=LT("thenBranch",e,t,n),r=LT("elseBranch",e,t,n),a=LT("cond",e,t,n),i=LT("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=LT("body",e,t,n),r=LT("cond",e,t,n),a=LT("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[GT(LT("pred",e,t,n))];case"Switch":{const s=LT("pred",e,t,n);let r=LT("data",e,t,n);return r.kept||(r=GT(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==zT(e,t,n)));if(s){return[GT(zT(s,t,n))]}return}case"Enter":{const s=LT("frameName",e,t,n),r=LT("tensor",e,t,n);return n.enterFrame(s),[GT(r)]}case"Exit":{const s=LT("tensor",e,t,n);return n.exitFrame(),[GT(s)]}case"NextIteration":{const s=LT("tensor",e,t,n);return n.nextIteration(),[GT(s)]}case"TensorArrayV3":{const s=LT("size",e,t,n),r=LT("dtype",e,t,n),a=LT("elementShape",e,t,n),i=LT("dynamicSize",e,t,n),o=LT("clearAfterRead",e,t,n),l=LT("identicalElementShapes",e,t,n),u=LT("name",e,t,n),c=new AC(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Xo(1)]}case"TensorArrayWriteV3":{const s=LT("tensorArrayId",e,t,n),r=LT("index",e,t,n),a=LT("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=LT("tensorArrayId",e,t,n),r=LT("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=LT("tensorArrayId",e,t,n),r=LT("indices",e,t,n),a=LT("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=LT("tensorArrayId",e,t,n),r=LT("indices",e,t,n),a=LT("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=LT("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=LT("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=LT("tensorArrayId",e,t,n),r=LT("tensor",e,t,n),a=LT("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=LT("tensorArrayId",e,t,n);return[Xo(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=LT("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=LT("tensorListId",e,t,n),r=LT("index",e,t,n),a=LT("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=LT("tensorListId",e,t,n),r=LT("index",e,t,n),a=LT("elementShape",e,t,n),i=LT("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=LT("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new RC([],n,e.dtype,s),i=Np(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(LT("tensor",e,t,n),s,LT("elementShape",e,t,n),LT("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=LT("elementShape",e,t,n),r=LT("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=LT(a,e,t,n),o=function(e,t,n,s){return new RC([],e,t,s)}(s,r,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const s=LT("tensorListId",e,t,n),r=LT("indices",e,t,n),a=LT("elementShape",e,t,n),i=LT("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=LT("tensorListId",e,t,n),r=LT("elementShape",e,t,n),a=LT("elementDType",e,t,n),i=LT("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);TC(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=Np(e);return new RC(r,t,s)}(LT("tensor",e,t,n),LT("elementShape",e,t,n),LT("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=LT("tensorListId",e,t,n),r=n.getTensorList(s.id),a=LT("dtype",e,t,n),i=LT("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=LT("tensorListId",e,t,n),r=LT("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=LT("tensorListId",e,t,n),r=LT("elementShape",e,t,n),a=LT("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=LT("tensor",e,t,n),r=LT("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=EC(e.shape.slice(1),n),i=0===s?0:e.size/s,o=mi((()=>{const n=[];e=fc(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=fc(xc(e,o,l),a)}return e.dispose(),n})),l=new RC([],n,e.dtype,t.length);for(let u=0;u<o.length;u++)l.setItem(u,o[u]);return l}(s,LT("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const s=LT("tensorListId",e,t,n);return[Xo(n.getTensorList(s.id).size(),"int32")]}case"TensorListResize":{const s=LT("tensorListId",e,t,n),r=LT("size",e,t,n),a=n.getTensorList(s.id).resize(r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function DC(e,t,n){const[s,r]=LT("fusedOps",e,t,n),a="biasadd"===s,i=!a,o="prelu"===r,l="fusedbatchnorm"===s,u=LT("numArgs",e,t,n);if(a){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=LT("strides",e,t,n),h=UT(e,t,n),d=LT("dataFormat",e,t,n).toUpperCase(),p=LT("dilations",e,t,n);let[f,m]=LT("args",e,t,n);i&&(m=f,f=void 0);return{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:LT("leakyreluAlpha",e,t,n)}}function _C(e,t,n){return{boxes:LT("boxes",e,t,n),scores:LT("scores",e,t,n),maxOutputSize:LT("maxOutputSize",e,t,n),iouThreshold:LT("iouThreshold",e,t,n),scoreThreshold:LT("scoreThreshold",e,t,n),softNmsSigma:LT("softNmsSigma",e,t,n)}}class OC{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Xo(0),this.tensorMap=new Map,yi(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Xo(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),mi((()=>{const e=Np(t),s=n.length,r=e.length;ce(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];yi(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return mi((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return cp(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function MC(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:mi;const a=((e,t,n)=>{switch(e.category){case"arithmetic":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(LT("a",e,t,n),LT("b",e,t,n))];case"AddN":return[s.addN(LT("tensors",e,t,n))];case"FloorMod":case"Mod":return[s.mod(LT("a",e,t,n),LT("b",e,t,n))];case"Mul":return[s.mul(LT("a",e,t,n),LT("b",e,t,n))];case"RealDiv":case"Div":return[s.div(LT("a",e,t,n),LT("b",e,t,n))];case"DivNoNan":return[s.divNoNan(LT("a",e,t,n),LT("b",e,t,n))];case"FloorDiv":return[s.floorDiv(LT("a",e,t,n),LT("b",e,t,n))];case"Sub":return[s.sub(LT("a",e,t,n),LT("b",e,t,n))];case"Minimum":return[s.minimum(LT("a",e,t,n),LT("b",e,t,n))];case"Maximum":return[s.maximum(LT("a",e,t,n),LT("b",e,t,n))];case"Pow":return[s.pow(LT("a",e,t,n),LT("b",e,t,n))];case"SquaredDifference":return[s.squaredDifference(LT("a",e,t,n),LT("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"basic_math":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"Abs":case"ComplexAbs":return[s.abs(LT("x",e,t,n))];case"Acos":return[s.acos(LT("x",e,t,n))];case"Acosh":return[s.acosh(LT("x",e,t,n))];case"Asin":return[s.asin(LT("x",e,t,n))];case"Asinh":return[s.asinh(LT("x",e,t,n))];case"Atan":return[s.atan(LT("x",e,t,n))];case"Atan2":return[s.atan2(LT("x",e,t,n),LT("y",e,t,n))];case"Atanh":return[s.atanh(LT("x",e,t,n))];case"Ceil":return[s.ceil(LT("x",e,t,n))];case"Complex":return[s.complex(LT("real",e,t,n),LT("imag",e,t,n))];case"Cos":return[s.cos(LT("x",e,t,n))];case"Cosh":return[s.cosh(LT("x",e,t,n))];case"Elu":return[s.elu(LT("x",e,t,n))];case"Erf":return[s.erf(LT("x",e,t,n))];case"Exp":return[s.exp(LT("x",e,t,n))];case"Expm1":return[s.expm1(LT("x",e,t,n))];case"Floor":return[s.floor(LT("x",e,t,n))];case"Log":return[s.log(LT("x",e,t,n))];case"Log1p":return[s.log1p(LT("x",e,t,n))];case"Imag":return[s.imag(LT("x",e,t,n))];case"Neg":return[s.neg(LT("x",e,t,n))];case"Reciprocal":return[s.reciprocal(LT("x",e,t,n))];case"Real":return[s.real(LT("x",e,t,n))];case"Relu":return[s.relu(LT("x",e,t,n))];case"Round":return[s.round(LT("x",e,t,n))];case"Selu":return[s.selu(LT("x",e,t,n))];case"Sigmoid":return[s.sigmoid(LT("x",e,t,n))];case"Sin":return[s.sin(LT("x",e,t,n))];case"Sign":return[s.sign(LT("x",e,t,n))];case"Sinh":return[s.sinh(LT("x",e,t,n))];case"Softplus":return[s.softplus(LT("x",e,t,n))];case"Sqrt":return[s.sqrt(LT("x",e,t,n))];case"Square":return[s.square(LT("x",e,t,n))];case"Tanh":return[s.tanh(LT("x",e,t,n))];case"Tan":return[s.tan(LT("x",e,t,n))];case"ClipByValue":return[s.clipByValue(LT("x",e,t,n),LT("clipValueMin",e,t,n),LT("clipValueMax",e,t,n))];case"Relu6":return[s.relu6(LT("x",e,t,n))];case"Rsqrt":return[s.rsqrt(zT(e.inputNames[0],t,n))];case"LeakyRelu":return[s.leakyRelu(LT("x",e,t,n),LT("alpha",e,t,n))];case"Prelu":return[s.prelu(LT("x",e,t,n),LT("alpha",e,t,n))];case"IsNan":return[s.isNaN(zT(e.inputNames[0],t,n))];case"IsInf":return[s.isInf(zT(e.inputNames[0],t,n))];case"IsFinite":return[s.isFinite(zT(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"control":return FC(e,t,n);case"convolution":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"Conv1D":{const r=LT("stride",e,t,n),a=LT("pad",e,t,n),i=LT("dataFormat",e,t,n).toUpperCase(),o=LT("dilation",e,t,n);return[s.conv1d(LT("x",e,t,n),LT("filter",e,t,n),r,a,i,o)]}case"Conv2D":{const r=LT("strides",e,t,n),a=UT(e,t,n),i=LT("dataFormat",e,t,n).toUpperCase(),o=LT("dilations",e,t,n);return[s.conv2d(LT("x",e,t,n),LT("filter",e,t,n),[r[1],r[2]],a,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=DC(e,t,n);return[s.fused.conv2d({x:LT("x",e,t,n),filter:LT("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=DC(e,t,n);return[s.fused.depthwiseConv2d({x:LT("x",e,t,n),filter:LT("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=LT("outputShape",e,t,n),a=LT("strides",e,t,n),i=UT(e,t,n);return[s.conv2dTranspose(LT("x",e,t,n),LT("filter",e,t,n),r,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=LT("strides",e,t,n),a=UT(e,t,n),i=LT("dilations",e,t,n),o=LT("dataFormat",e,t,n).toUpperCase();return[s.depthwiseConv2d(LT("input",e,t,n),LT("filter",e,t,n),[r[1],r[2]],a,o,[i[1],i[2]])]}case"Conv3D":{const r=LT("strides",e,t,n),a=LT("pad",e,t,n),i=LT("dataFormat",e,t,n).toUpperCase(),o=LT("dilations",e,t,n);return[s.conv3d(LT("x",e,t,n),LT("filter",e,t,n),[r[1],r[2],r[3]],a,i,[o[1],o[2],o[3]])]}case"AvgPool":{const r=LT("strides",e,t,n),a=LT("pad",e,t,n),i=LT("kernelSize",e,t,n);return[s.avgPool(LT("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=LT("strides",e,t,n),a=LT("pad",e,t,n),i=LT("kernelSize",e,t,n);return[s.maxPool(LT("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=LT("strides",e,t,n),a=LT("pad",e,t,n),i=LT("kernelSize",e,t,n),o=LT("includeBatchInIndex",e,t,n),{result:l,indexes:u}=s.maxPoolWithArgmax(LT("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a,o);return[l,u]}case"AvgPool3D":{const r=LT("strides",e,t,n),a=LT("pad",e,t,n),i=LT("kernelSize",e,t,n);return[s.avgPool3d(LT("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=LT("strides",e,t,n),a=LT("pad",e,t,n),i=LT("kernelSize",e,t,n);return[s.maxPool3d(LT("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=LT("strides",e,t,n),a=LT("pad",e,t,n),i=LT("dilations",e,t,n),o=r[1],l=r[2],u=i[1],c=i[2];return[s.dilation2d(LT("x",e,t,n),LT("filter",e,t,n),[o,l],a,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"creation":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"Fill":{const r=LT("shape",e,t,n),a=LT("dtype",e,t,n),i=LT("value",e,t,n);return[s.fill(r,i,a)]}case"LinSpace":{const r=LT("start",e,t,n),a=LT("stop",e,t,n),i=LT("num",e,t,n);return[s.linspace(r,a,i)]}case"Multinomial":{const r=LT("logits",e,t,n),a=LT("numSamples",e,t,n),i=LT("seed",e,t,n);return[s.multinomial(r,a,i)]}case"OneHot":{const r=LT("indices",e,t,n),a=LT("depth",e,t,n),i=LT("onValue",e,t,n),o=LT("offValue",e,t,n),l=LT("dtype",e,t,n);return[s.oneHot(r,a,i,o,l)]}case"Ones":return[s.ones(LT("shape",e,t,n),LT("dtype",e,t,n))];case"OnesLike":return[s.onesLike(LT("x",e,t,n))];case"RandomStandardNormal":return[s.randomStandardNormal(LT("shape",e,t,n),LT("dtype",e,t,n),LT("seed",e,t,n))];case"RandomUniform":return[s.randomUniform(LT("shape",e,t,n),LT("minval",e,t,n),LT("maxval",e,t,n),LT("dtype",e,t,n))];case"RandomUniformInt":return[s.randomUniformInt(LT("shape",e,t,n),LT("minval",e,t,n),LT("maxval",e,t,n),LT("seed",e,t,n))];case"Range":{const r=LT("start",e,t,n),a=LT("stop",e,t,n),i=LT("step",e,t,n);return[s.range(r,a,i,LT("dtype",e,t,n))]}case"TruncatedNormal":{const r=LT("shape",e,t,n),a=LT("mean",e,t,n),i=LT("stdDev",e,t,n),o=LT("seed",e,t,n);return[s.truncatedNormal(r,a,i,LT("dtype",e,t,n),o)]}case"Zeros":return[s.zeros(LT("shape",e,t,n),LT("dtype",e,t,n))];case"ZerosLike":return[s.zerosLike(LT("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"dynamic":return async function(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:G;switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=_C(e,t,n),c=await r.image.nonMaxSuppressionWithScoreAsync(s,a,i,o,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=_C(e,t,n),u=LT("padToMaxOutputSize",e,t,n),c=await r.image.nonMaxSuppressionPaddedAsync(s,a,i,o,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=_C(e,t,n);return[await r.image.nonMaxSuppressionAsync(s,a,i,o,l)]}case"Where":{const s=r.cast(LT("condition",e,t,n),"bool"),a=[await r.whereAsync(s)];return s.dispose(),a}case"ListDiff":return r.setdiff1dAsync(LT("x",e,t,n),LT("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n);case"evaluation":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"LowerBound":{const r=LT("sortedSequence",e,t,n),a=LT("values",e,t,n);return[s.lowerBound(r,a)]}case"TopKV2":{const r=LT("x",e,t,n),a=LT("k",e,t,n),i=LT("sorted",e,t,n),o=s.topk(r,a,i);return[o.values,o.indices]}case"UpperBound":{const r=LT("sortedSequence",e,t,n),a=LT("values",e,t,n);return[s.upperBound(r,a)]}case"Unique":{const r=LT("x",e,t,n),a=s.unique(r);return[a.values,a.indices]}case"UniqueV2":{const r=LT("x",e,t,n),a=LT("axis",e,t,n),i=s.unique(r,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"image":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"ResizeBilinear":{const r=LT("images",e,t,n),a=LT("size",e,t,n),i=LT("alignCorners",e,t,n),o=LT("halfPixelCenters",e,t,n);return[s.image.resizeBilinear(r,[a[0],a[1]],i,o)]}case"ResizeNearestNeighbor":{const r=LT("images",e,t,n),a=LT("size",e,t,n),i=LT("alignCorners",e,t,n),o=LT("halfPixelCenters",e,t,n);return[s.image.resizeNearestNeighbor(r,[a[0],a[1]],i,o)]}case"CropAndResize":{const r=LT("image",e,t,n),a=LT("boxes",e,t,n),i=LT("boxInd",e,t,n),o=LT("cropSize",e,t,n),l=LT("method",e,t,n),u=LT("extrapolationValue",e,t,n);return[s.image.cropAndResize(r,a,i,o,l,u)]}case"ImageProjectiveTransformV3":{const r=LT("images",e,t,n),a=LT("transforms",e,t,n),i=LT("outputShape",e,t,n),o=LT("fillValue",e,t,n),l=LT("interpolation",e,t,n),u=LT("fillMode",e,t,n);return[s.image.transform(r,a,l.toLowerCase(),u.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"graph":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=LT("default",e,t,n);return[zT(e.name,t,n)||r];case"Placeholder":return[zT(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[GT(LT("x",e,t,n))];case"IdentityN":return LT("x",e,t,n).map((e=>GT(e)));case"Shape":return[s.tensor1d(LT("x",e,t,n).shape,"int32")];case"ShapeN":return LT("x",e,t,n).map((e=>s.tensor1d(e.shape)));case"Size":return[s.scalar(LT("x",e,t,n).size,"int32")];case"Rank":return[s.scalar(LT("x",e,t,n).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=LT("x",e,t,n),i=LT("data",e,t,n),o=LT("message",e,t,n),l=LT("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,l));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"logical":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"Equal":return[s.equal(LT("a",e,t,n),LT("b",e,t,n))];case"NotEqual":return[s.notEqual(LT("a",e,t,n),LT("b",e,t,n))];case"Greater":return[s.greater(LT("a",e,t,n),LT("b",e,t,n))];case"GreaterEqual":return[s.greaterEqual(LT("a",e,t,n),LT("b",e,t,n))];case"Less":return[s.less(LT("a",e,t,n),LT("b",e,t,n))];case"LessEqual":return[s.lessEqual(LT("a",e,t,n),LT("b",e,t,n))];case"LogicalAnd":return[s.logicalAnd(LT("a",e,t,n),LT("b",e,t,n))];case"LogicalNot":return[s.logicalNot(LT("a",e,t,n))];case"LogicalOr":return[s.logicalOr(LT("a",e,t,n),LT("b",e,t,n))];case"Select":case"SelectV2":return[s.where(LT("condition",e,t,n),LT("a",e,t,n),LT("b",e,t,n))];case"BitwiseAnd":return[s.bitwiseAnd(LT("a",e,t,n),LT("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"matrices":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(LT("a",e,t,n),LT("b",e,t,n),LT("transposeA",e,t,n),LT("transposeB",e,t,n))];case"Einsum":return[s.einsum(LT("equation",e,t,n),...LT("tensors",e,t,n))];case"Transpose":return[s.transpose(LT("x",e,t,n),LT("perm",e,t,n))];case"_FusedMatMul":const[r,a]=LT("fusedOps",e,t,n),i="biasadd"===r,o="prelu"===a,l=LT("numArgs",e,t,n),u=LT("leakyreluAlpha",e,t,n);if(i){if(o&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=LT("args",e,t,n);return[s.fused.matMul({a:LT("a",e,t,n),b:LT("b",e,t,n),transposeA:LT("transposeA",e,t,n),transposeB:LT("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(LT("a",e,t,n),LT("numLower",e,t,n),LT("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"normalization":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"EuclideanNorm":return[s.euclideanNorm(LT("x",e,t,n),LT("axis",e,t,n),LT("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(LT("x",e,t,n),LT("mean",e,t,n),LT("variance",e,t,n),LT("offset",e,t,n),LT("scale",e,t,n),LT("epsilon",e,t,n))];case"LRN":return[s.localResponseNormalization(LT("x",e,t,n),LT("radius",e,t,n),LT("bias",e,t,n),LT("alpha",e,t,n),LT("beta",e,t,n))];case"Softmax":return[s.softmax(LT("x",e,t,n))];case"LogSoftmax":return[s.logSoftmax(LT("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"ragged":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:a}=s.raggedGather(LT("paramsNestedSplits",e,t,n),LT("paramsDenseValues",e,t,n),LT("indices",e,t,n),LT("outputRaggedRank",e,t,n));return r.concat(a)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:a}=s.raggedRange(LT("starts",e,t,n),LT("limits",e,t,n),LT("splits",e,t,n));return[r,a]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(LT("shape",e,t,n),LT("values",e,t,n),LT("defaultValue",e,t,n),LT("rowPartitionTensors",e,t,n),LT("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"reduction":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"Max":{const r=LT("axis",e,t,n),a=LT("keepDims",e,t,n);return[s.max(LT("x",e,t,n),r,a)]}case"Mean":{const r=LT("axis",e,t,n),a=LT("keepDims",e,t,n);return[s.mean(LT("x",e,t,n),r,a)]}case"Min":{const r=LT("axis",e,t,n),a=LT("keepDims",e,t,n);return[s.min(LT("x",e,t,n),r,a)]}case"Sum":{const r=LT("axis",e,t,n),a=LT("keepDims",e,t,n);return[s.sum(LT("x",e,t,n),r,a)]}case"All":{const r=LT("axis",e,t,n),a=LT("keepDims",e,t,n);return[s.all(LT("x",e,t,n),r,a)]}case"Any":{const r=LT("axis",e,t,n),a=LT("keepDims",e,t,n);return[s.any(LT("x",e,t,n),r,a)]}case"ArgMax":{const r=LT("axis",e,t,n);return[s.argMax(LT("x",e,t,n),r)]}case"ArgMin":{const r=LT("axis",e,t,n);return[s.argMin(LT("x",e,t,n),r)]}case"Prod":{const r=LT("axis",e,t,n),a=LT("keepDims",e,t,n);return[s.prod(LT("x",e,t,n),r,a)]}case"Cumprod":{const r=LT("axis",e,t,n),a=LT("exclusive",e,t,n),i=LT("reverse",e,t,n);return[s.cumprod(LT("x",e,t,n),r,a,i)]}case"Cumsum":{const r=LT("axis",e,t,n),a=LT("exclusive",e,t,n),i=LT("reverse",e,t,n);return[s.cumsum(LT("x",e,t,n),r,a,i)]}case"Bincount":const r=LT("x",e,t,n),a=LT("weights",e,t,n),i=LT("size",e,t,n);return[s.bincount(r,a,i)];case"DenseBincount":{const r=LT("x",e,t,n),a=LT("weights",e,t,n),i=LT("size",e,t,n),o=LT("binaryOutput",e,t,n);return[s.denseBincount(r,a,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"slice_join":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"ConcatV2":case"Concat":{const r=LT("n",e,t,n),a=LT("axis",e,t,n);let i=LT("tensors",e,t,n);return i=i.slice(0,r),[s.concat(i,a)]}case"Gather":{const r=LT("x",e,t,n),a=LT("indices",e,t,n);return[s.gather(r,s.cast(a,"int32"),0)]}case"GatherV2":{const r=LT("axis",e,t,n),a=LT("batchDims",e,t,n),i=LT("x",e,t,n),o=LT("indices",e,t,n);return[s.gather(i,s.cast(o,"int32"),r,a)]}case"Reverse":{const r=LT("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const i=LT("x",e,t,n);return[s.reverse(i,a)]}case"ReverseV2":{const r=LT("axis",e,t,n),a=LT("x",e,t,n);return[s.reverse(a,r)]}case"Slice":{const r=LT("begin",e,t,n),a=LT("size",e,t,n);return[s.slice(LT("x",e,t,n),r,a)]}case"StridedSlice":{const r=LT("begin",e,t,n),a=LT("end",e,t,n),i=LT("strides",e,t,n),o=LT("beginMask",e,t,n),l=LT("endMask",e,t,n),u=LT("ellipsisMask",e,t,n),c=LT("newAxisMask",e,t,n),h=LT("shrinkAxisMask",e,t,n),d=LT("x",e,t,n);return[s.stridedSlice(d,r,a,i,o,l,u,c,h)]}case"Pack":return mi((()=>{const r=LT("axis",e,t,n),a=LT("tensors",e,t,n),i=a[0].shape,o=s.squeeze(a[0]).shape,l=a.map((e=>{const t=ge(e.shape,i);if(!t&&!ge(s.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,i)}));return[s.stack(l,r)]}));case"Unpack":{const r=LT("axis",e,t,n),a=LT("tensor",e,t,n);return s.unstack(a,r)}case"Tile":{const r=LT("reps",e,t,n);return[s.tile(LT("x",e,t,n),r)]}case"Split":case"SplitV":{const r=LT("axis",e,t,n),a=LT("numOrSizeSplits",e,t,n),i=LT("x",e,t,n);return s.split(i,a,r)}case"ScatterNd":{const r=LT("indices",e,t,n),a=LT("values",e,t,n),i=LT("shape",e,t,n);return[s.scatterND(r,a,i)]}case"GatherNd":{const r=LT("x",e,t,n),a=LT("indices",e,t,n);return[s.gatherND(r,a)]}case"SparseToDense":{const r=LT("sparseIndices",e,t,n),a=LT("outputShape",e,t,n),i=LT("sparseValues",e,t,n),o=LT("defaultValue",e,t,n);return[s.sparseToDense(r,i,a,i.dtype===o.dtype?o:s.cast(o,i.dtype))]}case"TensorScatterUpdate":{const r=LT("indices",e,t,n),a=LT("values",e,t,n),i=LT("tensor",e,t,n);return[s.tensorScatterUpdate(i,r,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"sparse":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:i,reverseIndexMap:o}=s.sparse.sparseFillEmptyRows(LT("indices",e,t,n),LT("values",e,t,n),LT("denseShape",e,t,n),LT("defaultValue",e,t,n));return[r,a,i,o]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=s.sparse.sparseReshape(LT("inputIndices",e,t,n),LT("inputShape",e,t,n),LT("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(LT("data",e,t,n),LT("indices",e,t,n),LT("segmentIds",e,t,n))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(LT("data",e,t,n),LT("indices",e,t,n),LT("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"spectral":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"FFT":return[s.fft(LT("x",e,t,n))];case"IFFT":return[s.ifft(LT("x",e,t,n))];case"RFFT":return[s.rfft(LT("x",e,t,n))];case"IRFFT":return[s.irfft(LT("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"string":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(LT("input",e,t,n),LT("pattern",e,t,n),LT("rewrite",e,t,n),LT("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=s.string.stringNGrams(LT("data",e,t,n),LT("dataSplits",e,t,n),LT("separator",e,t,n),LT("nGramWidths",e,t,n),LT("leftPad",e,t,n),LT("rightPad",e,t,n),LT("padWidth",e,t,n),LT("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:i}=s.string.stringSplit(LT("input",e,t,n),LT("delimiter",e,t,n),LT("skipEmpty",e,t,n));return[r,a,i]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(LT("input",e,t,n),LT("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"transformation":return r((()=>function(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:G;switch(e.op){case"Cast":return[s.cast(LT("x",e,t,n),LT("dtype",e,t,n))];case"ExpandDims":{const r=LT("axis",e,t,n);return[s.expandDims(LT("x",e,t,n),r)]}case"Squeeze":{const r=LT("axis",e,t,n);return[s.squeeze(LT("x",e,t,n),r)]}case"Reshape":return[s.reshape(LT("x",e,t,n),LT("shape",e,t,n))];case"EnsureShape":return[s.ensureShape(LT("x",e,t,n),LT("shape",e,t,n))];case"MirrorPad":return[s.mirrorPad(LT("x",e,t,n),LT("padding",e,t,n),LT("mode",e,t,n))];case"PadV2":case"Pad":return[s.pad(LT("x",e,t,n),LT("padding",e,t,n),LT("constantValue",e,t,n))];case"SpaceToBatchND":{const r=LT("blockShape",e,t,n),a=LT("paddings",e,t,n);return[s.spaceToBatchND(LT("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=LT("blockShape",e,t,n),a=LT("crops",e,t,n);return[s.batchToSpaceND(LT("x",e,t,n),r,a)]}case"DepthToSpace":{const r=LT("blockSize",e,t,n),a=LT("dataFormat",e,t,n).toUpperCase();return[s.depthToSpace(LT("x",e,t,n),r,a)]}case"BroadcastTo":return[s.broadcastTo(LT("x",e,t,n),LT("shape",e,t,n))];case"BroadcastArgs":return[s.broadcastArgs(LT("s0",e,t,n),LT("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=s.getHashTableHandleByName(e.name);if(null!=r)return[r];{const r=LT("keyDType",e,t,n),a=LT("valueDType",e,t,n),i=new OC(r,a);return s.addHashTable(e.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const r=LT("tableHandle",e,t,n,s),a=LT("keys",e,t,n),i=LT("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=LT("tableHandle",e,t,n,s),a=LT("keys",e,t,n),i=LT("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=LT("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=OT(e.op);if(a&&a.customExecutor)return a.customExecutor(new SC(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Xe(a)?a.then((e=>[].concat(e))):[].concat(a)}class LC{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=arguments.length>4?arguments[4]:void 0;this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.parseNodeNameCache=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function zC(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=new Set(Object.keys(e).map((e=>VT(e)[0])));s=s||[];const c=new Set(s.map((e=>VT(e.name)[0]))),h=[...t];for(;h.length>0;){const e=h.pop();(GC(e)||HC(e)||jC(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(u.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}function PC(e,t){const{usedNodes:n,inputs:s}=t,r=Object.keys(s).map((e=>VT(e)[0])).map((t=>e.nodes[t])),a=e.initNodes||[],i=e=>n.has("string"===typeof e?e:e.name);function o(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}const l=o([...r,...e.weights,...a]).filter(i),u=o([...l,...Object.values(e.nodes)]).filter(i),c=new Map(u.map((e=>[e.name,e]))),h={};for(const m of u){h[m.name]=h[m.name]||0;for(const e of m.children)i(e)||(h[e.name]=Number.POSITIVE_INFINITY),h[e.name]=(h[e.name]||0)+1}const d=Object.entries(h).filter((e=>{let[,t]=e;return 0===t})).map((e=>{let[t]=e;return t})),p=[...d];for(;d.length>0;){const e=d.pop(),t=c.get(e);for(const n of t.children.filter(i))0===--h[n.name]&&(p.push(n.name),d.push(n.name))}const f=function(e,t){const n=new Map(e.map((e=>[e.name,e]))),s=t.map((e=>e.name)),r=new Set(s);for(;s.length>0;){const e=s.pop(),t=n.get(e);for(const a of t.children)n.has(a.name)&&!r.has(a.name)&&(r.add(a.name),s.push(a.name))}const a=e.filter((e=>r.has(e.name)));return a}(p.map((e=>c.get(e))),l);return function(e,t){const n=new Map(e.map(((e,t)=>[e.name,t]))),s=new Set(t.map((e=>e.name))),r=e=>s.has("string"===typeof e?e:e.name),a=new Set(e.map((e=>e.name))),i=e=>a.has("string"===typeof e?e:e.name);for(const o of e){for(const e of o.children.filter(i)){if(!n.has(e.name))throw new BC(`Child ${e.name} of node ${o.name} is unreachable.`);if(n.get(o.name)>n.get(e.name))throw new BC(`Node ${o.name} is scheduled to run after its child ${e.name}.`)}if(!r(o))for(const e of o.inputs){if(!n.has(e.name))throw new BC(`Input ${e.name} of node ${o.name} is unreachable.`);if(n.get(e.name)>n.get(o.name))throw new BC(`Node ${o.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}class BC extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const WC=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),VC=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),UC=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function GC(e){return WC.has(e.op)}function HC(e){return VC.has(e.op)}function jC(e){return UC.has(e.op)}class qC{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new qC(e.functions[t],this)}))}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+s.join(this.SEPARATOR)}compile(e,t){const n=zC(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}const i=PC(this.graph,n),o=function(e){const t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,s=e.map(((e,t)=>GC(e)?n:t)),r=e=>{const n=s[t.get(e.name)];return null==n?-1:n},a=e.map(((e,t)=>e.children.map(r).reduce(((e,t)=>Math.max(e,t)),s[t]))),i=new Map;for(let o=0;o<e.length;++o){const t=a[o];if(t===n)continue;const s=e[o],r=e[t];i.has(r.name)||i.set(r.name,[]),i.get(r.name).push(s)}return i}(i);return{orderedNodes:i,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return yi(t),t}cloneTensorList(e){if(!e)return null;const t=e.map((e=>this.cloneAndKeepTensor(e)));return t}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((e=>{let[t,n]=e;return[t,this.cloneTensorList(n)]})))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[VT(e)[0]])),r=t.map((e=>VT(e)[0])),a=new Set(r);let i=r.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const o=this.getCompilationKey(s,i);let l=this.compiledMap.get(o);null==l&&(l=this.compile(e,i),this.compiledMap.set(o,l));try{this.keepIntermediateTensors=Qe().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(h){this.keepIntermediateTensors=!1,console.warn(h.message)}const u={},c={};return mi((()=>{const n=new LC(this.weightMap,u,c,this.functionExecutorMap,this.parseNodeNameCache),s=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[r,a]=VT(t,n),i=[];i[a]=e[t],s[r]=i,this.keepIntermediateTensors&&(this.clonedTensorsMap[r]=this.cloneTensorList(i))}));const r=this.getFrozenTensorIds(s),{orderedNodes:i,nodeLiveUntilMap:o}=l;for(const e of i){if(s[e.name])continue;const t=MC(e,s,n,this._resourceManager);if(Xe(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,s,n,r,a,o.get(e.name))}return null==this.parent&&n.dispose(r),t.map((e=>zT(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){if(!GC(t)&&!a.has(e)){for(const s of n[e])null!=s&&(i[s.id]=(i[s.id]||0)+t.children.length);for(const e of t.inputs){if(GC(e))continue;const t=PT(e.name,n,s);if(null!=t)for(const e of t){if(!e||e.kept||r.has(e.id))continue;const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,s,r,a){function i(e){return GC(e)||r.has(e.name)}if(!GC(e)&&null!=a)for(const o of a){if(i(o))continue;const e=PT(o.name,t,n);for(const t of e)!t||t.kept||s.has(t.id)||t.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=Qe().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(h){this.keepIntermediateTensors=!1,console.warn(h.message)}const a=new LC(this.weightMap,s,r,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>zT(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.values(i).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[VT(e)[0]])),i=n.map((e=>VT(e)[0])),o=new Set(i);let l=i.map((e=>this.graph.nodes[e]));0===l.length&&(l=this._outputs);const{usedNodes:u,missingInputs:c,dynamicNode:h,syncInputs:d}=zC(e,l,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=VT(t),r=[];r[s]=e[t],f[n]=r}));const m={},g=this.getFrozenTensorIds(f),y={};for(;p.length>0;){const e=this.processStack(a,p,t,f,y,g,o,m,u);await Promise.all(e)}null!=h||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=l.filter((e=>!GC(e)&&!zT(e.name,f,t))).map((e=>e.name));if(b.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${r}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&LT("isConstant",e.node,s,n)&&([c]=BT(e.node.name,n)),null==s[e.node.name]){const h=MC(e.node,s,n,this._resourceManager);c||([c]=BT(e.node.name,n));const d=n.currentContext;Xe(h)?u.push(h.then((u=>(s[c]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(u)),n.currentContext=d,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(h)),this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=BT(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!zT(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!zT(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=VT(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;ce(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&ce(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const s={};for(const r in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[r];null!=a?s[a.name]=e[r]:s[r]=e[r]}return s}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=VT(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const s=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=s?s.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=VT(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class KC{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const XC="?tfjs-format=file",YC="model.json";class JC{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l;this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new KC}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return Xe(e)?e.then((e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e))):this.loadSync(e)}loadSync(e){const t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const t=await Oi(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;const n=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(s=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=s,this.version=`${n.versions.producer}.${n.versions.minConsumer}`,this.executor=new qC(cC.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=cC.Instance.transformGraph(e.modelInitializer);this.initializer=new qC(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"===typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof wa?[e]:e).forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof wa)&&!Array.isArray(e)){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const s=n[t];null!=s.resourceId&&(e[t]=this.resourceIdToCapturedInput[s.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let s=0;return this.inputNodes.reduce(((t,n)=>{var r,a,i;const o=null===(i=null===(a=null===(r=this.signature)||void 0===r?void 0:r.inputs)||void 0===a?void 0:a[n])||void 0===i?void 0:i.resourceId;return t[n]=null!=o?this.resourceIdToCapturedInput[o]:e[s++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let s=0;s<n.length;s++){const r=t[n[s]];this.resourceIdToCapturedInput[r.resourceId]=e[s]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&gi(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function ZC(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l;if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"===typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}${YC}${XC}`}(e));const s=new JC(e,t,n);return await s.load(),s}function QC(e){if(null==e)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(e instanceof Array){const[n,s]=e;if(!n)throw new Error("modelJSON must be the first element of the array");if(!s||!(s instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in n))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in n))throw new Error("Model JSON is missing 'weightsManifest'");t=Ml(Vi(n,Hi(n.weightsManifest),s))}else if("load"in e)t=e;else{if(!("modelTopology"in e&&"weightSpecs"in e&&"weightData"in e))throw new Error("Unknown model format");t=Ml(e)}const n=new JC(t);return n.load(),n}const e$="4.22.0";function t$(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Map,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Set;if(null==e)return null;if("function"===typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(i$(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=t$(e[a],t,n,s);r[a]=i}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function n$(e){return s$(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:r$)}function s$(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Set;const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(i$(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=s$(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function r$(e){return null===e?null:i$(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function a$(e,t){const n=new Map;t$(e,t,n);for(const s of Array.from(n.keys())){const e=n.get(s);if(Xe(e)){const t=await e;n.set(s,t)}}return t$(e,t,n)}function i$(e){let t=!1;if(Qe().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:s}=n(551);t=e instanceof s}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"===typeof e&&!(e instanceof wa)&&!(e instanceof Promise)&&!t)}function o$(e){return function(e,t){return t$(e,t)}(e,l$)}function l$(e){return e instanceof wa?{value:e.clone(),recurse:!1}:i$(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class u${constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class c$ extends u${constructor(){super(c$.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let s=0;s<n;s++)t[s]=this.get(this.wrap(this.begin+s));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function h$(e){return new m$(e)}function d$(e){return new g$(e)}function p$(e,t){return new C$(e,t)}c$.INITIAL_CAPACITY=32;class f${async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new I$(this,e)}filter(e){return new v$(this,e)}map(e){return new k$(this,e)}mapAsync(e){return new N$(this,e)}serialMapAsync(e){return new N$(this,e).serial()}flatmap(e){return new T$(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e){return new w$(this,e,!(arguments.length>1&&void 0!==arguments[1])||arguments[1])}columnMajorBatch(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r$;return this.rowMajorBatch(e,t).map((e=>n$(e,n)))}concatenate(e,t){return new C$(h$([this,e]),t)}take(e){return e<0||null==e?this:new x$(this,e)}skip(e){return e<0||null==e?this:new b$(this,e)}prefetch(e){return new A$(this,e)}shuffle(e,t){return new R$(this,e,t)}serial(){return new y$(this)}}class m$ extends f${constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:o$(e),done:!1}}}class g$ extends f${constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class y$ extends f${constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class b$ extends f${constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;gi(e.value)}return this.upstream.next()}}class x$ extends f${constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class w$ extends f${constructor(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class v$ extends f${constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;gi(e.value)}}}class k$ extends f${constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ma(e.value),n=this.transform(e.value),s=Ma(n);for(const r of t)Oa(r,s)||r.dispose();return{value:n,done:!1}}}class I$ extends f${constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class N$ extends f${constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ma(e.value),n=await this.transform(e.value),s=Ma(n);for(const r of t)Oa(r,s)||r.dispose();return{value:n,done:!1}}}class S$ extends f${constructor(){super(),this.outputQueue=new c$,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class T$ extends S${constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Ma(e.value),n=this.transform(e.value),s=Ma(n);this.outputQueue.pushAll(n);for(const r of t)Oa(r,s)||r.dispose();return!0}}class C$ extends f${constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var $$;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}($$||($$={}));class E$ extends f${constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:$$.FAIL;super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await a$(this.iterators,(function(e){if(e instanceof f$){return{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}}return{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case $$.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case $$.SHORTEST:return{value:null,done:!0};case $$.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class A$ extends f${constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new u$(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class R$ extends A${constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Td.alea(n||Qr().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class F${constructor(){this.size=null}batch(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=this;let s;return ce(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),D$((async()=>(await n.iterator()).columnMajorBatch(e,t,M$)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,D$((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,D$((async()=>(await t.iterator()).filter((t=>mi((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return D$((async()=>(await t.iterator()).map((t=>mi((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return D$((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return D$((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,D$((async()=>p$(d$((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,D$((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=Td.alea(t||Qr().toString());return D$((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,D$((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function D$(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return new class extends F${constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function _$(e){return D$((async()=>h$(e)),e.length)}function O$(e){if(!i$(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return D$((async()=>function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:$$.FAIL;return new E$(e,t)}(await a$(e,(e=>{if(e instanceof F$)return{value:e.iterator(),recurse:!1};if(i$(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),$$.SHORTEST)),t)}function M$(e){if(null===e)return null;if(function(e){return null==e||null===(t=e)||"object"!==typeof t&&"function"!==typeof t||Array.isArray(e)||"object"===typeof e&&e instanceof wa||sa(e);var t}(e[0])){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof wa?cp(e):ri(e)}(e),recurse:!1}}return{value:null,recurse:!0}}F$.MAX_BUFFER_SIZE=1e4;class L$ extends F${constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const z$='"',P$=Symbol("out"),B$=Symbol("field"),W$=Symbol("quote"),V$=Symbol("quoteafterquote"),U$=Symbol("quoteinquote");class G$ extends F${async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&ce(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(ce(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const s of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(s))throw new Error('The key "'+s+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new L$(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(ce(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":default:l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o)}else l=e}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=[];let s=0;const r=e.length;let a=P$;for(let i=0;i<r;i++)switch(a){case P$:switch(e.charAt(i)){case z$:s=i+1,a=W$;break;case this.delimiter:if(s=i+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=P$;break;default:a=B$,s=i}break;case B$:if(e.charAt(i)===this.delimiter)n.push(e.substring(s,i)),a=P$,s=i+1;break;case W$:if(e.charAt(i)===z$)a=V$;break;case V$:switch(e.charAt(i)){case this.delimiter:n.push(e.substring(s,i-1)),a=P$,s=i+1;break;case z$:a=W$;break;default:a=U$}break;case U$:if(e.charAt(i)===z$)a=W$}if(a===V$?n.push(e.substring(s,r-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class H$ extends f${constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!Qe().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new H$(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(n){throw new Error(`Error thrown while initializing video stream: ${n.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((s=>{const r=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,s)=>n.set(e,s*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(pe(t));return n.set(e,n.length-e.length),ri(n,t)}}class j$ extends f${constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=fp([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,r=n+e,a=t+s;this.cropBox=mp([s,n,a,r],[1,4])}else this.cropBox=mp([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Qe().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new j$(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&ce("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=tu(this.webcamVideoElement)}catch(t){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(t){throw new Error(`Error thrown cropping the video: ${t.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return mi((()=>{const t=kh(Fo(e,"float32"),0);let n;n=Kf.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return fc(n,s.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class q${}class K$ extends f${split(e){return new X$(this,e)}}class X$ extends K${constructor(e,t){super(),this.upstream=e,this.impl=new Y$(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Y$ extends S${constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const n of t.slice(0,-1))this.outputQueue.push(n);return this.carryover=t[t.length-1],!0}}class J$ extends f${decodeUTF8(){return new Z$(this)}}class Z$ extends K${constructor(e){super(),this.upstream=e,this.impl=new Q$(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Q$ extends S${constructor(e){if(super(),this.upstream=e,Qe().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(4530);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=Qe().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class eE extends J${constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),this.file=e,this.options=t,ce(e instanceof Uint8Array||!!Qe().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n}));return{value:await e,done:!1}}}const tE=e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity});function nE(e){return"string"===typeof e&&"file://"===e.slice(0,7)}class sE extends q${constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),this.input=e,this.options=t}async iterator(){if(nE(this.input)&&Qe().get("IS_NODE")){const e=n(8108);this.input=e.readFileSync(this.input.slice(7))}return new eE(this.input,this.options)}}class rE extends q${constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),this.url=e,this.fileOptions=t}async iterator(){return nE(this.url)?new sE(this.url,this.fileOptions).iterator():async function(e){let t,n,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0;"string"===typeof e?t=e:(t=e.url,n=tE(e));const a=await(r||ea)(t,n);if(a.ok){const e=new Uint8Array(await a.arrayBuffer());return new eE(e,s)}throw new Error(a.statusText)}(this.url,this.fileOptions)}}function aE(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new G$(new rE(e),t)}function iE(e){const t=d$(e);return D$((async()=>t))}function oE(e){return D$((async()=>{const t=await e();return d$((()=>t.next()))}))}async function lE(e,t){return j$.create(e,t)}async function uE(e){return H$.create(e)}const cE="4.22.0";function hE(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ce("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const dE=Cp;class pE extends ee{nextDataId(){return pE.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Q(this,di())}write(e,t,n){this.firstUse&&(this.firstUse=!1,Qe().get("IS_NODE")&&Ir("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&De(n[0])){const r=n.map((e=>ta(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return Sm(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return Ve(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>na(e)));return Ro(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ro(e.shape,e.dtype,t)}makeOutput(e,t,n){return di().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Qr();e();return{kernelMs:Qr()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){hE([e],"where");const t=this.readSync(e.dataId);return dE(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function fE(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}pE.nextDataId=0;const mE={kernelName:rt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;hE(t,"abs");let s=new Float32Array(pe(t.shape));return s=fE(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}};function gE(e){return(t,n,s,r,a)=>{const i=dl(t,n),o=i.length,l=Pe(i),u=Te(a,pe(i)),c=t.length,h=n.length,d=Pe(t),p=Pe(n),f=cl(t,i),m=cl(n,i);if(f.length+m.length===0)for(let g=0;g<u.length;++g)u[g]=e(s[g%s.length],r[g%r.length]);else for(let g=0;g<u.length;++g){const t=Ke(g,o,l),n=t.slice(-c);f.forEach((e=>n[e]=0));const a=qe(n,c,d),i=t.slice(-h);m.forEach((e=>i[e]=0));const y=qe(i,h,p);u[g]=e(s[a],r[y])}return[u,i]}}function yE(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const bE={kernelName:Rt,backendName:"cpu",kernelFunc:yE};function xE(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"float32";if("complex64"===n){return yE({inputs:{real:xE(e,t,"float32"),imag:xE(e,t,"float32")},backend:e})}const s=Ge(pe(t),n);return e.makeTensorInfo(t,n,s)}function wE(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const vE={kernelName:vn,backendName:"cpu",kernelFunc:wE};function kE(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const IE={kernelName:xs,backendName:"cpu",kernelFunc:kE};function NE(e,t,n,s){if("int32"===s){return[t,"int32",Int32Array.from(e)]}if("bool"===s){const s=Zr([0],n),[r,a]=gE(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function SE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return wE({inputs:{x:r},backend:n});const e=xE(n,r.shape,r.dtype),t=SE({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=yE({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=kE({inputs:{input:r},backend:n}),t=SE({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Ae(r.dtype,a)){const e=wE({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const i=n.data.get(r.dataId).values,[o,l,u]=NE(i,r.shape,r.dtype,a);return n.makeTensorInfo(o,l,u)}const TE={kernelName:$t,backendName:"cpu",kernelFunc:SE};function CE(e,t,n,s){return null==n?n=>{let{inputs:r,backend:a}=n;const{a:i,b:o}=r,l=a;hE([i,o],e);const u=l.data.get(i.dataId).values,c=l.data.get(o.dataId).values,h="string"===i.dtype?ag(u):u,d="string"===i.dtype?ag(c):c,p=s||i.dtype,[f,m]=t(i.shape,o.shape,h,d,p);return l.makeTensorInfo(m,p,f)}:e=>{let{inputs:r,backend:a}=e;const{a:i,b:o}=r,l=a;if("complex64"===i.dtype||"complex64"===o.dtype){const e=SE({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),t=l.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,a=l.data.get(s.dataId).values,u=l.data.get(r.dataId).values,c=SE({inputs:{x:o},backend:l,attrs:{dtype:"complex64"}}),h=l.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=l.data.get(d.dataId).values,m=l.data.get(p.dataId).values,[g,y,b]=n(i.shape,o.shape,a,u,f,m),x=l.makeTensorInfo(b,"float32",g),w=l.makeTensorInfo(b,"float32",y),v=yE({inputs:{real:x,imag:w},backend:l});return l.disposeIntermediateTensorInfo(e),l.disposeIntermediateTensorInfo(c),l.disposeIntermediateTensorInfo(x),l.disposeIntermediateTensorInfo(w),v}{const e=l.data.get(i.dataId).values,n=l.data.get(o.dataId).values,r=s||i.dtype,[a,u]=t(i.shape,o.shape,e,n,r);return l.makeTensorInfo(u,r,a)}}}function $E(e){return(t,n,s,r,a,i)=>{const o=dl(t,n),l=pe(o),u=o.length,c=Pe(o),h=Te("float32",l),d=Te("float32",l),p=cl(t,o),f=cl(n,o),m=Sm(s,r),g=Sm(a,i),y=t.length,b=Pe(t),x=n.length,w=Pe(n);if(p.length+f.length===0)for(let v=0;v<h.length;v++){const t=v%m.length,n=v%g.length,s=e(m[2*t],m[2*t+1],g[2*n],g[2*n+1]);h[v]=s.real,d[v]=s.imag}else for(let v=0;v<h.length;v++){const t=Ke(v,u,c),n=t.slice(-y);p.forEach((e=>n[e]=0));const s=qe(n,y,b),r=t.slice(-x);f.forEach((e=>r[e]=0));const a=qe(r,x,w),i=e(m[2*s],m[2*s+1],g[2*a],g[2*a+1]);h[v]=i.real,d[v]=i.imag}return[h,d,o]}}const EE=gE(((e,t)=>e+t)),AE=$E(((e,t,n,s)=>({real:e+n,imag:t+s}))),RE=CE(ot,EE,AE),FE={kernelName:ot,backendName:"cpu",kernelFunc:RE};function DE(e,t,n,s,r){const a=pe(s),i=Ge(r,n);for(let o=0;o<e.length;o++){const n=e[o];if(n<0)throw new Error("Input x must be non-negative!");n>=r||(i[n]+=a>0?t[o]:1)}return i}function _E(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const r=e.shape[0],a=e.shape[1],i=Ro([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const OE=gE(((e,t)=>e&t)),ME=CE(St,OE),LE={kernelName:St,backendName:"cpu",kernelFunc:ME};function zE(e){return(t,n,s)=>{const r=Ce(n,t.length);for(let a=0;a<t.length;++a)r[a]=e(t[a],s);return r}}function PE(e,t,n){return BE(e,zE(t),n)}function BE(e,t,n){return s=>{let{inputs:r,attrs:a,backend:i}=s;const{x:o}=r;hE(o,e);const l=i,u=l.data.get(o.dataId).values;let c;if("string"===o.dtype){if(!Array.isArray(u))throw new Error("String tensor's value was not an instance of Array");c=ag(u)}else c=u;const h=n||o.dtype,d=t(c,h,a);return l.makeTensorInfo(o.shape,h,d)}}const WE=zE((e=>Math.ceil(e))),VE=BE(Et,WE),UE={kernelName:Et,backendName:"cpu",kernelFunc:VE};function GE(e,t,n,s){const r=Ce(n,pe(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=pe(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?ag(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}const HE=gE(((e,t)=>e===t?1:0)),jE=CE(on,HE,null,"bool"),qE={kernelName:on,backendName:"cpu",kernelFunc:jE},KE=zE((e=>Math.exp(e))),XE=BE(ln,KE,"float32"),YE={kernelName:ln,backendName:"cpu",kernelFunc:XE},JE=zE((e=>Math.expm1(e))),ZE=BE(cn,JE),QE={kernelName:cn,backendName:"cpu",kernelFunc:ZE},eA=zE((e=>Math.floor(e))),tA=BE(fn,eA),nA={kernelName:fn,backendName:"cpu",kernelFunc:tA},sA=gE(((e,t)=>Math.floor(e/t))),rA=CE(mn,sA,null,"int32"),aA={kernelName:mn,backendName:"cpu",kernelFunc:rA};function iA(e,t,n,s,r,a,i,o,l){const u=Ro([s,a],n);for(let c=0;c<s;c++){const n=[];let s=0;for(let t=0;t<r;t++){const a=e[c*r+t];s+=a*i[t],n.push(a)}if(s<0||s>=l/a)throw new Error(`Invalid indices: ${n} does not index into ${o}`);for(let e=0;e<a;e++)u.values[c*a+e]=t.get(...t.indexToLoc(s*a+e))}return u}function oA(e,t,n){const s=Ro(n,e.dtype);for(let r=0;r<s.size;++r){const n=s.indexToLoc(r).slice(),a=n[0],i=n[2],o=t.locToIndex([a,i]);n[2]=t.values[o];const l=e.locToIndex(n);0<=l&&l<e.values.length&&(s.values[r]=e.values[l])}return s}const lA=gE(((e,t)=>e>t?1:0)),uA=CE(xn,lA,null,"bool"),cA={kernelName:xn,backendName:"cpu",kernelFunc:uA},hA=gE(((e,t)=>e>=t?1:0)),dA=CE(wn,hA,null,"bool"),pA={kernelName:wn,backendName:"cpu",kernelFunc:dA},fA=gE(((e,t)=>e<t?1:0)),mA=CE($n,fA,null,"bool"),gA={kernelName:$n,backendName:"cpu",kernelFunc:mA},yA=gE(((e,t)=>e<=t?1:0)),bA=CE(En,yA,null,"bool"),xA={kernelName:En,backendName:"cpu",kernelFunc:bA};function wA(e,t,n){const s=(t-e)/(n-1),r=Ge(n,"float32");r[0]=e;for(let a=1;a<r.length;a++)r[a]=r[a-1]+s;return r}const vA=zE((e=>Math.log(e))),kA=BE(Rn,vA),IA={kernelName:Rn,backendName:"cpu",kernelFunc:kA};function NA(e,t,n,s){const r=Te(s,pe(n));for(let a=0;a<r.length;++a){const n=a*t;let s=e[n];for(let r=0;r<t;++r){const t=e[n+r];(Number.isNaN(t)||t>s)&&(s=t)}r[a]=s}return r}const SA=gE(((e,t)=>Math.max(e,t))),TA=CE(Un,SA),CA={kernelName:Un,backendName:"cpu",kernelFunc:TA},$A=gE(((e,t)=>Math.min(e,t))),EA=CE(Jn,$A),AA={kernelName:Jn,backendName:"cpu",kernelFunc:EA},RA=gE(((e,t)=>e*t)),FA=$E(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),DA=CE(ts,RA,FA),_A={kernelName:ts,backendName:"cpu",kernelFunc:DA};function OA(e,t,n){const s=Jr(-1,n);return RA([],t,s,e,n)}const MA={kernelName:ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;hE(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=OA(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},LA=gE(((e,t)=>e!==t?1:0)),zA=CE(ss,LA,null,"bool"),PA={kernelName:ss,backendName:"cpu",kernelFunc:zA};function BA(e,t,n,s,r){const a=t.length,i=pe(t),o=Pe(t),l=Pe(r),u=Te(n,pe(r));for(let c=0;c<i;++c){const t=Ke(c,a,o),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[s[e]];u[qe(n,a,l)]=e[c]}return u}function WA(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;hE(r,"transpose");const i=r.shape.length,o=new Array(i);for(let u=0;u<o.length;u++)o[u]=r.shape[a[u]];const l=BA(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const VA={kernelName:hr,backendName:"cpu",kernelFunc:WA};function UA(e,t,n,s){const[r,a]=uh(e,s),i=Ea(t,"int32"),o=Ge(pe(r),i),l=pe(a);for(let u=0;u<o.length;++u){const e=u*l;let t=1;for(let s=0;s<l;++s)t*=n[e+s];o[u]=t}return{outVals:o,outShape:r,outDtype:i}}const GA={kernelName:fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hE(r,"prod");const o=r.shape.length,l=Ne(a,r.shape),u=dh(l,o);let c=l,h=r;const d=[];null!=u&&(h=WA({inputs:{x:r},backend:n,attrs:{perm:u}}),d.push(h),c=fh(c.length,o));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=UA(h.shape,h.dtype,p,c);let y=m;return i&&(y=ch(m,l)),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function HA(e,t,n,s){const r=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const e=t[u+1];for(let t=1;t<l+1;++t)o[u].push(t*e)}for(let u=0;u<e.length;++u){let s=e[u],i=e[u]+1;for(let e=0;e<n.length;++e){const r=n[e],a=e+t.length-1;if(a>=0){const e=o[a],t=e[e.length-1]-r[s];for(let n=s;n<i;++n)o[a].push(r[n+1]+t)}s=r[s],i=r[i]}i!==s&&(r.push([s,i]),a+=i-s)}return{outSplits:o,valueSlices:r,numValues:a}}function jA(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function qA(e,t,n,s,r){const a=t.slice();a[0]=r;const i=Ce(n,pe(a)),o=e.length;return function(e,t,n,s,r,a){const i=jA(t,2)[1],o=jA(a,2)[1];let l=0;for(const u of n)for(let t=u[0];t<u[1];++t){for(let n=0;n<s;++n)r[l*o+n]=e[t*i+n];++l}}(e,t,s,0===o?0:o/t[0],i,a),[i,a]}function KA(e,t,n,s,r,a,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const r=Ke(s,t.length,Pe(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}}))}(a,i,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=HA(a,i,e,l),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=Ce("int32",e[n].length);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(u),p=qA(n,s,r,c,h);return[d,p[0],p[1]]}const XA=2147483647;function YA(e,t,n,s,r,a,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const o=0===t.length,l=0===r.length,u=0===i.length,c=[];o||c.push(t[0]),l||c.push(r[0]),u||c.push(i[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=Ce("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const t=o?e[0]:e[m],n=l?s[0]:s[m],r=u?a[0]:a[m];if(0===r)throw new Error("Requires delta != 0");let i;if(r>0&&n<t||r<0&&n>t)i=0;else if(i=Math.ceil(Math.abs((n-t)/r)),i>XA)throw new Error(`Requires ((limit - start) / delta) <= ${XA}`);d[m+1]=d[m]+i}const p=Ce(n,d[h]);let f=0;for(let m=0;m<h;++m){const t=d[m+1]-d[m];let n=o?e[0]:e[m];const s=u?a[0]:a[m];for(let e=0;e<t;++e)p[f++]=n,n+=s}return[d,p]}var JA=rm;class ZA{constructor(e,t,n,s,r,a,i,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=im(u),this.raggedRank=om(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===JA.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===JA.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case JA.VALUE_ROWIDS:return ZA.getMaxWidthValueRowID(t);case JA.ROW_SPLITS:return ZA.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${JA[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return eR(e,n)}calculateOutputSize(e){const t=this.valuesShape;lm(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=am(this.raggedRank,n,t);s[0]<0&&(s[0]=e);for(let r=1;r<=this.raggedRank;++r)s[r]<0&&(s[r]=this.getMaxWidth(r));return s}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),r=[];let a=0;for(let i=0;i<s;++i,a+=t)r.push(a);for(let i=s;i<e;++i)r.push(-1);return ce(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let i=0;i<r-1;++i){const r=e[i+1]-e[i];let o=Math.min(s,r),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)a.push(l),l+=n;for(let e=0;e<r-o;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];a.push(l);for(let u=1;u<r;++u){const r=e[u];if(r===o)l>=0&&(++i,i<s?l+=n:l=-1);else{if(i=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case JA.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case JA.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${JA[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case JA.FIRST_DIM_SIZE:return e[0];case JA.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case JA.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${JA[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let a=n.length-2;a>=0;--a)n[a]=n[a+1]*t[a+1];const s=eR(t,!1),r=Ce(this.valuesDType,pe(s));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){a=this.calculateOutputIndex(e-1,a,n[e],t[e])}this.setOutput(this.raggedRank,a,r,s)}return[s,r]}setOutput(e,t,n,s){if(0===n.length)return;const r=this.values,a=n;let i=s.slice();i=i.slice(e+1);const o=pe(i),l=t.length;let u=this.defaultValue;if(u.length!==o&&1!==u.length){const e=this.defaultValueShape;mi((()=>{const t=fc(u,e),n=Ac(t,i);u=n.dataSync()}))}let c=0,h=0,d=0;for(let p=0;p<=l;++p){let e=p<l?t[p]:-1;if(e!==d){if(h<d){const e=r.subarray(c*o);QA(a.subarray(h*o),e,(d-h)*o)}if(p>=l){const t=n.length;e=Math.floor(t/o)}if(e>d)if(1===this.defaultValue.length)a.subarray(d*o,e*o).fill(this.defaultValue[0]),d=e;else for(;e>d;){QA(a.slice(d*o),u,o),++d}e<0?(c=p+1,h=d):(c=p,h=d,d=h+1)}else++d}}}function QA(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function eR(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function tR(e,t,n,s,r,a,i,o,l,u){return new ZA(e,t,n,s,r,a,i,o,l,u).compute()}function nR(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return Ge(0,s);const r=Ge(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let a=1;a<r.length;a++)r[a]=r[a-1]+n;return r}const sR=zE((e=>1/Math.sqrt(e))),rR=BE(As,sR),aR={kernelName:As,backendName:"cpu",kernelFunc:rR};function iR(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,d=t.values;if(0===s)return Ro(n,t.dtype);const p=l instanceof ga?l:Ro(c,t.dtype);"string"===typeof l||"number"===typeof l?p.values.fill(l):"boolean"===typeof l&&p.values.fill(+l);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=s/r)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<r;n++)u?p.values[a*r+n]+=d[f*r+n]:p.values[a*r+n]=0===t.rank?d[0]:d[f*r+n]}return p}const oR=zE((e=>1/(1+Math.exp(-e)))),lR=PE(Bs,(e=>1/(1+Math.exp(-e)))),uR={kernelName:Bs,backendName:"cpu",kernelFunc:lR};function cR(e,t,n,s,r){const a=wu(s,t,n),i=pe(n),o=Pe(s);if(a){const n=vu(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=Ro(s,r,"string"===r?ag(e):e),u=Ro(n,r);for(let c=0;c<u.size;++c){const e=u.indexToLoc(c),n=e.map(((e,n)=>e+t[n]));u.set(l.get(...n),...e)}return"string"===r?ig(u.values):u.values}function hR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;hE(r,"slice");const[o,l]=ku(r,a,i);lu(r,o,l);const u=cR(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const dR={kernelName:Ms,backendName:"cpu",kernelFunc:hR};function pR(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(Gm(o));return[Ce(n,0),[0,h],Ce(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let g=0;g<o;++g){const t=e[g*h];if(t<0)throw new Error(Hm(g,t));if(t>=l)throw new Error(jm(g,t,l));++f[t],d=d&&t>=p,p=t}let m=!0;for(let g=0;g<l;++g){const e=0===f[g];u[g]=e,m=m&&!e,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(m&&d){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=Ce(n,t*h),d=Ce(r,t),p=new Array(l).fill(0);for(let n=0;n<o;++n){const t=e[n*h],r=p[t],i=(0===t?0:f[t-1])+r;p[t]++;for(let s=0;s<h;++s)a[i*h+s]=e[n*h+s];d[i]=s[n],c[n]=i}for(let e=0;e<l;++e){if(0===p[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;d[t]=i}}return[a,[t,h],d,u,c]}}function fR(e,t,n,s,r){const a=pe(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let m=0;m<o;++m){const e=r[m];if(-1===e){if(-1!==c)throw new Error(qm(c,m));c=m,l.push(1)}else{if(e<0)throw new Error(Km(m,e));u*=e,l.push(e)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Ym(s,l));l[c]=e}if(pe(l)!==a)throw new Error(Jm(s,l));const h=s.length,d=[];if(h>0){d[h-1]=1;for(let e=h-2;e>=0;--e)d[e]=d[e+1]*s[e+1]}const p=[];if(o>0){p[o-1]=1;for(let e=o-2;e>=0;--e)p[e]=p[e+1]*l[e+1]}const f=Ce(n,i*o);for(let m=0;m<i;++m){let t=0;for(let n=0;n<h;++n)t+=e[m*h+n]*d[n];for(let e=0;e<o;++e)f[m*o+e]=Math.trunc(t/p[e]),t%=p[e]}return[f,[i,o],l]}function mR(e,t,n,s,r){let a=arguments.length>5&&void 0!==arguments[5]&&arguments[5],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0;const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=Ce(n,h.reduce(((e,t)=>e*t),1));if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,m=0,g=r[p];for(;;){let t=0;if(f<o){if(t=r[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(eg(g,c));g>m&&d.fill(i,m*u,g*u);for(let n=p;n<f;++n){const t=s[n];if(t<0||t>=l[0])throw new Error(tg(n,s[n],l[0]));for(let n=0;n<u;n++)d[g*u+n]+=e[t*u+n]}if(a)for(let e=0;e<u;e++)d[g*u+e]/=f-p;if(p=f,++f,m=g+1,g=t,f>o)break}return m<c&&d.fill(i,m*u,c*u),[d,h]}const gR=zE((e=>Math.sqrt(e))),yR=PE(Vs,(e=>Math.sqrt(e))),bR={kernelName:Vs,backendName:"cpu",kernelFunc:yR},xR=gE(((e,t)=>{const n=e-t;return n*n})),wR=CE(Zs,xR),vR={kernelName:Zs,backendName:"cpu",kernelFunc:wR},kR=zE(((e,t)=>{const{pattern:n,replaceGlobal:s,rewrite:r}=t;return e.replace(new RegExp(n,s?"g":""),r)})),IR=BE(er,kR),NR={kernelName:er,backendName:"cpu",kernelFunc:IR};function SR(e,t,n,s){const r=Ro(e,t.dtype);for(let a=0;a<r.size;a++){const e=r.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+s[t];r.set(t.get(...i),...e)}return r}class TR{constructor(e,t,n,s,r,a){this.separator=ta(e),this.nGramWidths=t,this.leftPad=ta(n),this.rightPad=ta(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length;d+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(d);const p=n[s+i];let f=0;const m=e=>e.forEach((e=>p[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=Ce("int32",s);if(0===n||0===s){const e=new Array(n);for(let t=0;t<=r;++t)a[t]=0;return[e,a]}a[0]=0;for(let o=1;o<=r;++o){const e=t[o]-t[o-1];let n=0;this.nGramWidths.forEach((t=>{n+=this.getNumNGrams(e,t)})),this.preserveShort&&e>0&&0===n&&(n=1),a[o]=a[o-1]+n}const i=new Array(a[r]);for(let o=0;o<r;++o){const n=t[o];let s=a[o];if(this.nGramWidths.forEach((r=>{const a=t[o+1]-t[o],l=this.getNumNGrams(a,r);this.createNGrams(e,n,i,s,l,r),s+=l})),this.preserveShort&&s===a[o]){const r=t[o+1]-t[o];if(0===r)continue;const a=r+2*this.padWidth,l=1;this.createNGrams(e,n,i,s,l,a)}}return[i,a]}}function CR(e,t,n,s,r,a,i,o){return new TR(n,s,r,a,i,o).compute(e,t)}function $R(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function ER(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let d=0;d<s;++d){const s=r.length;$R(e[d],t,n,r);const l=r.length-s;o[d]=l,a+=l,i=Math.max(i,l)}const l=Ce("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let d=0;d<s;++d)for(let e=0;e<o[d];++e)l[2*h]=d,l[2*h+1]=e,u[h]=r[h],++h;return[l,u,c]}function AR(e,t){const n=Ce("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Yr(e[s]).modulo(t).getLowBitsUnsigned();return n}const RR=gE(((e,t)=>e-t)),FR=$E(((e,t,n,s)=>({real:e-n,imag:t-s}))),DR=CE(ar,RR,FR),_R={kernelName:ar,backendName:"cpu",kernelFunc:DR};function OR(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const s=Ro(n,e.dtype);for(let r=0;r<s.values.length;++r){const t=s.indexToLoc(r),n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=t[s]%e.shape[s];const a=e.locToIndex(n);s.values[r]=e.values[a]}return s}const MR=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function LR(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e.length-1;for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);LR(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(ie(e,n,t),MR(e[s],r)>0&&ie(e,n,s);a<i;){for(ie(e,a,i),a++,i--;MR(e[a],r)<0;)a+=1;for(;MR(e[i],r)>0;)i-=1}0===MR(e[n],r)?ie(e,n,i):(i+=1,ie(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function zR(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=Te(n,i*s),u=Te("int32",i*s);for(let h=0;h<i;h++){const t=h*o,n=e.subarray(t,t+o);let a=new Array(n.length);n.forEach(((e,t)=>a[t]={value:e,index:t})),s<a.length&&(LR(a,s),a=a.slice(0,s)),r&&a.sort(MR);const i=h*s,c=l.subarray(i,i+s),d=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,d[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[Ro(c,n,l),Ro(c,"int32",u)]}function PR(e,t,n,s){const r=Ne(t,n)[0],a=[1,n[0],1];for(let f=0;f<r;f++)a[0]*=n[f];a[1]=n[r];for(let f=r+1;f<n.length;f++)a[2]*=n[f];const i=new Map,o=new Int32Array(n[r]),l=new ga(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let f=0;f<n[r];f++){let t;if(c)t=e[f].toString();else{const e=[];for(let t=0;t<a[0];t++)for(let n=0;n<a[2];n++)e.push(l.get(t,f,n));t=e.join(",")}const n=i.get(t);if(null!=n)o[f]=n;else{const e=i.size;i.set(t,e),o[f]=e,u.push(f)}}const h=a.slice();h[1]=i.size;const d=new ga(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)d.set(l.get(n,e,s),n,t,s)}));const p=n.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:o}}const BR="4.22.0";Si("cpu",(()=>new pE),1);const WR=PE(sn,(e=>e>=0?e:Math.exp(e)-1)),VR={kernelName:sn,backendName:"cpu",kernelFunc:WR};function UR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;hE([r],"leakyRelu");const i=pe(r.shape),o=n.data.get(r.dataId).values,l=Te("float32",i);for(let u=0;u<o.length;u++)l[u]=o[u]<0?a*o[u]:o[u];return n.makeTensorInfo(r.shape,"float32",l)}const GR={kernelName:Cn,backendName:"cpu",kernelFunc:UR},HR=gE(((e,t)=>e<0?t*e:e));function jR(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;hE([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=HR(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const qR={kernelName:ps,backendName:"cpu",kernelFunc:jR},KR=PE(vs,(e=>Math.max(0,e))),XR={kernelName:vs,backendName:"cpu",kernelFunc:KR},YR=PE(Cs,(e=>Math.min(Math.max(0,e),6))),JR={kernelName:Cs,backendName:"cpu",kernelFunc:YR};function ZR(e,t,n,s,r){if("linear"===n)return wE({inputs:{x:t},backend:e});if("relu"===n)return KR({inputs:{x:t},backend:e});if("elu"===n)return WR({inputs:{x:t},backend:e});if("relu6"===n)return YR({inputs:{x:t},backend:e});if("prelu"===n)return jR({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return UR({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return lR({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function QR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=pe(r.shape),o=Ie(a,i),l=pe(o);ce(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const eF={kernelName:ks,backendName:"cpu",kernelFunc:QR};function tF(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;hE([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],d=i?r.shape[l-1]:r.shape[l-2],p=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=pe(f),y=pe(m),b=dl(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([d,p]);ce(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,p,h]:[y,h,p],w=QR({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,d]:[g,d,c]}}),v=QR({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],N=o?v.shape[1]:v.shape[2],S=Math.max(g,y),T=n.data.get(w.dataId).values,C=n.data.get(v.dataId).values,$=Pe(w.shape),E=Pe(v.shape),[A,R,F]=i?[$[0],1,$[1]]:[$[0],$[1],1],[D,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=Ro([S,I,N],w.dtype),z=L.values,P=n.blockSize;for(let B=0;B<S;B++){const e=B%g,t=B%y;for(let n=0;n<I;n+=P){const s=Math.min(n+P,I);for(let r=0;r<N;r+=P){const a=Math.min(r+P,N);for(let i=0;i<k;i+=P){const o=Math.min(i+P,k);for(let l=n;l<s;l++)for(let n=r;n<a;n++){let s=0;for(let r=i;r<o;r++){s+=T[e*A+l*R+r*F]*C[r*D+n*_+t*O]}z[B*M+(l*N+n)]+=s}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const nF={kernelName:kt,backendName:"cpu",kernelFunc:tF};const sF={kernelName:wr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const m=[];d=tF({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(p=RE({inputs:{a:d,b:i},backend:n}),m.push(d),d=p),c&&(f=ZR(n,d,c,o,h),m.push(d),d=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return d}},rF=PE(at,(e=>Math.acos(e))),aF={kernelName:at,backendName:"cpu",kernelFunc:rF},iF=PE(it,(e=>Math.acosh(e))),oF={kernelName:it,backendName:"cpu",kernelFunc:iF};const lF={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;hE(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=Ro(s[0].shape,s[0].dtype),i=a.values;for(let o=0;o<s.length;o++){const e=r[o];for(let t=0;t<i.length;t++)i[t]+=e[t]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};const uF={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hE(r,"all");const o=Ne(a,r.shape);let l=o;const u=dh(l,r.shape.length);let c=r;null!=u&&(c=WA({inputs:{x:r},backend:n,attrs:{perm:u}}),l=fh(l.length,r.shape.length)),hh("all",l,c.shape.length);const[h,d]=uh(c.shape,l),p=pe(d),f=Ge(pe(h),c.dtype),m=n.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const e=y*p;let t=m[e];for(let n=0;n<p;++n){const s=m[e+n];t=t&&s}f[y]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=QR({inputs:{x:g},backend:n,attrs:{shape:ch(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const cF={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hE(r,"any");const o=Ne(a,r.shape);let l=o;const u=dh(l,r.shape.length);let c=r;null!=u&&(c=WA({inputs:{x:r},backend:n,attrs:{perm:u}}),l=fh(l.length,r.shape.length)),hh("any",l,c.shape.length);const[h,d]=uh(c.shape,l),p=pe(d),f=Ge(pe(h),c.dtype),m=n.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const e=y*p;let t=m[e];for(let n=0;n<p;++n){const s=m[e+n];t=t||s}f[y]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=QR({inputs:{x:g},backend:n,attrs:{shape:ch(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const hF={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;hE(r,"argMax");let i=Ne(a,r.shape);const o=dh(i,r.shape.length);let l=r;const u=[];null!=o&&(l=WA({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=fh(i.length,l.shape.length)),i=[i[0]],hh("argMax",i,l.shape.length);const[c,h]=uh(l.shape,i),d=Ge(pe(c),"int32"),p=pe(h),f=n.data.get(l.dataId).values;for(let m=0;m<d.length;++m){const e=m*p;let t=f[e],n=0;for(let s=0;s<p;++s){const r=f[e+s];r>t&&(t=r,n=s)}d[m]=n}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const dF={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;hE(r,"argMin");let i=Ne(a,r.shape);const o=dh(i,r.shape.length);let l=r;const u=[];null!=o&&(l=WA({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=fh(i.length,l.shape.length)),i=[i[0]],hh("argMin",i,l.shape.length);const[c,h]=uh(l.shape,i),d=Ge(pe(c),"int32"),p=pe(h),f=n.data.get(l.dataId).values;for(let m=0;m<d.length;++m){const e=m*p;let t=f[e],n=0;for(let s=0;s<p;++s){const r=f[e+s];r<t&&(t=r,n=s)}d[m]=n}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},pF=PE(pt,(e=>Math.asin(e))),fF={kernelName:pt,backendName:"cpu",kernelFunc:pF},mF=PE(ft,(e=>Math.asinh(e))),gF={kernelName:ft,backendName:"cpu",kernelFunc:mF},yF=PE(mt,(e=>Math.atan(e))),bF={kernelName:mt,backendName:"cpu",kernelFunc:yF},xF=gE(((e,t)=>Math.atan2(e,t))),wF=CE(yt,xF),vF={kernelName:yt,backendName:"cpu",kernelFunc:wF},kF=PE(gt,(e=>Math.atanh(e))),IF={kernelName:gt,backendName:"cpu",kernelFunc:kF};function NF(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ro(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let w=0;w<r.batchSize;++w){const t=w*y,n=w*s[0];for(let m=0;m<r.inChannels;++m)for(let y=0;y<r.outHeight;++y){const w=y*i-d,v=Math.max(0,w),k=Math.min(r.inHeight,c+w),I=t+y*b;for(let t=0;t<r.outWidth;++t){const i=t*o-p,c=Math.max(0,i),d=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let t=v;t<k;t+=l){const r=n+t*s[1];for(let t=c;t<d;t+=u){const n=e[r+t*s[2]+m];"max"===a&&n>y?y=n:"avg"===a&&(b+=n,w++)}if(isNaN(y))break}g[I+t*x+m]="avg"===a?b/w:y}}}return m}function SF(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const i=Ro(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,m=Ro(t,n,e);for(let g=0;g<s.batchSize;++g)for(let e=0;e<s.inChannels;++e)for(let t=0;t<s.outHeight;++t){const n=t*o-p;let y=n;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+n);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let p=h;for(;p<0;)p+=c;const x=Math.min(s.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let t=y;t<b;t+=u){const i=t-n;for(let n=p;n<x;n+=c){const o=n-h,l=m.get(g,t,n,e);l>w&&(w=l,v=r?a?((g*s.inHeight+t)*s.inWidth+n)*s.inChannels+e:(t*s.inWidth+n)*s.inChannels+e:i*d+o)}}i.set(v,g,t,o,e)}}return i}function TF(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Ro(r.outShape,n),w=x.values,v=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let S=0;S<r.batchSize;++S){const t=S*v,n=S*s[0];for(let x=0;x<r.inChannels;++x)for(let v=0;v<r.outDepth;++v){const S=v*i-m;let T=S;for(;T<0;)T+=u;const C=Math.min(r.inDepth,d+S),$=t+v*k;for(let t=0;t<r.outHeight;++t){const i=t*o-g;let d=i;for(;d<0;)d+=c;const m=Math.min(r.inHeight,p+i),v=$+t*I;for(let t=0;t<r.outWidth;++t){const i=t*l-y;let o=i;for(;o<0;)o+=h;const p=Math.min(r.inWidth,f+i),g=v+t*N;let k=b,I=0,S=0;for(let t=T;t<C;t+=u){const r=n+t*s[1];for(let t=d;t<m;t+=c){const n=r+t*s[2];for(let t=o;t<p;t+=h){const r=e[n+t*s[3]+x];if("max"===a&&r>k?k=r:"avg"===a&&(I+=r,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+x]="avg"===a?I/Math.max(S,1):k}}}}return x}const CF={kernelName:bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;hE(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;ce(cc(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ec(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&ge(u.inShape,u.outShape))c=wE({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Pe(r.shape),s=NF(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const $F={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;hE(r,"avgPool3d");const c=tc(r.shape,a,i,1,o,l,u),h=TF(n.data.get(r.dataId).values,r.shape,r.dtype,Pe(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const EF={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;hE([r,a],"avgPool3DGrad");const c=tc(a.shape,i,o,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,k=c.effectiveFilterWidth,I=w-1-c.padInfo.front,N=k-1-c.padInfo.left,S=v-1-c.padInfo.top,T=Ro(a.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(r);for(let E=0;E<c.batchSize;++E)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=t-I,a=n-S,i=s-N;let o=0;for(let t=0;t<w;t+=y){const n=(r+t)/h;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let t=0;t<v;t+=b){const s=(a+t)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let t=0;t<k;t+=x){const r=(i+t)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;o+=$.get(E,n,s,r,e)}}}T.set(o*C,E,t,n,s,e)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const AF={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;hE([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=ec(i.shape,o,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Ro(i.shape,"float32"),k=1/(p*f),I=n.data.get(r.dataId).values,N=Ro(r.shape,"float32",I);for(let S=0;S<c.batchSize;++S)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inHeight;++t)for(let n=0;n<c.inWidth;++n){const s=t-w,r=n-x;let a=0;for(let t=0;t<y;t+=m){const n=(s+t)/h;if(!(n<0||n>=c.outHeight||Math.floor(n)!==n))for(let t=0;t<b;t+=g){const s=(r+t)/d;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;a+=N.get(S,n,s,e)}}v.set(a*k,S,t,n,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const RF={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;ce(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ce(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ce(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),hE([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,d=n.data.get(l.dataId).values,p=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=p.length,b=d.length,x=h.length;let w=0,v=0,k=0,I=0;for(let N=0;N<c.length;++N)m[N]=f[w++]+(c[N]-h[v++])*p[k++]/Math.sqrt(d[I++]+u),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};const FF={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;hE([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=dm(r.shape,a,o),u=pm(l.length,a.length),c=fm(r.shape,a,o),h=mm(i,a.length),d=gm(c,i,a.length),p=QR({inputs:{x:r},backend:n,attrs:{shape:l}}),f=WA({inputs:{x:p},backend:n,attrs:{perm:u}}),m=QR({inputs:{x:f},backend:n,attrs:{shape:c}}),g=hR({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const DF={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=DE(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};const _F={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=dl(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},OF=PE(At,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),MF={kernelName:At,backendName:"cpu",kernelFunc:OF},LF={kernelName:Ft,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(pe(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let u=0;u<o.length;u++){const e=o[u],t=l[u];s[u]=Math.hypot(e,t)}return n.makeOutput(s,t.shape,"float32")}};function zF(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const PF={kernelName:In,backendName:"cpu",kernelFunc:zF};function BF(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Ne(r,t[0].shape)[0];nm(t.map((e=>e.shape)),a);let i=sm(t.map((e=>e.shape)),a);if(0===pe(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>pe(e.shape)>0));if(1===o.length)return wE({inputs:{x:o[0]},backend:n});if("complex64"===o[0].dtype){const e=o.map((e=>kE({inputs:{input:e},backend:n}))),t=o.map((e=>zF({inputs:{input:e},backend:n}))),s=BF({inputs:e,backend:n,attrs:{axis:a}}),r=BF({inputs:t,backend:n,attrs:{axis:a}}),i=yE({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=pe(e.shape.slice(a));return QR({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=sm(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=GE(u,i,t[0].dtype,c),d=sm(o.map((e=>e.shape)),a),p=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}const WF={kernelName:Dt,backendName:"cpu",kernelFunc:BF};function VF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;hE([r,a],"conv2d");const h=dc(l),d=nc(r.shape,a.shape,i,u,o,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,x="channelsLast"===d.dataFormat,w=new ga(d.outShape,r.dtype),v=Pe(r.shape),k=Pe(a.shape),I=v[0],N=x?v[1]:v[2],S=x?v[2]:1,T=x?1:v[1],C=w.strides[0],$=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let _=0;_<d.batchSize;++_){const e=_*I,t=_*C;for(let n=0;n<d.outHeight;++n){const s=t+n*$,r=n*d.strideHeight-b;for(let t=0;t<p;++t){const n=r+t*m;if(n<0||n>=d.inHeight)continue;const a=t*k[0],i=e+n*N;for(let e=0;e<d.outWidth;++e){const t=s+e*E,n=e*d.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=d.inWidth)continue;const r=i+s*S;let o=a+e*k[1];for(let e=0;e<d.inChannels;++e){const n=R[r+e*T];for(let e=0;e<d.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=d.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const UF={kernelName:_t,backendName:"cpu",kernelFunc:VF};const GF={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;hE([r,a],"conv2dBackpropFilter");const h=dc(l),d=nc(r.shape,c,i,1,o,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,y="channelsLast"===d.dataFormat,b=new ga(d.filterShape,"float32"),x=d.padInfo.left,w=d.padInfo.top,v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=new ga(r.shape,r.dtype,v),N=new ga(a.shape,a.dtype,k);for(let S=0;S<m;++S){const e=Math.max(0,Math.ceil((w-S)/p)),t=Math.min(d.outHeight,(d.inHeight+w-S)/p);for(let n=0;n<g;++n){const s=Math.max(0,Math.ceil((x-n)/f)),r=Math.min(d.outWidth,(d.inWidth+x-n)/f);for(let a=0;a<d.inChannels;++a)for(let i=0;i<d.outChannels;++i){let o=0;for(let l=0;l<d.batchSize;++l)for(let u=e;u<t;++u){const e=S+u*p-w;for(let t=s;t<r;++t){const s=n+t*f-x;o+=y?I.get(l,e,s,a)*N.get(l,u,t,i):I.get(l,a,e,s)*N.get(l,i,u,t)}}b.set(o,S,n,a,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const HF={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;hE([r,a],"conv2dBackpropInput");const h=Pe(a.shape),d=Pe(r.shape);let p=dc(u);const f=nc(i,a.shape,o,1,l,c,!1,p),m=new ga(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:I,filterWidth:N,inChannels:S,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;p=f.dataFormat;const D=I-1-f.padInfo.top,_=N-1-f.padInfo.left,O="channelsLast"===p,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=d[0],W=O?d[1]:d[2],V=O?d[2]:1,U=O?1:d[1];for(let G=0;G<k;++G)for(let e=0;e<S;++e)for(let t=0;t<T;++t){const n=t-D,s=Math.max(0,Math.ceil(n/R)),r=Math.min(E,(I+n)/R);for(let a=0;a<C;++a){const i=a-_,o=Math.max(0,Math.ceil(i/F)),l=Math.min(A,(N+i)/F);let u=0;for(let t=s;t<r;++t){const s=t*R-n;for(let n=o;n<l;++n){const r=B*G+W*t+V*n,a=x*(I-1-s)+w*(N-1-(n*F-i))+v*e;for(let e=0;e<$;++e){u+=y[r+U*e]*b[a+e]}}}g[M*G+L*t+z*a+P*e]=u}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const jF={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;hE([r,a],"conv3d");const u=sc(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new ga(u.outShape,r.dtype),v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=w.values,N=Pe(r.shape),S=Pe(a.shape);for(let T=0;T<u.batchSize;++T){const e=T*N[0],t=T*w.strides[0];for(let n=0;n<u.outDepth;++n){const s=t+n*w.strides[1],r=n*u.strideDepth-y;for(let t=0;t<c;++t){const n=r+t*p;if(n<0||n>=u.inDepth)continue;const a=t*S[0],i=e+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*S[1],o=i+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<d;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*S[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=v[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*k[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const qF={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;hE([r,a],"conv3dBackpropFilterV2");const u=Pe(r.shape),c=Pe(a.shape),h=sc(r.shape,l,i,1,o),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new ga(h.filterShape,"float32"),x=b.values,[w,v,k,I]=b.strides,N=n.data.get(a.dataId).values,[S,T,C,$]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let L=0;L<m;++L){const e=Math.max(0,Math.ceil((_-L)/d)),t=Math.min(h.outDepth,(h.inDepth+_-L)/d),n=L*w;for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((M-s)/p)),a=Math.min(h.outHeight,(h.inHeight+M-s)/p),i=s*v+n;for(let n=0;n<y;++n){const o=Math.max(0,Math.ceil((O-n)/f)),l=Math.min(h.outWidth,(h.inWidth+O-n)/f),u=n*k+i;for(let i=0;i<h.inChannels;++i){const c=i*I+u;for(let u=0;u<h.outChannels;++u){let m=0;for(let c=0;c<h.batchSize;++c){const h=c*A,g=c*S;for(let c=e;c<t;++c){const e=(L+c*d-_)*R+h,t=c*T+g;for(let c=r;c<a;++c){const r=(s+c*p-M)*F+e,a=c*C+t;for(let e=o;e<l;++e){const t=e*$+a;m+=E[(n+e*f-O)*D+r+i]*N[t+u]}}}}x[c+u]=m}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const KF={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;hE([r],"conv3dBackpropInputV2");const u=Pe(r.shape),c=Pe(a.shape),h=sc(l,a.shape,o,1,i),d=new ga(h.inShape,"float32"),p=d.values,[f,m,g,y]=d.strides,b=n.data.get(r.dataId).values,[x,w,v,k]=u,I=n.data.get(a.dataId).values,[N,S,T,C]=c,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let j=0;j<$;++j)for(let e=0;e<F;++e)for(let t=0;t<D;++t){const n=t-U,s=Math.max(0,Math.ceil(n/B)),r=Math.min(L,(E+n)/B);for(let a=0;a<_;++a){const i=a-G,o=Math.max(0,Math.ceil(i/W)),l=Math.min(z,(A+i)/W);for(let u=0;u<O;++u){const c=u-H,h=Math.max(0,Math.ceil(c/V)),d=Math.min(P,(R+c)/V);let $=0;for(let t=s;t<r;++t){const s=t*B-n;for(let n=o;n<l;++n){const r=n*W-i;for(let a=h;a<d;++a){const i=x*j+w*t+v*n+k*a,o=N*(E-1-s)+S*(A-1-r)+T*(R-1-(a*V-c))+C*e;for(let e=0;e<M;++e){$+=b[i+e]*I[o+e]}}}}p[f*j+m*t+g*a+y*u+e]=$}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},XF=PE(Bt,(e=>Math.cos(e))),YF={kernelName:Bt,backendName:"cpu",kernelFunc:XF},JF=PE(Wt,(e=>Math.cosh(e))),ZF={kernelName:Wt,backendName:"cpu",kernelFunc:JF};const QF={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=a.shape[0],[m,g]=o,y=Ro([f,m,g,p],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,v=Pe(r.shape),k=Pe(y.shape);for(let I=0;I<f;I++){const e=4*I,t=b[e],n=b[e+1],s=b[e+2],r=b[e+3],a=x[I];if(a>=c)continue;const i=m>1?(s-t)*(h-1)/(m-1):0,o=g>1?(r-n)*(d-1)/(g-1):0;for(let c=0;c<m;c++){const e=m>1?t*(h-1)+c*i:.5*(t+s)*(h-1);if(e<0||e>h-1)for(let t=0;t<g;t++)for(let e=0;e<p;e++){const n=e+t*k[2]+c*k[1]+I*k[0];y.values[n]=u}else if("bilinear"===l){const t=Math.floor(e),s=Math.ceil(e),i=e-t;for(let e=0;e<g;e++){const l=g>1?n*(d-1)+e*o:.5*(n+r)*(d-1);if(l<0||l>d-1){for(let t=0;t<p;t++){const n=t+e*k[2]+c*k[1]+I*k[0];y.values[n]=u}continue}const h=Math.floor(l),f=Math.ceil(l),m=l-h;for(let n=0;n<p;n++){let r=n+h*v[2]+t*v[1]+a*v[0];const o=w[r];r=n+f*v[2]+t*v[1]+a*v[0];const l=w[r];r=n+h*v[2]+s*v[1]+a*v[0];const u=w[r];r=n+f*v[2]+s*v[1]+a*v[0];const d=o+(l-o)*m,p=u+(w[r]-u)*m;r=n+e*k[2]+c*k[1]+I*k[0],y.values[r]=d+(p-d)*i}}}else for(let t=0;t<g;++t){const s=g>1?n*(d-1)+t*o:.5*(n+r)*(d-1);if(s<0||s>d-1){for(let e=0;e<p;e++){const n=e+t*k[2]+c*k[1]+I*k[0];y.values[n]=u}continue}const i=Math.round(s),l=Math.round(e);for(let e=0;e<p;e++){const n=e+i*v[2]+l*v[1]+a*v[0],s=e+t*k[2]+c*k[1]+I*k[0];y.values[s]=w[n]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const eD={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;hE(r,"cumprod");const l=dh([a],r.shape.length);let u=r;null!=l&&(u=WA({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=fh(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ea(u.dtype,"int32"),d=Ue(pe(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let y=0;y<p.length;y+=f)for(let e=0;e<f;e++){const t=m(y,e);if(0===e)d[t]=i?1:p[t];else{const n=m(y,e-1);d[t]=i?p[n]*d[n]:p[t]*d[n]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=WA({inputs:{x:g},backend:n,attrs:{perm:ph(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const tD={kernelName:Ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;hE(r,"cumsum");const l=dh([a],r.shape.length);let u=r;null!=l&&(u=WA({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=fh(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ea(u.dtype,"int32"),d=Ge(pe(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let y=0;y<p.length;y+=f)for(let e=0;e<f;e++){const t=m(y,e);if(0===e)d[t]=i?0:p[t];else{const n=m(y,e-1);d[t]=i?p[n]+d[n]:p[t]+d[n]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=WA({inputs:{x:g},backend:n,attrs:{perm:ph(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const nD={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=DE(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=_E(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const sD={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;ce("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,d=u*a,p=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*d*p);let g=0;for(let y=0;y<o;++y)for(let e=0;e<h;++e){const t=Math.floor(e/a),n=e%a;for(let e=0;e<d;++e){const s=Math.floor(e/a),r=(n*a+e%a)*p;for(let e=0;e<p;++e){const n=e+r+c*(s+u*(t+l*y));m[g++]=f[n]}}}return n.makeTensorInfo([o,h,d,p],r.dtype,m)}};function rD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;hE([r,a],"depthwiseConv2DNative");const c=Pe(r.shape),h=Pe(a.shape);let d=l;null==d&&(d=[1,1]),ce(cc(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const p=nc(r.shape,a.shape,i,d,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=p,x=b.left,w=b.top,v=p.outChannels/p.inChannels,k=new ga(p.outShape,r.dtype),I=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,S=k.values;for(let T=0;T<p.batchSize;++T){const e=T*c[0],t=T*k.strides[0];for(let n=0;n<p.outHeight;++n){const s=t+n*k.strides[1],r=n*p.strideHeight-w;for(let t=0;t<f;++t){const n=r+t*g;if(n<0||n>=p.inHeight)continue;const a=t*h[0],i=e+n*c[1];for(let e=0;e<p.outWidth;++e){const t=s+e*k.strides[2],n=e*p.strideWidth-x;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=p.inWidth)continue;const r=a+e*h[1],o=i+s*p.inChannels;let l=t,u=r;for(let e=0;e<p.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)S[l+e]+=t*N[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const aD={kernelName:qt,backendName:"cpu",kernelFunc:rD};const iD={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;hE([r,a],"depthwiseConv2dNativeBackpropFilter");const h=nc(r.shape,c,i,o,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new ga(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,v=new ga(r.shape,r.dtype,w),k=n.data.get(a.dataId).values,I=new ga(a.shape,a.dtype,k);for(let N=0;N<f;++N){const e=Math.max(0,Math.ceil((b-N)/d)),t=Math.min(h.outHeight,(h.inHeight+b-N)/d);for(let n=0;n<m;++n){const s=Math.max(0,Math.ceil((y-n)/p)),r=Math.min(h.outWidth,(h.inWidth+y-n)/p);for(let a=0;a<h.outChannels;++a){const i=Math.trunc(a/x),o=a%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let o=e;o<t;++o){const e=N+o*d-b;for(let t=s;t<r;++t){const s=n+t*p-y;l+=v.get(u,e,s,i)*I.get(u,o,t,a)}}g.set(l,N,n,i,o)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const oD={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;hE([r,a],"depthwiseConv2DNativeBackpropInput");const h=Pe(r.shape),d=Pe(a.shape),p=nc(c,a.shape,i,o,l,u,!0),f=new ga(p.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,v,k]=h,I=n.data.get(a.dataId).values,[N,S,T]=d,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=p,z=$-1-p.padInfo.top,P=E-1-p.padInfo.left,B=D/A;for(let W=0;W<C;++W)for(let e=0;e<A;++e)for(let t=0;t<R;++t){const n=t-z,s=Math.max(0,Math.ceil(n/M)),r=Math.min(_,($+n)/M);for(let a=0;a<F;++a){const i=a-P,o=Math.max(0,Math.ceil(i/L)),l=Math.min(O,(E+i)/L);let u=0;for(let t=s;t<r;++t){const s=t*M-n;for(let n=o;n<l;++n){const r=w*W+v*t+k*n,a=N*($-1-s)+S*(E-1-(n*L-i))+T*e;for(let t=0;t<B;++t){u+=x[r+(e*B+t)]*I[a+t]}}}m[g*W+y*t+b*a+e]=u}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const lD={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=pe(s.shape),a=n.data.get(s.dataId).values,i=Ro([r,r],s.dtype),o=i.values;for(let u=0;u<a.length;u++)o[u*r+u]=a[u];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},uD={kernelName:Jt,backendName:"cpu",kernelFunc:e=>{let{inputs:t,backend:n,attrs:s}=e;const{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=n,c=u.data.get(r.dataId).values,h=r.shape.length,d=u.data.get(a.dataId).values,p=a.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:k,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:T,outShape:C}=Qu(r.shape,a.shape,i,o,"NHWC",l),$=pe(C),E=C.length,A=Ce(r.dtype,$);for(let R=0;R<f;++R)for(let e=0;e<b;++e){const t=e*v-w.top;for(let n=0;n<x;++n){const s=n*k-w.left;for(let i=0;i<y;++i){let o=Number.MIN_SAFE_INTEGER;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<m)for(let t=0;t<N;++t){const l=s+t*T;if(l>=0&&l<g){const s=qe([R,n,l,i],h,Pe(r.shape)),u=qe([e,t,i],p,Pe(a.shape)),f=c[s]+d[u];f>o&&(o=f)}}}A[qe([R,e,n,i],E,Pe(C))]=o}}}return{dataId:u.write(Zr(A,r.dtype),C,r.dtype),shape:C,dtype:r.dtype}}},cD={kernelName:Qt,backendName:"cpu",kernelFunc:e=>{let{inputs:t,backend:n,attrs:s}=e;const{x:r,filter:a,dy:i}=t,{strides:o,pad:l,dilations:u}=s,c=n,h=We(r.shape,c.data.get(r.dataId).values),d=We(a.shape,c.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=Qu(r.shape,a.shape,o,l,"NHWC",u);ce(i.rank===T.length,(()=>`Error in ${Qt}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=We(T,c.data.get(i.dataId).values),$=He(a.shape,a.dtype);for(let E=0;E<p;++E)for(let e=0;e<y;++e){const t=e*w-x.top;for(let n=0;n<b;++n){const s=n*v-x.left;for(let r=0;r<g;++r){let a=Number.MIN_SAFE_INTEGER,i=0,o=0;for(let e=0;e<k;++e){const n=t+e*N;if(n>=0&&n<f)for(let t=0;t<I;++t){const l=s+t*S;if(l>=0&&l<m){const s=h[E][n][l][r]+d[e][t][r];s>a&&(a=s,i=e,o=t)}}}$[i][o][r]+=C[E][e][n][r]}}}return{dataId:c.write(Zr($,r.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},hD={kernelName:Zt,backendName:"cpu",kernelFunc:e=>{let{inputs:t,backend:n,attrs:s}=e;const{x:r,filter:a,dy:i}=t,{strides:o,pad:l,dilations:u}=s,c=n,h=We(r.shape,c.data.get(r.dataId).values),d=We(a.shape,c.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=Qu(r.shape,a.shape,o,l,"NHWC",u);ce(i.rank===T.length,(()=>`Error in ${Zt}, dy must have the same rank as output ${T.length}, but got ${i.rank}`));const C=We(T,c.data.get(i.dataId).values),$=He(r.shape,r.dtype);for(let E=0;E<p;++E)for(let e=0;e<y;++e){const t=e*w-x.top;for(let n=0;n<b;++n){const s=n*v-x.left;for(let r=0;r<g;++r){let a=Number.MIN_SAFE_INTEGER,i=t<0?0:t,o=s<0?0:s;for(let e=0;e<k;++e){const n=t+e*N;if(n>=0&&n<f)for(let t=0;t<I;++t){const l=s+t*S;if(l>=0&&l<m){const s=h[E][n][l][r]+d[e][t][r];s>a&&(a=s,i=n,o=l)}}}$[E][i][o][r]+=C[E][e][n][r]}}}return{dataId:c.write(Zr($,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const dD={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r}=t,{canvas:a,options:i}=s,{contextOptions:o,imageOptions:l}=i||{},u=(null===l||void 0===l?void 0:l.alpha)||1,c=(null===o||void 0===o?void 0:o.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`);const h=a.getContext(c,(null===o||void 0===o?void 0:o.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],m=n.data.get(r.dataId).values,g="float32"===r.dtype?255:1,y=new Uint8ClampedArray(p*d*4);for(let x=0;x<d*p;++x){const e=[0,0,0,255*u];for(let n=0;n<f;n++){const t=m[x*f+n];if("float32"===r.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===r.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===f?(e[0]=t*g,e[1]=t*g,e[2]=t*g):e[n]=t*g}const t=4*x;y[t+0]=Math.round(e[0]),y[t+1]=Math.round(e[1]),y[t+2]=Math.round(e[2]),y[t+3]=Math.round(e[3])}a.width=p,a.height=d;const b=new ImageData(y,p,d);return h.putImageData(b,0,0),r}};function pD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;hE(r,"sum"),o="bool"===r.dtype?SE({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):wE({inputs:{x:r},backend:n});const l=o.shape.length,u=Ne(a,o.shape),c=dh(u,l);let h=u,d=o;null!=c&&(d=WA({inputs:{x:o},backend:n,attrs:{perm:c}}),h=fh(h.length,l)),hh("sum",h,d.shape.length);const[p,f]=uh(d.shape,h);let m=xE(n,p,Ea(d.dtype,"int32"));const g=pe(f),y=n.data.get(m.dataId).values,b=n.data.get(d.dataId).values;for(let x=0;x<y.length;++x){const e=x*g;let t=0;for(let n=0;n<g;++n)t+=b[e+n];y[x]=t}if(i){const e=m;m=QR({inputs:{x:m},backend:n,attrs:{shape:ch(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(d),m}const fD={kernelName:Us,backendName:"cpu",kernelFunc:pD};const mD={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Lm(r,a.length);Pm(i.length,l,a);const{path:u,steps:c}=Bm(o,l),h=c.length;let d=null,p=i.length;const f=[];for(let m=0;m<h;++m){for(const e of c[m]){const{permutationIndices:t,expandDims:s}=zm(p,l[e]);let r;Wm(t)?r=a[e]:(r=WA({inputs:{x:a[e]},backend:n,attrs:{perm:t}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);ge(r.shape,i)||(r=QR({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===d?d=r:(d=DA({inputs:{a:r,b:d},backend:n}),f.push(d))}m<h-1&&(u[m]>=0&&(d=pD({inputs:{x:d},backend:n,attrs:{axis:u[m]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const m of f)m!==d&&n.disposeIntermediateTensorInfo(m);return d}};const gD={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;hE([s,r],"eluGrad");const a=new Float32Array(pe(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let l=0;l<i.length;++l){const e=i[l];a[l]=e>=0?o[l]:o[l]*(e+1)}return n.makeTensorInfo(r.shape,"float32",a)}},yD=xm,bD=wm,xD=vm,wD=km,vD=Im,kD=Nm,ID=PE(an,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+yD*n);return t*(1-((((kD*s+vD)*s+wD)*s+xD)*s+bD)*s*Math.exp(-n*n))})),ND={kernelName:an,backendName:"cpu",kernelFunc:ID};function SD(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(ce(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),QR({inputs:{x:r},backend:n,attrs:{shape:o}})}const TD={kernelName:un,backendName:"cpu",kernelFunc:SD},CD=gE(((e,t)=>e/t)),$D=CE(tn,CD),ED={kernelName:tn,backendName:"cpu",kernelFunc:$D};function AD(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=pe(u),h=Te("float32",c),d=Te("float32",c);for(let g=0;g<r;g++){const e=hR({inputs:{x:o},backend:n,attrs:{begin:[g,0],size:[1,a]}}),s=hR({inputs:{x:l},backend:n,attrs:{begin:[g,0],size:[1,a]}}),r=yE({inputs:{real:e,imag:s},backend:n}),{real:i,imag:u}=RD(r,t,n),c=Sm(i,u);for(let t=0;t<a;t++){const e=Em(c,t);h[g*a+t]=e.real,d[g*a+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r)}const p=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",d),m=yE({inputs:{real:p,imag:f},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}function RD(e,t,n){const s=pe(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0===((o=s)&o-1)){const r=FD(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",Jr(s,"float32")),i=wE({inputs:{x:a},backend:n}),l=ED.kernelFunc({inputs:{a:e,b:a},backend:n}),u=ED.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Fm(r*s,t,n),l=Em(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Am(s,a,i,r)}return s}(Sm(a,i),s,t);return Tm(e)}var o}function FD(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Sm(e,t),i=n/2,o=Cm(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=yE({inputs:{real:h,imag:d},backend:r}),f=$m(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=yE({inputs:{real:b,imag:x},backend:r}),v=FD(l,u,i,s,r),k=v.real,I=v.imag,N=[k.length],S=r.makeTensorInfo(N,"float32",k),T=r.makeTensorInfo(N,"float32",I),C=yE({inputs:{real:S,imag:T},backend:r}),$=FD(m,g,i,s,r),E=$.real,A=$.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=yE({inputs:{real:F,imag:D},backend:r}),O=Rm(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),P=yE({inputs:{real:L,imag:z},backend:r}),B=DA({inputs:{a:P,b:_},backend:r}),W=RE({inputs:{a:C,b:B},backend:r}),V=DR({inputs:{a:C,b:B},backend:r}),U=kE({inputs:{input:W},backend:r}),G=kE({inputs:{input:V},backend:r}),H=zF({inputs:{input:W},backend:r}),j=zF({inputs:{input:V},backend:r}),q=BF({inputs:[U,G],backend:r,attrs:{axis:0}}),K=BF({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const DD={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=pe(s.shape),a=s.shape[s.shape.length-1],i=QR({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=AD(i,!1,n),l=QR({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function _D(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||Me(r),o=Ce(i,pe(s));return function(e,t){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const OD={kernelName:dn,backendName:"cpu",kernelFunc:_D};const MD={kernelName:pn,backendName:"cpu",kernelFunc:e=>{let{inputs:t,attrs:n,backend:s}=e;const{image:r}=t,a=s,i=Te(r.dtype,pe(r.shape)),[o,l,u,c]=r.shape,h=a.data.get(r.dataId).values;for(let d=0;d<o;d++){const e=d*u*l*c;for(let t=0;t<l;t++){const n=t*(u*c);for(let t=0;t<u;t++){const s=t*c;for(let r=0;r<c;r++){const a=Math.round(u-t-1),o=e+n+s+r;let l=h[o];if(a>=0&&a<u){l=h[e+n+a*c+r]}i[o]=l}}}}return{dataId:a.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const LD={kernelName:vr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=VF({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=QR({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=RE({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=RE({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=m;if("NCHW"===c&&"prelu"===p&&1===o.shape.length&&1!==o.shape[0]){const e=QR({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=ZR(n,m,p,e,f),n.disposeIntermediateTensorInfo(e)}else m=ZR(n,m,p,o,f);n.disposeIntermediateTensorInfo(e)}return m}};const zD={kernelName:kr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=rD({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;m=RE({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=ZR(n,m,p,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const PD={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=pe(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=nu(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=iA(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,d.values)}};const BD={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;hE([r,a],"gatherV2");const l=Ne(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let x=0;x<u.length;++x){const e=u[x];ce(e<=c-1&&e>=0,(()=>`GatherV2: the index value ${e} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const d=pe(a.shape),p=rg(r,a,l,h),f=QR({inputs:{x:r},backend:n,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),m=QR({inputs:{x:a},backend:n,attrs:{shape:[p.batchSize,d/p.batchSize]}}),g=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=n.bufferSync(m),b=oA(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(p.outputShape,b.dtype,b.values)}};const WD={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=pe(s.shape),a=s.shape[s.shape.length-1],i=QR({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=AD(i,!0,n),l=QR({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},VD=PE(Nn,(e=>Number.isFinite(e)?1:0),"bool"),UD={kernelName:Nn,backendName:"cpu",kernelFunc:VD},GD=PE(Sn,(e=>Math.abs(e)===1/0?1:0),"bool"),HD={kernelName:Sn,backendName:"cpu",kernelFunc:GD},jD=PE(Tn,(e=>Number.isNaN(e)?1:0),"bool"),qD={kernelName:Tn,backendName:"cpu",kernelFunc:jD};const KD={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=wA(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},XD=PE(Fn,(e=>Math.log1p(e))),YD={kernelName:Fn,backendName:"cpu",kernelFunc:XD},JD=gE(((e,t)=>e&&t)),ZD=CE(Dn,JD,null,"bool"),QD={kernelName:Dn,backendName:"cpu",kernelFunc:ZD},e_=PE(_n,(e=>e?0:1),"bool"),t_={kernelName:_n,backendName:"cpu",kernelFunc:e_},n_=gE(((e,t)=>e||t)),s_=CE(On,n_,null,"bool"),r_={kernelName:On,backendName:"cpu",kernelFunc:s_};const a_={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;hE(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,d=pe(r.shape),p=new Float32Array(d);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let m=0;m<d;m++){const e=f(m),t=h[m]*Math.pow(i+o*e,-l);p[m]=t}return n.makeTensorInfo(r.shape,r.dtype,p)}};const i_={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;hE(i,"LRNGrad");const h=pe(i.shape),d=i.shape[3],p=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let b=0;b<y;b++){const e=b%d,t=b-e+Math.max(0,e-o),n=b-e+Math.min(d,e+o+1);let s=0;for(let r=t;r<n;r++)s+=Math.pow(f[r],2);s=u*s+l;for(let r=t;r<n;r++){let e=-2*u*c*f[r]*m[b]/s;b===r&&(e+=Math.pow(s,-c)),e*=p[b],g[r]+=e}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function o_(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=Ne(a,l);let h=c;const d=dh(h,u);let p=o.data.get(r.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];p=BA(p,l,r.dtype,d,e),h=fh(h.length,u),l=e}hE(r,"max"),hh("max",h,u);const[f,m]=uh(l,h),g=NA(p,pe(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;if(i){b=ch(f,c)}return{dataId:y,shape:b,dtype:r.dtype}}const l_={kernelName:Vn,backendName:"cpu",kernelFunc:o_};const u_={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;hE(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;ce(cc(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ec(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&ge(u.inShape,u.outShape))c=wE({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Pe(r.shape),s=NF(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const c_={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;hE(r,"maxPool3d");const c=tc(r.shape,a,i,1,o,l,u),h=TF(n.data.get(r.dataId).values,r.shape,r.dtype,Pe(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const h_={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;hE([r,a],"maxPool3DGrad");const c=tc(a.shape,i,o,1,l,u),h=function(e,t){const n=Ro(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-d;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-p;let d=u;for(;d<0;)d+=o;const v=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const p=r*a-f;let k=p;for(;k<0;)k+=l;const I=Math.min(t.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=d;s<v;s+=o){const r=s-u;for(let a=k;a<I;a+=l){const i=a-p,o=e.get(m,t,s,a,g);o>=N&&(N=o,S=n*c*h+r*c+i)}}}n.set(S,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,v=b-1-c.padInfo.front,k=w-1-c.padInfo.left,I=x-1-c.padInfo.top,N=Ro(a.shape,"float32"),S=n.bufferSync(r);for(let T=0;T<c.batchSize;++T)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=t-v,a=n-I,i=s-k;let o=0;for(let t=0;t<b;t+=m){const n=(r+t)/d;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let s=0;s<x;s+=g){const r=(a+s)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let a=0;a<w;a+=y){const l=(i+a)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const u=b*x*w-1-h.get(T,n,r,l,e)===t*x*w+s*w+a?1:0;if(0===u)continue;o+=S.get(T,n,r,l,e)*u}}}N.set(o,T,t,n,s,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const d_={kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;hE([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=ec(o.shape,l,u,1,c,h),p=n.data.get(o.dataId).values,f=Ro(d.outShape,o.dtype,SF(p,o.shape,o.dtype,d).values),m=d.strideHeight,g=d.strideWidth,y=d.dilationHeight,b=d.dilationWidth,x=d.effectiveFilterHeight,w=d.effectiveFilterWidth,v=w-1-d.padInfo.left,k=x-1-d.padInfo.top,I=Ro(o.shape,"float32"),N=n.data.get(r.dataId).values,S=Ro(r.shape,"float32",N);for(let T=0;T<d.batchSize;++T)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inHeight;++t)for(let n=0;n<d.inWidth;++n){const s=t-k,r=n-v;let a=0;for(let t=0;t<x;t+=y){const n=(s+t)/m;if(!(n<0||n>=d.outHeight||Math.floor(n)!==n))for(let s=0;s<w;s+=b){const i=(r+s)/g;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const o=x*w-1-f.get(T,n,i,e)===t*w+s?1:0;if(0===o)continue;a+=S.get(T,n,i,e)*o}}I.set(a,T,t,n,e)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const p_={kernelName:Kn,backendName:"cpu",kernelFunc:e=>{let{inputs:t,attrs:n,backend:s}=e;const{x:r}=t,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=n,u=s;hE(r,"MaxPoolWithArgmax");const c=u.data.get(r.dataId).values,h=ec(r.shape,a,i,[1,1],o),[d,p]=function(e,t,n,s,r){const a=NF(e,0,n,Pe(t),r,"max"),i=SF(e,t,n,r,!0,s);return[a.values,i.values]}(c,r.shape,r.dtype,l,h),f=u.write(d,h.outShape,r.dtype),m=u.write(p,h.outShape,r.dtype);return[{dataId:f,shape:h.outShape,dtype:r.dtype},{dataId:m,shape:h.outShape,dtype:"int32"}]}};const f_={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=Ne(a,r.shape),l=pe(uh(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=SE({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const d=$D({inputs:{a:h,b:c},backend:n});u.push(d);const p=pD({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}};const m_={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hE(r,"min");const o=Ne(a,r.shape);let l=o;const u=dh(l,r.shape.length);let c=r;null!=u&&(c=WA({inputs:{x:r},backend:n,attrs:{perm:u}}),l=fh(l.length,r.shape.length)),hh("min",l,c.shape.length);const[h,d]=uh(c.shape,l),p=pe(d),f=Ge(pe(h),c.dtype),m=n.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const e=y*p;let t=m[e];for(let n=0;n<p;++n){const s=m[e+n];(Number.isNaN(s)||s<t)&&(t=s)}f[y]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=QR({inputs:{x:g},backend:n,attrs:{shape:ch(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const g_={kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;hE(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,d=r.shape.length,p=Pe(r.shape),f=pe(o),m=o.length,g=Pe(o),y=Te(r.dtype,f);for(let b=0;b<f;b++){let e=Ke(b,m,g);for(let n=0;n<m;n++)e[n]<l[n]?e[n]=2*l[n]-e[n]-c:e[n]>=u[n]&&(e[n]=2*(u[n]-1)-e[n]+c);e=e.map(((e,t)=>e-l[t]));const t=qe(e,d,p);y[b]=h[t]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},y_=gE(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),b_=CE(Qn,y_),x_={kernelName:Qn,backendName:"cpu",kernelFunc:b_};function w_(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=Ne([o],r.shape),u=o_({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=ch(u.shape,l),h=QR({inputs:{x:u},backend:n,attrs:{shape:c}}),d=DR({inputs:{a:r,b:h},backend:n}),p=XE({inputs:{x:d},backend:n}),f=pD({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),m=QR({inputs:{x:f},backend:n,attrs:{shape:c}}),g=$D({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const v_={kernelName:js,backendName:"cpu",kernelFunc:w_};const k_={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;hE(r,"multinomial");const l=o?r:w_({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,d=[u,a],p=Ge(pe(d),"int32");for(let f=0;f<u;++f){const e=f*c,t=new Float32Array(c-1);t[0]=h[e];for(let r=1;r<t.length;++r)t[r]=t[r-1]+h[e+r];const n=Td.alea(i.toString()),s=f*a;for(let r=0;r<a;++r){const e=n();p[s+r]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){p[s+r]=n;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",p)}},I_=lf;const N_={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;hE(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=I_(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},S_=uf;const T_={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;hE(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=S_(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},C_=cf;const $_={kernelName:is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;hE(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,d=i,p=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=C_(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const E_={kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s;hE(r,"oneHot");const u=pe(r.shape),c=new Float32Array(u*i);c.fill(l);const h=n.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<i&&(c[d*i+h[d]]=o);return n.makeTensorInfo([...r.shape,i],a,c)}};function A_(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=kE({inputs:{input:s},backend:n}),t=A_({inputs:{x:e},backend:n}),r=zF({inputs:{input:s},backend:n}),a=A_({inputs:{x:r},backend:n}),i=yE({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return _D({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const R_={kernelName:gr,backendName:"cpu",kernelFunc:A_};const F_={kernelName:os,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=kE({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=zF({inputs:{input:r},backend:s}),i=A_({inputs:{x:a},backend:s}),o=yE({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return _D({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function D_(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return SD({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{he(a,e.shape,"All tensors passed to stack must have matching shapes"),ce(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=BF({inputs:t.map((e=>{const t=SD({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const __={kernelName:us,backendName:"cpu",kernelFunc:D_};const O_={kernelName:cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;hE(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=pe(r.shape),h=r.shape.length,d=Pe(r.shape),p=pe(o),f=o.length,m=Pe(o),g=Te(r.dtype,p);0!==i&&g.fill(i);for(let y=0;y<c;y++){g[qe(Ke(y,h,d).map(((e,t)=>e+l[t])),f,m)]=u[y]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},M_=gE(((e,t)=>Math.pow(e,t))),L_=CE(ds,M_),z_={kernelName:ds,backendName:"cpu",kernelFunc:L_};const P_={kernelName:ms,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map((e=>n.data.get(e.dataId).values)),u=r.map((e=>e.shape)),c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,[d,p,f]=KA(l,u,c,a.shape,a.dtype,h,i.shape),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}};const B_={kernelName:gs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=YA(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};const W_={kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,d=o.map((e=>n.data.get(e.dataId).values)),p=o.map((e=>e.shape)),[f,m]=tR(u,r.shape,c,a.shape,a.dtype,h,i.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,m)}};const V_={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=nR(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},U_=PE(ws,(e=>1/e)),G_={kernelName:ws,backendName:"cpu",kernelFunc:U_};const H_={kernelName:Ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;hE(r,"resizeBilinear");const l=Pe(r.shape),[u,c]=o,[h,d,p,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(pe([h,u,c,f])),y=[a&&u>1?d-1:d,a&&c>1?p-1:p],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],v=y[1]/b[1];for(let k=0;k<h;k++)for(let e=0;e<u;e++){let t;t=i?w*(e+.5)-.5:w*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(d-1,Math.ceil(t)),a=k*l[0]+n*l[1],o=k*l[0]+r*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),r=t-n,u=Math.min(p-1,Math.ceil(t)),c=a+n*l[2],h=o+n*l[2],d=a+u*l[2],y=o+u*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[d+e]-t)*r,i=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}};const j_={kernelName:Ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;hE([a,r],"resizeBilinearGrad");const o=Pe(r.shape),[l,u,c,h]=r.shape,[,d,p]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&d>1?u-1:u,i&&p>1?c-1:c],g=[i&&d>1?d-1:d,i&&p>1?p-1:p],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let v=0;v<l;v++){const e=v*o[0];for(let t=0;t<d;t++){const n=t*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=e+s*o[1],i=e+r*o[1],l=n-s,d=1-l;for(let e=0;e<p;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,p=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],v=d*u,k=d*r,I=l*u,N=l*r;for(let e=0;e<h;e++){const t=x[w++];f[p+e]+=t*v,f[m+e]+=t*k,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const q_={kernelName:Is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;hE(r,"resizeNearestNeighbor");const l=Pe(r.shape),[u,c]=o,[h,d,p,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?d-1:d,a&&c>1?p-1:p],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let k=0;k<h;k++){const e=k*l[0];for(let t=0;t<u;t++){const n=i?x*(t+.5):x*t;let s=Math.min(d-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=e+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(p-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[v++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const K_={kernelName:Ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;hE([a,r],"resizeNearestNeighborGrad");const o=Pe(r.shape),l=Pe(a.shape),[u,c,h,d]=r.shape,[,p,f]=a.shape,m=new Float32Array(u*c*h*d),g=n.data.get(a.dataId).values,y=[i&&p>1?c-1:c,i&&f>1?h-1:h],b=[i&&p>1?p-1:p,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,I=2*Math.ceil(v)+2,N=2*Math.ceil(k)+2;for(let S=0;S<u;S++){const e=S*o[0];for(let t=0;t<c;t++){const n=e+t*o[1],s=Math.floor(t*v),r=Math.floor(s-I/2);for(let a=0;a<h;a++){const s=n+a*o[2],u=Math.floor(a*k),y=Math.floor(u-N/2);for(let n=0;n<d;n++){let o=0;for(let s=0;s<I;s++){const u=s+r;if(u<0||u>=p)continue;const d=e+u*l[1],m=u*x;if(t===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const s=d+t*l[2],r=t*w;a===Math.min(h-1,i?Math.round(r):Math.floor(r))&&(o+=g[s+n])}}m[s+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const X_={kernelName:$s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;hE(r,"reverse");const i=r.shape.length,o=Ne(a,r.shape);if(0===i)return wE({inputs:{x:r},backend:n});const l=new ga(r.shape,r.dtype),u=n.bufferSync(r);for(let c=0;c<l.size;c++){const e=l.indexToLoc(c),t=e.slice();o.forEach((e=>t[e]=r.shape[e]-1-t[e])),l.set(u.get(...t),...e)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Y_={kernelName:xr,backendName:"cpu",kernelFunc:e=>{let{inputs:t,attrs:n,backend:s}=e;const{image:r}=t,{radians:a,fillValue:i,center:o}=n,l=s,u=Te(r.dtype,pe(r.shape)),[c,h,d,p]=r.shape,[f,m]=hm(o,h,d),g=Math.sin(a),y=Math.cos(a),b=l.data.get(r.dataId).values;for(let x=0;x<c;x++){const e=x*d*h*p;for(let t=0;t<h;t++){const n=t*(d*p);for(let s=0;s<d;s++){const r=s*p;for(let a=0;a<p;a++){const o=[c,t,s,a],l=o[2],x=o[1];let w=(l-f)*y-(x-m)*g,v=(l-f)*g+(x-m)*y;w=Math.round(w+f),v=Math.round(v+m);let k=i;if("number"!==typeof i&&(k=3===a?255:i[a]),w>=0&&w<d&&v>=0&&v<h){k=b[e+v*(d*p)+w*p+a]}u[e+n+r+a]=k}}}}return{dataId:l.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},J_=PE(Es,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2===0?t:t+1})),Z_={kernelName:Es,backendName:"cpu",kernelFunc:J_};const Q_={kernelName:Rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=au(0,r,i),d=iR(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}};function eO(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function tO(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const nO={kernelName:Ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=function(e,t,n,s,r,a){const i=Ce("int32",n*r);for(let o=0;o<n;++o){const n=e.slice(o*s,(o+1)*s),l=o*r;for(let e=0;e<r;++e)i[l+e]="left"===a?eO(n,t[e+l]):tO(n,t[e+l])}return i}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],i);return n.makeTensorInfo(a.shape,"int32",o)}};const sO={kernelName:_s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;hE([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Ea(r.dtype,a.dtype),h=Ge(pe(r.shape),c);let d=0;const p=0===i||i>1||1===r.shape.length?1:pe(r.shape.slice(1));for(let f=0;f<o.length;f++)for(let e=0;e<p;e++)1===o[f]?h[d++]=l[f]:h[d++]=u[f];return n.makeTensorInfo(r.shape,c,h)}},rO=ym,aO=bm,iO=PE(Os,(e=>e>=0?aO*e:rO*(Math.exp(e)-1))),oO={kernelName:Os,backendName:"cpu",kernelFunc:iO},lO=PE(Ps,(e=>e<0?-1:e>0?1:0)),uO={kernelName:Ps,backendName:"cpu",kernelFunc:lO},cO=PE(Ls,(e=>Math.sin(e))),hO={kernelName:Ls,backendName:"cpu",kernelFunc:cO},dO=PE(zs,(e=>Math.sinh(e))),pO={kernelName:zs,backendName:"cpu",kernelFunc:dO},fO=Math.log(1.1920928955078125e-7)+2,mO=PE(Ws,(e=>{const t=e>-fO,n=e<fO,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),gO={kernelName:Ws,backendName:"cpu",kernelFunc:mO};const yO={kernelName:Gs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;hE([r],"spaceToBatchND");const o=pe(a),l=[[0,0]];l.push(...i);for(let g=1+a.length;g<r.shape.length;++g)l.push([0,0]);const u=O_.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=dm(u.shape,a,o,!1),h=pm(c.length,a.length,!1),d=fm(u.shape,a,o,!1),p=QR({inputs:{x:u},backend:n,attrs:{shape:c}}),f=WA({inputs:{x:p},backend:n,attrs:{perm:h}}),m=QR({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};const bO={kernelName:qs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,d,p,f,m]=pR(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const xO={kernelName:Ks,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=fR(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const wO={kernelName:Xs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=mR(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const vO={kernelName:Ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=mR(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const kO={kernelName:Js,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=au(0,r,o),p=!1,f=n.bufferSync(r);let m;switch(a.dtype){case"bool":m=iR(f,n.bufferSync(a),o,d,c,u,l,h,Boolean(n.data.get(i.dataId).values[0]),p);break;case"float32":m=iR(f,n.bufferSync(a),o,d,c,u,l,h,n.data.get(i.dataId).values[0],p);break;case"int32":m=iR(f,n.bufferSync(a),o,d,c,u,l,h,n.data.get(i.dataId).values[0],p);break;case"string":m=iR(f,n.bufferSync(a),o,d,c,u,l,h,na(n.data.get(i.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(o,m.dtype,m.values)}};const IO={kernelName:Hs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Ne(i,r.shape)[0],l=Um(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=hR({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},NO={kernelName:Qs,backendName:"cpu",kernelFunc:e=>{let{inputs:t,backend:n}=e;const{x:s}=t,r=n;hE(s,"square");const a=r.data.get(s.dataId).values,i=new Float32Array(a.length);for(let o=0;o<a.length;++o){const e=a[o];i[o]=e*e}return{dataId:r.write(i,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},SO=PE(yr,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),TO={kernelName:yr,backendName:"cpu",kernelFunc:SO};const CO={kernelName:tr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;hE(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Iu(r.shape,a,i,o,l,u,c,h,d);let v;if(m)v=QR({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){ce(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=cu(b,x,w),t=hR({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=QR({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=SR(p,n.bufferSync(r),w,b);v=n.makeTensorInfo(f,e.dtype,e.values)}return v}};const $O={kernelName:nr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=CR(d,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const EO={kernelName:sr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=ER(o,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const AO={kernelName:rr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=AR(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},RO=PE(ir,(e=>Math.tan(e))),FO={kernelName:ir,backendName:"cpu",kernelFunc:RO},DO=PE(or,(e=>Math.tanh(e)));const _O={kernelName:Fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:s,indices:r,updates:a}=t,{sliceRank:i,numUpdates:o,sliceSize:l,strides:u,outputSize:c}=au(0,r,s.shape),h=n.bufferSync(r),d=n.bufferSync(a),p=n.bufferSync(s),f=iR(h,d,s.shape,c,l,o,i,u,p,!1);return n.makeTensorInfo(s.shape,f.dtype,f.values)}};const OO={kernelName:lr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;hE(r,"tile");const i=OR(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}};const MO={kernelName:ur,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;hE(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=zR(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};const LO={kernelName:cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,d,p]=r.shape,[f,m]=null!=u?u:[h,d],g=[c,f,m,p],y=Pe(r.shape),b=y[0],x=y[1],w=y[2],v=Pe(g),k=v[0],I=v[1],N=v[2],S=Te(r.dtype,pe(g));S.fill(l);const T=s.data.get(r.dataId).values,C=s.data.get(a.dataId).values;for(let $=0;$<c;++$){const e=1===a.shape[0]?C:C.subarray(8*$,8*$+8);for(let t=0;t<f;++t)for(let n=0;n<m;++n)for(let s=0;s<p;++s){let r;const a=e[6]*n+e[7]*t+1;if(0===a)continue;const u=(e[0]*n+e[1]*t+e[2])/a,c=(e[3]*n+e[4]*t+e[5])/a,p=zO(u,d,o),f=zO(c,h,o);switch(i){case"nearest":r=BO(T,h,d,b,x,w,$,f,p,s,l);break;case"bilinear":r=WO(T,h,d,b,x,w,$,f,p,s,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}S[$*k+t*I+n*N+s]=r}return s.makeTensorInfo(g,r.dtype,S)}return{dataId:s.write(S,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function zO(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return re(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return re(0,n,t-1)}(e,t);case"nearest":return function(e,t){return re(0,e,t-1)}(e,t);default:return function(e){return e}(e)}}function PO(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function BO(e,t,n,s,r,a,i,o,l,u,c){return PO(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function WO(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),d=Math.floor(l),p=h+1,f=d+1;return(p-o)*((f-l)*PO(e,t,n,s,r,a,i,h,d,u,c)+(l-d)*PO(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*PO(e,t,n,s,r,a,i,p,d,u,c)+(l-d)*PO(e,t,n,s,r,a,i,p,f,u,c))}const VO={kernelName:dr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;hE(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=PR(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const UO={kernelName:pr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let p=0;p<i;p++)p!==a&&(l[u++]=r.shape[p]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const d=new Array(o);for(let p=0;p<d.length;p++){c[a]=p;const e=hR({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});d[p]=QR({inputs:{x:e},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(e)}return d}};const GO={kernelName:fr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;hE(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let d=0;d<u;++d){const e=SD({inputs:{input:c},backend:n,attrs:{dim:d+1}});c=e,l.push(e)}for(let d=0;d<i;++d){const e=Jr(d,"int32"),t=n.makeTensorInfo([],"int32",e),s=jE({inputs:{a:t,b:c},backend:n}),a=SE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),i=DA({inputs:{a:a,b:r},backend:n}),u=pD({inputs:{x:i},backend:n,attrs:{axis:0,keepDims:!1}});o.push(u),l.push(t),l.push(s),l.push(a),l.push(i),l.push(u)}const h=D_({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},HO=[sF,mE,aF,oF,FE,lF,uF,cF,hF,dF,fF,gF,bF,vF,IF,CF,$F,EF,AF,nF,RF,FF,DF,LE,_F,TE,UE,MF,bE,LF,WF,UF,GF,HF,jF,qF,KF,YF,ZF,QF,eD,tD,nD,sD,aD,iD,oD,lD,uD,cD,hD,dD,mD,VR,gD,qE,ND,YE,TD,QE,DD,OD,MD,nA,aA,LD,zD,PD,BD,cA,pA,vE,WD,PF,UD,HD,qD,GR,gA,xA,KD,IA,YD,QD,t_,r_,a_,i_,l_,CA,u_,c_,h_,d_,p_,f_,m_,AA,g_,x_,k_,_A,MA,N_,T_,$_,PA,E_,F_,__,O_,z_,qR,GA,P_,B_,W_,V_,IE,ED,G_,XR,JR,eF,H_,j_,q_,K_,X_,Y_,Z_,aR,Q_,nO,sO,oO,uR,uO,hO,pO,dR,v_,gO,yO,bO,xO,wO,vO,kO,IO,bR,NO,vR,NR,TO,CO,$O,EO,AO,_R,fD,FO,{kernelName:or,backendName:"cpu",kernelFunc:DO},_O,OO,MO,LO,VA,VO,UO,GO,R_];for(const Dj of HO)Ar(Dj);const jO={},qO={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function KO(e,t){jO[e]=t}function XO(e,t){if(!(e in jO)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(Qe().getBool("IS_SAFARI")||"undefined"===typeof OffscreenCanvas||2!==e){if("undefined"!==typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete jO[e]}),!1),Qe().getBool("SOFTWARE_WEBGL_ENABLED")&&(qO.failIfMajorPerformanceCaveat=!1);if(1===e)return n.getContext("webgl",qO)||n.getContext("experimental-webgl",qO);return n.getContext("webgl2",qO)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;jO[e]=n}const n=jO[e];return null==n||n.isContextLost()?(delete jO[e],XO(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),jO[e])}var YO,JO,ZO;function QO(e,t){return[t,e]}function eM(e){const t=pe(e);return xe(Math.ceil(t/4))}function tM(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function nM(e,t){const n=e;let s,r,a,i,o,l,u,c,h,d;return 2===Qe().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function sM(e,t){const n=t();return Qe().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+oM(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(YO||(YO={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(JO||(JO={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ZO||(ZO={}));const rM=5.96e-8,aM=65504;function iM(e){return!!(Qe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||rM<Math.abs(e)&&Math.abs(e)<aM)}function oM(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function lM(e,t){return DM(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function uM(e,t){const n=DM(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(sM(e,(()=>e.shaderSource(n,t))),sM(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function cM(e,t){const n=DM(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(sM(e,(()=>e.shaderSource(n,t))),sM(e,(()=>e.compileShader(n))),Qe().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw dM(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const hM=/ERROR: [0-9]+:([0-9]+):/g;function dM(e,t){const n=hM.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>ve((t+1).toString(),a)+e));let o=0;for(let h=0;h<i.length;h++)o=Math.max(i[h].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ve(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function pM(e){return DM(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function fM(e,t){if(sM(e,(()=>e.linkProgram(t))),!Qe().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function mM(e,t){if(sM(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function gM(e,t){const n=DM(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return sM(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),sM(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function yM(e,t){const n=DM(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return sM(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),sM(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function bM(){return 2===Qe().getNumber("WEBGL_VERSION")?1:4}function xM(e){return DM(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function wM(e,t){const n=Qe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.")}if(e>n||t>n){throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}function vM(e){return DM(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function kM(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(sM(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),sM(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),sM(e,(()=>e.enableVertexAttribArray(o))),!0)}function IM(e,t,n){_M(e,n),sM(e,(()=>e.activeTexture(e.TEXTURE0+n))),sM(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function NM(e,t){_M(e,t),sM(e,(()=>e.activeTexture(e.TEXTURE0+t))),sM(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function SM(e,t,n){return DM(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function TM(e,t,n){return e.getUniformLocation(t,n)}function CM(e,t,n,s){sM(e,(()=>IM(e,t,s))),sM(e,(()=>e.uniform1i(n,s)))}function $M(e){sM(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),sM(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),sM(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))}function EM(e,t,n){sM(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),sM(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function AM(e,t){sM(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),sM(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function RM(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+FM(e,t))}function FM(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function DM(e,t,n){const s=sM(e,(()=>t()));if(null==s)throw new Error(n);return s}function _M(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function OM(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return pe(e.slice(0,e.length-t))}function MM(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function LM(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[OM(e),...MM(e)]),t}function zM(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Qe().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=Qe().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&Qe().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?ae(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Se(e);e=t.newShape}let r=pe(e),a=null;e.length<=1&&r<=n?a=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const i=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||i)if(t){const t=OM(e);let n=2,s=2;e.length&&([n,s]=MM(e)),r=t*(n/2)*(s/2),a=xe(r).map((e=>2*e))}else a=xe(r);return a}function PM(e){return e%2===0}function BM(e,t){if(ge(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],s=t[t.length-1];if(n===s)return!0;if(PM(n)&&PM(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&PM(e[0])&&PM(t[0])}let WM,VM;function UM(e){if(null==WM){const t=XO(e);WM=t.getParameter(t.MAX_TEXTURE_SIZE)}return WM}function GM(){WM=null}function HM(){VM=null}function jM(e){if(null==VM){const t=XO(e);VM=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,VM)}function qM(e){if(0===e)return 0;let t;const n=XO(e);return t=KM(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:KM(n,"EXT_disjoint_timer_query")?1:0,t}function KM(e,t){return null!=e.getExtension(t)}function XM(e){try{if(null!=XO(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function YM(e){if(0===e)return!1;const t=XO(e);if(1===e){if(!KM(t,"OES_texture_float"))return!1}else if(!KM(t,"EXT_color_buffer_float"))return!1;return ZM(t)}function JM(e){if(0===e)return!1;const t=XO(e);if(1!==e){if(KM(t,"EXT_color_buffer_float"))return ZM(t);const e="EXT_color_buffer_half_float";if(KM(t,e)){const n=t.getExtension(e);return function(e,t){const n=nM(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!KM(t,"OES_texture_float"))return!1;if(!KM(t,"WEBGL_color_buffer_float"))return!1;return ZM(t)}function ZM(e){const t=nM(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function QM(e){if(2!==e)return!1;return null!=XO(e).fenceSync}function eL(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ce("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const tL=Qe();function nL(){let e,t,n,s,r,a,i,o,l,u;return 2===Qe().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o=Qe().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function sL(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const s=Pe(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function rL(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const s=Pe(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / outShapeStrides[${r}]`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function aL(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let a=n-3;a>=0;--a)r[a]=`(${r[a+1]} * ${s[a+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${s[r]}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}function iL(e){const t=Pe(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}tL.registerFlag("HAS_WEBGL",(()=>tL.getNumber("WEBGL_VERSION")>0)),tL.registerFlag("WEBGL_VERSION",(()=>XM(2)?2:XM(1)?1:0)),tL.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),tL.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===tL.get("WEBGL_VERSION"))),tL.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),tL.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),tL.registerFlag("WEBGL_PACK",(()=>tL.getBool("HAS_WEBGL"))),tL.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_CLIP",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_REDUCE",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_LAZILY_UNPACK",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_CONV_IM2COL",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",(()=>tL.getBool("WEBGL_PACK"))),tL.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>UM(tL.getNumber("WEBGL_VERSION")))),tL.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>jM(tL.getNumber("WEBGL_VERSION")))),tL.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=tL.getNumber("WEBGL_VERSION");return 0===e?0:qM(e)})),tL.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>tL.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!ja())),tL.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>YM(tL.getNumber("WEBGL_VERSION")))),tL.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!tL.getBool("WEBGL_FORCE_F16_TEXTURES")&&tL.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),tL.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>JM(tL.getNumber("WEBGL_VERSION")))),tL.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>QM(tL.getNumber("WEBGL_VERSION")))),tL.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>tL.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),tL.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if("number"!==typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),tL.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>ja()?1:-1),(e=>{if("number"!==typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),tL.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),tL.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),tL.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),tL.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),tL.registerFlag("WEBGL_EXP_CONV",(()=>!1)),tL.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>tL.getBool("IS_TEST"))),tL.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),tL.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),tL.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),tL.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const oL="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:lL}=y;function uL(e,t,n){const s=[];if(e.forEach((e=>{const t=pe(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=wL(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3?arguments[3]:void 0,r="";r+=n?hL(e,s):cL(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=lL(e.shapeInfo.logicalShape,t.logicalShape),l=xL(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let d="";d=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let p="return outputValue;";const f=1===pe(e.shapeInfo.logicalShape),m=pe(t.logicalShape),g=1===m;if(1!==a||f||g){if(f&&!g)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?p="return vec4(outputValue.x);":o.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&ge(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=xL(l),c=lL(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${p[e+h]} = 0;`)).join("\n");let f="";f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(e,t));return r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=nL(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){const t=`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${dL}\n    ${pL}\n    ${fL}\n  `;return t}(o);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return gL();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(ge(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let u=2;u<e.length-1;u++)i*=e[e.length-u-1],o=`\n      int b${u} = index / ${i};\n      index -= b${u} * ${i};\n    `+o,l=`b${u}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return gL();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(ge(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${rL(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=sL(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${rL(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=sL(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=sL(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=sL(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=mL);return[h,l,c,r,u,a,n.userCode].join("\n")}function cL(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=yL(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${bL(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=yL(n);if(1===i)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&ge(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=Se(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${cL(vL(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${kL(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${bL(e)}\n      }\n    `;const u=a[0],c=a[1],h=yL(s);if(1===c)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(t)return`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=Se(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${cL(vL(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${kL(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${bL(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===i&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=yL(s);if(t)return`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `;return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=Se(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${cL(vL(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${kL(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${bL(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=yL(s);if(t)return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `;return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=Se(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${cL(vL(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${kL(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${bL(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=yL(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=Se(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${cL(vL(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${kL(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${bL(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=yL(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function hL(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=nL();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=nL();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=nL();if(null!=a&&ge(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${hL(vL(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${kL(a,s)});\n        }\n      `}const o=nL();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=nL();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let d=h*Math.ceil(a[i-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let m=2;m<i-1;m++)p=`int b${m}, `+p,d*=a[i-m-1],f=`b${m} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const dL="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",pL="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fL="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mL="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function gL(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function yL(e){return`offset${e}`}function bL(e){const t=e.name,n=pe(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function xL(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function wL(e,t,n){const{newShape:s,keptDims:r}=Se(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!ge(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function vL(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function kL(e,t){return t.map((t=>e[t])).join(", ")}function IL(e,t,n){const s=[],r=[];let a,i,o,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===Qe().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const r={name:h,uniform:e.getUniformLocation(n,h,c),offset:e.getUniformLocation(n,`offset${h}`,c)};t.enableShapeUniforms&&(r.shape=e.getUniformLocation(n,`${h}Shape`,c),r.texShape=e.getUniformLocation(n,`${h}TexShape`,c)),s.push(r)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),o=e.getUniformLocation(n,"outShapeStrides",c),i=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(e.getUniformLocation(n,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}}function NL(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!ge(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!ge(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function SL(e){return Qe().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class TL{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=YO.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=nL();this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?rL(["r","c","d"],e):sL(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class CL{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=YO.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=nL();this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?rL(["r","c","d"],e):sL(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class $L{constructor(e){this.variableNames=["A"],this.outTexUsage=JO.DOWNLOAD;const t=nL();this.outputShape=e,this.userCode=`\n      ${oL}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class EL{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=JO.DOWNLOAD;const t=nL();this.outputShape=e,this.userCode=`\n      ${oL}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const AL={R:0,G:1,B:2,A:3};class RL{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"RGBA";this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=nL();this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let a="";for(let i=0;i<n.length;i++){const e=n[i];a+=`\n          if(offset == ${i}) {\n            result = values[${AL[e]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iL(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${a}\n        }\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class FL{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=nL();this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let t=0;t<=1;t++){const r=2*a+t;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${t};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iL(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function DL(e){const t=nL();return uM(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function _L(e){return gM(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function OL(e){return yM(e,new Uint16Array([0,1,2,2,1,3]))}function ML(e,t,n,s,r,a){wM(t,n);const i=xM(e),o=e.TEXTURE_2D;return sM(e,(()=>e.bindTexture(o,i))),sM(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),sM(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),sM(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),sM(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===Qe().getNumber("WEBGL_VERSION")?sM(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))):sM(e,(()=>e.texStorage2D(o,1,s,t,n))),sM(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function LL(e){return e.internalFormatFloat}function zL(e,t,n,s){const[r,a]=QO(t,n);return ML(e,r,a,LL(s),s.textureFormatFloat,e.FLOAT)}function PL(e){return e.internalFormatHalfFloat}function BL(e,t,n,s){const[r,a]=QO(t,n);return ML(e,r,a,PL(s),s.textureFormatFloat,s.textureTypeHalfFloat)}function WL(e){return e.downloadTextureFormat}function VL(e,t,n,s){const[r,a]=QO(t,n);return ML(e,r,a,WL(s),e.RGBA,e.UNSIGNED_BYTE)}function UL(e){return e.internalFormatPackedFloat}function GL(e,t,n,s){const[r,a]=tM(t,n);return ML(e,r,a,UL(s),e.RGBA,e.FLOAT)}function HL(e){return e.internalFormatPackedHalfFloat}function jL(e,t,n,s){const[r,a]=tM(t,n);return ML(e,r,a,HL(s),e.RGBA,s.textureTypeHalfFloat)}function qL(e,t,n){sM(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n)));return kM(e,t,"clipSpacePos",n,3,20,0)&&kM(e,t,"uv",n,2,20,12)}function KL(e,t,n,s,r,a){let i,o,l;sM(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===Qe().getNumber("WEBGL_VERSION")?sM(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i))):sM(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),sM(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function XL(e,t,n){sM(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===Qe().getNumber("WEBGL_VERSION")?sM(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):sM(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===Qe().getNumber("WEBGL_VERSION")?sM(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):sM(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),sM(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function YL(e,t,n,s){const r=e.createBuffer();sM(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return sM(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),sM(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),sM(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}function JL(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}function ZL(e,t,n,s){const[r,a]=QO(t,n),i=new Uint8Array(t*n*4);return sM(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}function QL(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=tM(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function ez(e,t,n){const s=new Float32Array(t*n*4);return sM(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}class tz{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=Qe().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,KO(t,e)):this.gl=XO(t),e=this.gl,2===Qe().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>sM(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>sM(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>sM(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>sM(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>sM(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>sM(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>sM(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>sM(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===Qe().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=lM(this.gl,e),KM(this.gl,t))this.textureHalfFloatExtension=lM(this.gl,t);else if(Qe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),KM(this.gl,s))this.colorBufferHalfFloatExtension=lM(this.gl,s);else if(Qe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",KM(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!KM(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=_L(this.gl),this.indexBuffer=OL(this.gl),this.framebuffer=vM(this.gl),this.textureConfig=nM(this.gl,this.textureHalfFloatExtension)}get debug(){return Qe().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;sM(e,(()=>e.finish())),sM(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),sM(e,(()=>e.deleteFramebuffer(this.framebuffer))),sM(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),sM(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),sM(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),zL(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),BL(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),VL(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),XL(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),KL(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),jL(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),GL(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(AM(this.gl,this.framebuffer),this.outputTexture=null),sM(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>ZL(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return QL(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return JL(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=YL(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Qe().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>ez(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=DL(t));const n=pM(t);sM(t,(()=>t.attachShader(n,this.vertexShader))),sM(t,(()=>t.attachShader(n,e))),fM(t,n);const s=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&mM(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;sM(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),qL(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(sM(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&mM(this.gl,this.program),sM(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.throwIfDisposed(),n?SM(this.gl,e,t):TM(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),sM(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),CM(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=tM(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&mM(this.gl,this.program),RM(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}sM(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),sM(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=lM(this.gl,2===Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await ke((()=>this.disposed||this.isQueryAvailable(e,Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in Qe().platform&&(n=Qe().platform.setTimeoutCustom.bind(Qe().platform)),ke((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),EM(this.gl,e,this.framebuffer),this.debug&&RM(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(EM(this.gl,this.outputTexture,this.framebuffer),this.debug&&RM(this.gl)):AM(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;EM(s,e,this.framebuffer),this.debug&&RM(s),this.outputTexture=e,sM(s,(()=>s.viewport(0,0,t,n))),sM(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),sM(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:nz,bincountImpl:sz,bincountReduceImpl:rz,bitwiseAndImpl:az,castImpl:iz,ceilImpl:oz,concatImpl:lz,equalImpl:uz,expImpl:cz,expm1Impl:hz,floorImpl:dz,gatherNdImpl:pz,gatherV2Impl:fz,greaterImpl:mz,greaterEqualImpl:gz,lessImpl:yz,lessEqualImpl:bz,linSpaceImpl:xz,logImpl:wz,maxImpl:vz,maximumImpl:kz,minimumImpl:Iz,multiplyImpl:Nz,negImpl:Sz,notEqualImpl:Tz,prodImpl:Cz,raggedGatherImpl:$z,raggedRangeImpl:Ez,raggedTensorToTensorImpl:Az,rangeImpl:Rz,rsqrtImpl:Fz,scatterImpl:Dz,sigmoidImpl:_z,simpleAbsImpl:Oz,sliceImpl:Mz,sparseFillEmptyRowsImpl:Lz,sparseReshapeImpl:zz,sparseSegmentReductionImpl:Pz,sqrtImpl:Bz,staticRegexReplaceImpl:Wz,stridedSliceImpl:Vz,stringNGramsImpl:Uz,stringSplitImpl:Gz,stringToHashBucketFastImpl:Hz,subImpl:jz,tileImpl:qz,topKImpl:Kz,transposeImpl:Xz,uniqueImpl:Yz}=j;function Jz(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function Zz(e,t){return 1===t?[e]:Jz(e,t)}class Qz{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=SL(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Zz("rc",this.rank),t=xL(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class eP{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length);let n="";for(let a=0;a<4;a++){let e="thisRC = rc;";a%2===1&&(e+="thisRC.z += 1;"),a>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${a>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${a}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${a>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?aL(["r","c","d"],"inputShape"):sL(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iL(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class tP{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const s=sP(t,n),r=rP(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=nP(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].pop();return this.usedTextures[r].push(e),e}let i;return s===ZO.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===ZO.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===ZO.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===ZO.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===ZO.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=sP(n,s),a=rP(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=nP(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=Qe().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function nP(e,t,n,s,r){const a=function(e,t){switch(e){case ZO.PACKED_2X2_FLOAT32:return UL(t);case ZO.PACKED_2X2_FLOAT16:return HL(t);case ZO.UNPACKED_FLOAT32:return LL(t);case ZO.UNPACKED_FLOAT16:return PL(t);case ZO.PACKED_4X1_UNSIGNED_BYTE:return WL(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=tM(e[0],e[1]);i=t*n}else{const[t,n]=QO(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function sP(e,t){if(e===JO.UPLOAD)return ZO.PACKED_2X2_FLOAT32;if(e===JO.RENDER||null==e)return function(e){return Qe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?ZO.PACKED_2X2_FLOAT32:ZO.UNPACKED_FLOAT32:e?ZO.PACKED_2X2_FLOAT16:ZO.UNPACKED_FLOAT16}(t);if(e===JO.DOWNLOAD||e===JO.PIXELS)return ZO.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function rP(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class aP{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const iP="if (isnan(x)) return x;",oP="return x;",lP="return abs(x);";const uP="return (x >= 0.0) ? x : (exp(x) - 1.0);",cP=iP+"\n  return (x < 0.0) ? 0.0 : x;\n",hP=iP+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",dP="return x;",pP="return 1.0 / (1.0 + exp(-1.0 * x));",fP="return x;",mP="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",gP="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",yP="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",bP="return 1.0 / (1.0 + exp(-1.0 * x));";class xP{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class wP{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length);const t=e.length,n=Zz("rc",t),s=xL(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const vP=Cp,kP={};const IP=Qe().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class NP extends ee{nextDataId(){return NP.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Qe().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof tz)t=e;else{const n=XO(Qe().getNumber("WEBGL_VERSION"),e);t=new tz(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=XO(Qe().getNumber("WEBGL_VERSION"));t=new tz(e),this.binaryCache=((n=Qe().getNumber("WEBGL_VERSION"))in kP||(kP[n]={}),kP[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new tP(this.gpgpu),this.numMBBeforeWarning=null==Qe().global.screen?1024:Qe().global.screen.height*Qe().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Q(this,di())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,r,a){const i=this.makeTensorInfo(t,n),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[s,r]},o.texShape=[s,r];const l=LM(t),u=new RL(l,!1,a),c=this.runWebGLProgram(u,[i],n,[[s,r]]);return c.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,t,n){if((Qe().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Qe().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:JO.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(Qe().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:JO.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new xP(i,dP):new aP(i,dP);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Qr()),"complex64"===s){c=Sm(this.readSync(r.real.dataId),this.readSync(r.imag.dataId))}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Qr()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new xP(s,dP):new aP(s,dP);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(Qe().getBool("DEBUG")&&!Qe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Qe().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&Qe().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...eM(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=Sm(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=pe(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;sM(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&di().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new xP(r,dP):new aP(r,dP);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=di().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>na(e)));return Ro(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ro(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!iM(n)){if(Qe().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=pe(t);if(Qe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...eM(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=Qe().getBool("WEBGL_PACK")&&!0===s,i=a?LM(t):t,o=a?new EL(i):new $L(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=ra(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=ra(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=oe(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Qr(),endMs:null}}endTimer(e){return Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Qr(),e)}async getQueryTime(e){if(Qe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:IP;return Qe().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&pe(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Ir("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return vP(e.shape,t)}packedUnaryOp(e,t,n){const s=new xP(e.shape,t),r=this.compileAndRun(s,[e],n);return di().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Oz(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Qe().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,lP,e.dtype);const t=new aP(e.shape,lP),n=this.compileAndRun(t,[e]);return di().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&De(n[0])){const r=n.map((e=>ta(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return di().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new wP(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Qz(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[OM(e.shape),...MM(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[OM(t),...MM(t)],a=new eP(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;if(null!=t){ce(pe(r)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=LM(r);let o;o=s?new CL(i):new TL(i);const l=[null!=t?t:eM(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a=arguments.length>5?arguments[5]:void 0;const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===YO.DENSE){const t=null!=a?a:eM(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===pe(i.shape))return o.values=Te(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&pe(t.shape)<=Qe().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!==!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!BM(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=wL(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=Pe(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const d=t.shape.length,p=2===o.length&&ge(t.shape,a),f=1===pe(t.shape),m=cl(t.shape,n.shape),g=!e.packedInputs&&d===n.shape.length&&ge(a,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${d}_${g}_${i?l:""}_${o.length}_${f}_${m}_${p}_${u}_${c}_${h}_${y}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${Qe().getNumber("WEBGL_VERSION")}`,a}(e,u,c),d=this.getAndSaveBinary(h,(()=>function(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=uL(r,i,t),l=cM(e.gl,o),u=e.createProgram(l);return Qe().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i},IL(e,t,u)))}(this.gpgpu,e,u,c))),p=null!=this.activeTimers;let f;p&&(f=this.startTimer()),Qe().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(NL(t.inShapeInfos,n),NL([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===Qe().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<n.length;++l){const s=n[l],{uniform:r,offset:a,shape:i,texShape:o}=t.variablesLocations[l];if(i){const{uniformShape:n}=wL(t.program.packedInputs,s.shape,s.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(i,new Int32Array(n));break;case 2:e.gl.uniform2iv(i,new Int32Array(n));break;case 3:e.gl.uniform3iv(i,new Int32Array(n));break;case 4:e.gl.uniform4iv(i,new Int32Array(n))}}if(o&&e.gl.uniform2i(o,s.texData.texShape[0],s.texData.texShape[1]),null!=r)if(s.isUniform)if(pe(s.shape)<2)e.gl.uniform1f(r,s.uniformValues[0]);else{let t=s.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=s.texData.slice&&null!=a&&e.gl.uniform1i(a,s.texData.slice.flatOffset),e.setInputMatrixTexture(s.texData.texture.texture,r,l)}const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=Pe(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const n=t.program.customUniforms[l],s=t.customUniformLocations[l],a=r[l];if("float"===n.type)e.gl.uniform1fv(s,a);else if("vec2"===n.type)e.gl.uniform2fv(s,a);else if("vec3"===n.type)e.gl.uniform3fv(s,a);else if("vec4"===n.type)e.gl.uniform4fv(s,a);else if("int"===n.type)e.gl.uniform1iv(s,a);else if("ivec2"===n.type)e.gl.uniform2iv(s,a);else if("ivec3"===n.type)e.gl.uniform3iv(s,a);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,a)}}e.executeProgram()}(this.gpgpu,d,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=Qe().getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Qr();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!Qe().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s){let r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Qe().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!==typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=mi((()=>{if(!Qe().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Qe().getBool("DEBUG");Qe().set("DEBUG",!1);const t=this.abs(Xo(1e-8)).dataSync()[0];if(Qe().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Qr());let c=t.texShape;if(null==c&&(c=zM(n,o),t.texShape=c),null!=r){const e=LM(n);let a,i=c[1],h=c[0];const d=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&d||([i,h]=tM(c[0],c[1])),a=o?new FL(e,d):new RL(e,d);const p=d?[h,i]:c,f=this.makeTensorInfo(p,s),m=this.texData.get(f.dataId);m.usage=d?JO.PIXELS:JO.UPLOAD,m.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,r);const g=[[h,i]],y=!0,b=this.runWebGLProgram(a,[f],s,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,Qe().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=Qr()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*Re(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(n){throw n}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await tm(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw dM(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}=IL(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.outShapeLocation=a,e.outShapeStridesLocation=i,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:s,height:r,width:a,channels:i}=e,o=di().backend;if(!o.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=o.writeTexture(s,t,n,r,a,i);return di().makeTensorFromDataId(l,t,n,o)}}NP.nextDataId=0;const SP="4.22.0";function TP(){Qe().set("WEBGL_FORCE_F16_TEXTURES",!0)}qa()&&Si("webgl",(()=>new NP),2);const CP={forceHalfFloat:TP},$P="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class EP{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=dl(t,n),this.enableShapeUniforms=SL(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const AP="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class RP{constructor(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=dl(t,n);const r=this.outputShape.length;this.enableShapeUniforms=SL(r);let a="";if(s)if(0===r||1===pe(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${xL(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Zz("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function FP(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const DP={kernelName:vn,backendName:"webgl",kernelFunc:FP};function _P(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=FP({inputs:{x:s},backend:n}),l=FP({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const OP={kernelName:Rt,backendName:"webgl",kernelFunc:_P},MP="return (a < 0.) ? b * a : a;",LP="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const zP={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",Jr(a,"float32")),o=Qe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new RP(LP,r.shape,i.shape):new EP(MP,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},PP="return (a < 0.) ? b * a : a;",BP="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const WP={kernelName:ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=Qe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new RP(BP,s.shape,r.shape):new EP(PP,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}},VP="if (isnan(x)) return x;";function UP(e){let{opSnippet:t,packedOpSnippet:n,cpuKernelImpl:s,dtype:r}=e;return e=>{let{inputs:a,backend:i}=e;const{x:o}=a,l=i,u=r||o.dtype;if(l.shouldExecuteOnCPU([o])&&null!=s){const e=l.texData.get(o.dataId),t=s(e.values,u);return l.makeTensorInfo(o.shape,u,t)}let c;return c=Qe().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=n?new xP(o.shape,n):new aP(o.shape,t),l.runWebGLProgram(c,[o],u)}}function GP(e){let{opSnippet:t,packedOpSnippet:n,checkOutOfBounds:s=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:i}=e;return e=>{let{inputs:o,backend:l}=e;const{a:u,b:c}=o,h=l;if(r&&"complex64"===u.dtype){const e=h.texData.get(u.dataId),n=h.texData.get(c.dataId),[s,r]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((e=>{const[n,s]=e,r={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:s.dataId,dtype:s.dtype,shape:c.shape},i=new EP(t,u.shape,c.shape);return h.runWebGLProgram(i,[r,a],Ea(n.dtype,s.dtype))})),a=_P({inputs:{real:s,imag:r},backend:h});return h.disposeIntermediateTensorInfo(s),h.disposeIntermediateTensorInfo(r),a}const d=i||Ea(u.dtype,c.dtype);if(("string"===u.dtype||"string"===c.dtype||h.shouldExecuteOnCPU([u,c]))&&null!=a){const e=h.texData.get(u.dataId).values,t=h.texData.get(c.dataId).values,n="string"===u.dtype?ag(e):e,s="string"===u.dtype?ag(t):t,[r,i]=a(u.shape,c.shape,n,s,d),o=h.makeTensorInfo(i,d);return h.texData.get(o.dataId).values=r,o}let p;return p=Qe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=n?new RP(n,u.shape,c.shape,s):new EP(t,u.shape,c.shape),h.runWebGLProgram(p,[u,c],d)}}function HP(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("linear"===e)return t?fP:oP;if("relu"===e)return t?gP:cP;if("elu"===e)return t?mP:uP;if("relu6"===e)return t?yP:hP;if("prelu"===e)return t?BP:PP;if("leakyrelu"===e)return t?LP:MP;if("sigmoid"===e)return t?bP:pP;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class jP{constructor(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a=arguments.length>5&&void 0!==arguments[5]&&arguments[5],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,o=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l=arguments.length>8&&void 0!==arguments[8]&&arguments[8];this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=SL(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",d=r?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${x};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const qP={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class KP{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=dl(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const XP="return a * b;";function YP(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Ea(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new KP(qP.REAL,s.shape,r.shape),i=new KP(qP.IMAG,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=_P({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=Nz(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=Qe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new RP(XP,s.shape,r.shape):new EP(XP,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const JP={kernelName:ts,backendName:"webgl",kernelFunc:YP};function ZP(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=pe(r.shape),l=Ie(a,o),u=pe(l);ce(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||BM(r.shape,l)||null!==c.texture&&BM(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[OM(e.shape),...MM(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[OM(t),...MM(t)],i=new eP(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const QP={kernelName:ks,backendName:"webgl",kernelFunc:ZP};class eB{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${ye(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class tB{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function nB(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=cm(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new eB({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new eB({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new tB({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class sB{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const s=xL(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<e.length;r++)s[e[r]]=n[r];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class rB{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let u=0;u<n.length;u++)n[u]=e[t[u]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=xL(this.rank),r=Jz("rc",this.rank),a=new Array(this.rank);for(let u=0;u<t.length;u++)a[t[u]]=r[u];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function aB(e,t,n){const s=Qe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new rB(e.shape,t):new sB(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function iB(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=Ne(r,e.shape);let o=i;const l=dh(o,a),u=null!=l;let c=e;u&&(c=aB(e,l,s),o=fh(o.length,a)),hh("sum",o,a);const[h,d]=uh(c.shape,o);let p=h;n&&(p=ch(h,i));const f=pe(d),m=ZP({inputs:{x:c},attrs:{shape:[pe(e.shape)/f,f]},backend:s}),g=nB(m,Aa(e.dtype),"sum",s),y=ZP({inputs:{x:g},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const oB={kernelName:Us,backendName:"webgl",kernelFunc:iB};function lB(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let c=0;c<l.length;c++)l[c]=r.shape[a[c]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=Xz(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=aB(r,a,i);return u}const uB={kernelName:hr,backendName:"webgl",kernelFunc:lB},cB=1e3;function hB(e){let{a:t,b:n,transposeA:s,transposeB:r,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:l=0,activation:u=null}=e;const c=t.shape.length,h=n.shape.length,d=s?t.shape[c-2]:t.shape[c-1],p=r?n.shape[h-1]:n.shape[h-2],f=s?t.shape[c-1]:t.shape[c-2],m=r?n.shape[h-2]:n.shape[h-1],g=t.shape.slice(0,-2),y=n.shape.slice(0,-2),b=pe(g),x=pe(y),w=dl(t.shape.slice(0,-2),n.shape.slice(0,-2)).concat([f,m]);ce(d===p,(()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${t.shape} and ${n.shape} and transposeA=${s} and transposeB=${r} must match.`));const v=s?[b,d,f]:[b,f,d],k=r?[x,m,p]:[x,p,m],I=ZP({inputs:{x:t},backend:a,attrs:{shape:v}}),N=ZP({inputs:{x:n},backend:a,attrs:{shape:k}}),S=[I,N],T=Math.max(b,x),C=s?I.shape[1]:I.shape[2],$=null!=i,E=null!=o,A="leakyrelu"===u,R=null!=u?HP(u,!0):null;let F;if((1===f||1===m)&&C>cB&&!1===($||E||A||null!=R)){let e=I,t=N;s&&(e=lB({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=lB({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),S.push(t));const n=1===m;let i=e;1!==m&&(i=ZP({inputs:{x:e},backend:a,attrs:{shape:[T,C,1]}}),S.push(i));const o=1===m?2:1;let l=t;n&&(l=ZP({inputs:{x:t},backend:a,attrs:{shape:[T,1,C]}}),S.push(l));const u=YP({inputs:{a:i,b:l},backend:a});F=iB({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const e=Ea(t.dtype,n.dtype),u=new jP(v,k,[T,f,m],s,r,$,R,E,A),c=[I,N];if(null!=i&&c.push(i),E&&c.push(o),A){const e=a.makeTensorInfo([],"float32",Jr(l,"float32"));c.push(e),S.push(e)}F=a.runWebGLProgram(u,c,e)}const D=ZP({inputs:{x:F},backend:a,attrs:{shape:w}});S.push(F);for(const _ of S)a.disposeIntermediateTensorInfo(_);return D}const dB={kernelName:wr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return hB({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},pB="return abs(x);";const fB={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=Oz(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=Qe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new xP(s.shape,pB):new aP(s.shape,pB),n.runWebGLProgram(r,[s],s.dtype)}},mB=UP({opSnippet:iP+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),gB={kernelName:at,backendName:"webgl",kernelFunc:mB},yB=UP({opSnippet:iP+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),bB={kernelName:it,backendName:"webgl",kernelFunc:yB},xB="return a + b;",wB=GP({opSnippet:xB,packedOpSnippet:xB,supportsComplex:!0,cpuKernelImpl:nz}),vB={kernelName:ot,backendName:"webgl",kernelFunc:wB};class kB{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class IB{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const NB={kernelName:lt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return FP({inputs:{x:r[0]},backend:s});if(r.length>Qe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>Ea(e,t))),i=r.map((e=>e.shape)),o=Qe().getBool("WEBGL_PACK")?new IB(r[0].shape,i):new kB(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const SB={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Ne(a,r.shape);let u=l;const c=dh(u,o);let h=r;null!=c&&(h=lB({inputs:{x:r},backend:n,attrs:{perm:c}}),u=fh(u.length,o)),hh("all",u,o);const[d,p]=uh(h.shape,u),f=ZP({inputs:{x:h},backend:n,attrs:{shape:[-1,pe(p)]}}),m=nB(f,f.dtype,"all",n);let g;if(i){g=ZP({inputs:{x:m},backend:n,attrs:{shape:ch(d,l)}})}else g=ZP({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};const TB={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Ne(a,r.shape);let u=l;const c=dh(u,o);let h=r;null!=c&&(h=lB({inputs:{x:r},backend:n,attrs:{perm:c}}),u=fh(u.length,o)),hh("any",u,o);const[d,p]=uh(h.shape,u),f=ZP({inputs:{x:h},backend:n,attrs:{shape:[-1,pe(p)]}}),m=nB(f,f.dtype,"any",n);let g;if(i){g=ZP({inputs:{x:m},backend:n,attrs:{shape:ch(d,l)}})}else g=ZP({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class CB{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class $B{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ce(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=xL(o),u=Zz("coords",o);let c,h;if(1===a){h=o+1;const e=xL(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map((e=>"int "+e)),m=Zz("sourceLocR",h-1).concat("inIdx.r"),g=Zz("sourceLocG",h-1).concat("inIdx.g"),y=Zz("sourceLocB",h-1).concat("inIdx.b"),b=Zz("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function EB(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=cm(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new CB(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=EB(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function AB(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const r=null!=s?s.shape:t.shape,a=cm(r[r.length-1]),i=new $B(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=AB(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function RB(e,t,n,s){const r=[n];if(hh("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!Qe().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=uh(i.shape,r),u=pe(l),c=ZP({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=EB(e,c,s);n.push(h);const d=ZP({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return AB(e,t,s)}const FB={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Ne(a,r.shape);const o=dh(i,r.shape.length);let l=r;const u=[];null!=o&&(l=lB({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=fh(i.length,l.shape.length)),hh("argMax",[i[0]],l.shape.length);const c=RB(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const DB={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Ne(a,r.shape);const o=dh(i,r.shape.length);let l=r;const u=[];null!=o&&(l=lB({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=fh(i.length,l.shape.length)),hh("argMin",[i[0]],l.shape.length);const c=RB(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},_B=UP({opSnippet:iP+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),OB={kernelName:pt,backendName:"webgl",kernelFunc:_B},MB=UP({opSnippet:iP+"return log(x + sqrt(x * x + 1.0));"}),LB={kernelName:ft,backendName:"webgl",kernelFunc:MB},zB=UP({opSnippet:iP+"\n  return atan(x);\n"}),PB={kernelName:mt,backendName:"webgl",kernelFunc:zB},BB=GP({opSnippet:$P+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+AP+"\n  return result;\n"}),WB={kernelName:yt,backendName:"webgl",kernelFunc:BB},VB=UP({opSnippet:iP+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),UB={kernelName:gt,backendName:"webgl",kernelFunc:VB};class GB{constructor(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class HB{constructor(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / max(count, 1.0)");const v=4*Math.floor(a/4),k=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n        }\n        setOutput(${w});\n      }\n    `}}const jB={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;eL(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;ce(cc(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ec(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&ge(u.inShape,u.outShape))return FP({inputs:{x:r},backend:n});const c=new GB(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const qB={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=tc(r.shape,a,i,[1,1,1],o,l,u),h=new HB(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class KB{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class XB{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const YB={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=tc(i.shape,o,l,[1,1,1],u,c),d=new XB(h);return n.runWebGLProgram(d,[r],i.dtype)}};const JB={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;eL([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=ec(i.shape,o,l,1,u),h=new KB(c);return n.runWebGLProgram(h,[r],i.dtype)}};const ZB={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return hB({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class QB{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],dl(e,t),dl(e,n);let i="0.0";null!=s&&(dl(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(dl(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class eW{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],dl(e,t),dl(e,n);let i="vec4(0.0)";null!=s&&(dl(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(dl(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const tW={kernelName:gn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:s}=e;const{x:r,mean:a,variance:i,offset:o,scale:l}=t;ce(a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ce(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ce(null==l||a.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=[r,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let d=null;null!=l&&(d=l.shape,c.push(l));const p=Qe().getBool("WEBGL_PACK_NORMALIZATION")?new eW(r.shape,a.shape,i.shape,h,d,u):new QB(r.shape,a.shape,i.shape,h,d,u);return n.runWebGLProgram(p,c,c[0].dtype)}};class nW{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=xL(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return sW.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${sW[t]} = start[${t}] + coords.${sW[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const sW=["x","y","z","w","u","v"];class rW{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=xL(this.rank),n=Zz("coords",this.rank),s=Zz("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function aW(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=ku(r,a,i);if(lu(r,o,l),0===pe(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=Mz(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=wu(r.shape,o,l);if(u||!c){const e=Qe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new rW(l):new nW(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=vu(t,Pe(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const iW={kernelName:Ms,backendName:"webgl",kernelFunc:aW},oW={kernelName:It,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;ce(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=dm(r.shape,a,o),u=pm(l.length,a.length),c=fm(r.shape,a,o),h=mm(i,a.length),d=gm(c,i,a.length),p=[],f=ZP({inputs:{x:r},backend:n,attrs:{shape:l}}),m=lB({inputs:{x:f},backend:n,attrs:{perm:u}}),g=ZP({inputs:{x:m},backend:n,attrs:{shape:c}}),y=aW({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const lW={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=sz(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}};const uW={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Qe().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=Qe().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([s,r])||1===i){const e=n.texData.get(s.dataId).values,t=n.texData.get(r.dataId).values,[a,i]=az(s.shape,r.shape,e,t,s.dtype),o=n.makeTensorInfo(i,s.dtype);return n.texData.get(o.dataId).values=a,o}let o;return o=a?new RP("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new EP("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),n.runWebGLProgram(o,[s,r],s.dtype)}};const cW={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=dl(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},hW=GP({opSnippet:"return float(a != b);",cpuKernelImpl:Tz,dtype:"bool"}),dW={kernelName:ss,backendName:"webgl",kernelFunc:hW};function pW(e){const{inputs:t,backend:n}=e,{input:s}=t;return FP({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const fW={kernelName:xs,backendName:"webgl",kernelFunc:pW},mW="return float(int(x));";const gW={kernelName:$t,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return FP({inputs:{x:a},backend:s});const t=td(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=_P({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=pW({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!Ae(a.dtype,i)){const e=FP({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(s.shouldExecuteOnCPU([a])){const e=s.texData.get(a.dataId).values,[t,n,r]=iz(e,a.shape,a.dtype,i);return s.makeTensorInfo(t,n,r)}if("int32"===i)return function(e,t){const n=new aP(e.shape,mW),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",Te("bool",1)),t=hW({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},yW="return ceil(x);",bW=UP({opSnippet:yW,packedOpSnippet:yW,cpuKernelImpl:oz}),xW={kernelName:Et,backendName:"webgl",kernelFunc:bW};class wW{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class vW{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const kW={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=Qe().getBool("WEBGL_PACK_CLIP")?new vW(r.shape):new wW(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class IW{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function NW(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const SW={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new IW(s.shape),i=[NW(s,r.complexTensorInfos.real),NW(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class TW{constructor(e){this.outputShape=[],this.outputShape=sm(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let a=1;a<t.length;a++)t[a]=t[a-1]+e[a][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<t.length;a++){const e=t[a-1];n.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${e}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class CW{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=sm(e,t);const n=this.outputShape,s=n.length,r=xL(s),a=Zz("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let f=1;f<o.length;f++)o[f]=o[f-1]+e[f][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let f=1;f<o.length;f++){const e=o[f-1];h+=`\n        if (${l} < ${o[f]}  && ${l} >= ${o[f-1]}) {\n          return getChannel(\n            getT${f}(${$W(i,l,e)}),\n            vec2(${$W(u,l,e)}));\n        }`}const d=o.length,p=o[o.length-1];h+=`\n        return getChannel(\n          getT${d}(${$W(i,l,p)}),\n          vec2(${$W(u,l,p)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function $W(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function EW(e){const{inputs:t,backend:n}=e,{input:s}=t;return FP({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const AW={kernelName:In,backendName:"webgl",kernelFunc:EW};function RW(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>pW({inputs:{input:e},backend:n}))),r=e.map((e=>EW({inputs:{input:e},backend:n}))),a=RW(s,t,n),i=RW(r,t,n),o=_P({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=pe(e.shape.slice(t));return ZP({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=sm(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=lz(a,i,s,o),u=sm(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=e.filter((e=>pe(e.shape)>0)),i=Qe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=i?new aP(e[0].shape,dP):new xP(e[0].shape,dP);return n.runWebGLProgram(t,e,s)}const o=Qe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>o){const e=[];for(let r=0;r<a.length;r+=o){const s=a.slice(r,r+o);e.push(RW(s,t,n))}const s=RW(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return s}if(i){const e=new CW(a.map((e=>e.shape)),t);return n.runWebGLProgram(e,a,s)}const{tensors2D:l,outShape:u}=function(e,t,n){const s=sm(e.map((e=>e.shape)),t),r=e.map((e=>ZP({inputs:{x:e},attrs:{shape:[-1,pe(e.shape.slice(t))]},backend:n})));return{tensors2D:r,outShape:s}}(a,t,n),c=new TW(l.map((e=>e.shape))),h=n.runWebGLProgram(c,l,s);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));const d=ZP({inputs:{x:h},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(h),d}function FW(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Ne(r,t[0].shape)[0];nm(t.map((e=>e.shape)),a);const i=sm(t.map((e=>e.shape)),a);if(0===pe(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>pe(e.shape)>0));return 1===o.length?FP({inputs:{x:o[0]},backend:n}):RW(o,a,n)}const DW={kernelName:Dt,backendName:"webgl",kernelFunc:FW};class _W{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class OW{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class MW{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=SL(this.outputShape.length);const a=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<u;m++)h+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;h+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let m=0;m<u;m++)h+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(c+1)/2;m++){const t=2*m;if(h+=`\n           xC = xCCorner + ${t*o};\n           `,1===i){if(t<u&&(a%2===1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n               `,h+=1===o&&t>0?`\n                 xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                   } else {\n                     xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xC${t} = xTexelC${t};\n                 `,t+1<u)){const e=a%2===0?ae(o):o;o%2===0&&a%2===1||o%2!==0&&a%2!==1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                     xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${t+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${t+1}Ready = 1;\n                   }\n                   `,h+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                     } else {\n                      xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                     }\n                     `:`\n                     xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                     `):h+=1===e?`\n                     xC${t+1} = xTexelC${t};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                       xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${t+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${t+1}Ready = 1;\n                     }\n\n                     xC${t+1} = xTexelC${t+1};\n                     `}}else t<u&&(a%2===1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n               `,t+1<u&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(\n                   xTexelC${t}.xy, xTexelC${t+1}.xy);\n               `,t+1<u&&(h+=`\n                   xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                 `)));t<u&&(h+=`\n             wTexel = getW(r, ${t}, d1, d2);\n             dotProd += xC${t}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${t}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,t+1<u&&(h+=`\n               wTexel = getW(r, ${t+1}, d1, d2);\n               dotProd += xC${t+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${t+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let d="",p="";n&&(d=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,p="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${p}\n         setOutput(result);\n       }\n     `}}class LW{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=SL(this.outputShape.length);const{dataFormat:n}=t,s=nL(),r="channelsLast"===n,a=r?1:2,i=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let u=0;u<=1;u++)for(let e=0;e<=1;e++)l+=`\n          blockIndex = rc.z + ${e};\n          pos = rc.y + ${u};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*u+e}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*u+e}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function zW(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function PW(e){let{x:t,filter:n,convInfo:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}=e;const u=t.shape,c=r.texData.get(t.dataId),h=s.inChannels,d=u[0]*u[1]*u[2],p=s.outChannels,f="channelsLast"===s.dataFormat,m=!1;let g;const y=[];if(null!=i){const e=zW(i.shape,f);null!=e&&(i=ZP({inputs:{x:i},backend:r,attrs:{shape:e}}),y.push(i))}if(null!=a){const e=zW(a.shape,f);null!=e&&(a=ZP({inputs:{x:a},backend:r,attrs:{shape:e}}),y.push(a))}if(!((1===d||1===p)&&h>cB)&&c.isPacked&&f&&null!=c.texture&&u[2]%2!==0&&ge(c.shape.slice(-3),u.slice(-3))){const e=u[0]*u[1]*(u[2]+1),h={dataId:t.dataId,shape:[1,e,s.inChannels],dtype:t.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,ce(BM(c.shape,h.shape),(()=>`packed reshape ${c.shape} to ${h.shape} isn't free`));const p=ZP({inputs:{x:n},backend:r,attrs:{shape:[1,s.inChannels,s.outChannels]}});y.push(p);const f=hB({a:h,b:p,backend:r,transposeA:false,transposeB:m,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o}),b=r.texData.get(f.dataId);ce(b.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,b.shape=s.outShape,g=FP({inputs:{x:f},backend:r}),g.shape=s.outShape,y.push(f)}else{const e=s.outHeight*s.outWidth,u=ZP({inputs:{x:t},backend:r,attrs:{shape:f?[s.batchSize,e,s.inChannels]:[s.batchSize,s.inChannels,e]}}),c=ZP({inputs:{x:n},backend:r,attrs:{shape:[1,s.inChannels,s.outChannels]}}),h=hB({a:f?u:c,b:f?c:u,transposeA:!f,transposeB:m,backend:r,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o});g=ZP({inputs:{x:h},backend:r,attrs:{shape:s.outShape}}),y.push(u),y.push(c),y.push(h)}for(const b of y)r.disposeIntermediateTensorInfo(b);return g}function BW(e){let{x:t,filter:n,convInfo:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}=e;const{filterWidth:u,filterHeight:c,inChannels:h,outWidth:d,outHeight:p,dataFormat:f}=s,m="channelsLast"===f,g=u*c*h,y=p*d,b=[s.batchSize,g,y],x=[];if(null!=i){const e=zW(i.shape,m);null!=e&&(i=ZP({inputs:{x:i},backend:r,attrs:{shape:e}}),x.push(i))}if(null!=a){const e=zW(a.shape,m);null!=e&&(a=ZP({inputs:{x:a},backend:r,attrs:{shape:e}}),x.push(a))}const w=ZP({inputs:{x:n},backend:r,attrs:{shape:[1,g,pe(n.shape)/g]}});x.push(w);const v=new LW(b,s),k=[t.shape,[s.padInfo.top,s.padInfo.left],[s.strideHeight,s.strideWidth],[s.dilationHeight,s.dilationWidth],[s.inChannels],[s.filterWidth*s.inChannels],[s.outWidth]],I=r.runWebGLProgram(v,[t],"float32",k),N=ZP({inputs:{x:I},backend:r,attrs:{shape:b}});x.push(I),x.push(N);const S=null!=a,T=null!=i,C="leakyrelu"===l,$=l?HP(l,!0):null,E=new jP(m?N.shape:w.shape,m?w.shape:N.shape,m?[s.batchSize,y,s.outChannels]:[s.batchSize,s.outChannels,y],!0,!1,S,$,T,C),A=m?[N,w]:[w,N];if(a&&A.push(a),T&&A.push(i),C){const e=r.makeTensorInfo([],"float32",Jr(o,"float32"));A.push(e),x.push(e)}const R=r.runWebGLProgram(E,A,"float32"),F=ZP({inputs:{x:R},backend:r,attrs:{shape:s.outShape}});x.push(R);for(const D of x)r.disposeIntermediateTensorInfo(D);return F}const WW={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=dc(l),d=nc(r.shape,a.shape,i,u,o,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&Qe().getBool("WEBGL_EXP_CONV")){const e=new MW(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(e,[r,a],"float32",t)}else if(Qe().getBool("WEBGL_CONV_IM2COL"))p=BW({x:r,filter:a,convInfo:d,backend:n});else{const e=new _W(d);p=n.runWebGLProgram(e,[r,a],"float32")}else p=PW({x:r,filter:a,convInfo:d,backend:n});const f=ZP({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class VW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class UW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class GW{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class HW{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const jW={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=dc(l),d=nc(r.shape,c,i,1,o,u,!1,h),p=new VW(d);return n.runWebGLProgram(p,[r,a],"float32")}};class qW{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=SL(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,s=t-1-e.padInfo.top,r=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${r});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const KW={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=dc(u),d=nc(i,a.shape,o,1,l,c,!1,h);if(Qe().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const e=[[d.strideHeight,d.strideWidth]],t=new qW(d);return n.runWebGLProgram(t,[r,a],"float32",e)}{const e=new UW(d);return n.runWebGLProgram(e,[r,a],"float32")}}};const XW={kernelName:Lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=sc(r.shape,a.shape,i,l,o),c=new OW(u);return n.runWebGLProgram(c,[r,a],"float32")}};const YW={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=sc(r.shape,l,i,1,o),c=new GW(u);return n.runWebGLProgram(c,[r,a],"float32")}};const JW={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=sc(l,a.shape,o,1,i),c=new HW(u);return n.runWebGLProgram(c,[r,a],"float32")}},ZW=UP({opSnippet:VP+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${AP}\n  return result;\n`}),QW={kernelName:Bt,backendName:"webgl",kernelFunc:ZW},eV=UP({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),tV={kernelName:Wt,backendName:"webgl",kernelFunc:eV};class nV{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const sV={kernelName:Gt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new nV(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};var rV;!function(e){e.Prod="*",e.Sum="+"}(rV||(rV={}));class aV{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===rV.Prod?"1.0":"0.0",i=n?a:`getX(${iV(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${xL(r)} coords = getOutputCoords();\n        int end = ${oV(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${oV(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${iV(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function iV(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function oV(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function lV(e,t,n,s,r,a){const i=t.shape.length,o=dh([s],i);let l=t;null!=o&&(l=lB({inputs:{x:t},backend:n,attrs:{perm:o}}));const u=fh(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=FP({inputs:{x:l},backend:n});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const t=new aV(e,l.shape,!1,a),s=[[d]],r=h;h=n.runWebGLProgram(t,[h],h.dtype,s),n.disposeIntermediateTensorInfo(r)}if(r){const t=new aV(e,l.shape,r,a),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=o){const e=lB({inputs:{x:h},backend:n,attrs:{perm:ph(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const uV={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return lV(rV.Prod,r,n,a,i,o)}};const cV={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return lV(rV.Sum,r,n,a,i,o)}};const hV={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=sz(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=rz(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class dV{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const pV={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new dV("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class fV{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=SL(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class mV{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=SL(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let g=0;g<c;g++)d+=`\n          vec4 xTexelC${2*g};\n          int xTexelC${2*g}Ready;\n          vec4 xTexelC${2*g+1};\n          int xTexelC${2*g+1}Ready;\n          vec4 xC${g};`;d+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let g=0;g<c;g++)d+=`\n          xTexelC${2*g} = vec4(0.0);\n          xTexelC${2*g}Ready = 0;\n          xTexelC${2*g+1} = vec4(0.0);\n          xTexelC${2*g+1}Ready = 0;\n          xC${g} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let g=0;g<(h+1)/2;g++){const e=2*g;if(d+=`\n          xC = xCCorner + ${e*l};\n          `,1===o){if(e<c&&(i%2===1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n              `,d+=1===l&&e>0?`\n                xC${e} = vec4(xTexelC${e-2}.zw, xTexelC${e}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${e} = vec4(previous.zw, xTexelC${e}.xy);\n                  } else {\n                    xC${e} = vec4(0.0, 0.0, xTexelC${e}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xC${e} = xTexelC${e};\n                `,e+1<c)){const t=i%2===0?ae(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${t};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                    xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${e+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${e+1}Ready = 1;\n                  }\n                  `,d+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${e+1} = vec4(previous.zw, xTexelC${e+1}.xy);\n                    } else {\n                     xC${e+1} = vec4(0.0, 0.0, xTexelC${e+1}.xy);\n                    }\n                    `:`\n                    xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.xy);\n                    `):d+=1===t?`\n                    xC${e+1} = xTexelC${e};\n                    `:`\n                    xCOffset = xC + ${t};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                      xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${e+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${e+1}Ready = 1;\n                    }\n\n                    xC${e+1} = xTexelC${e+1};\n                    `}}else e<c&&(i%2===1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n              `,e+1<c&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${e+1} = vec4(xTexelC${e+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(\n                  xTexelC${e}.xy, xTexelC${e+1}.xy);\n              `,e+1<c&&(d+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n                `)));e<c&&(d+=`\n            wTexel = getW(r, ${e}, d1, q);\n            dotProd += xC${e} * vec4(wTexel.xz, wTexel.xz);\n          `,e+1<c&&(d+=`\n              wTexel = getW(r, ${e+1}, d1, q);\n              dotProd += xC${e+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let p="",f="";n&&(p=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${p}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const gV={kernelName:qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),ce(cc(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=nc(r.shape,a.shape,i,c,o,u,!0);let d;d=Qe().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels===1?new mV(h):new fV(h);const p=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(d,[r,a],"float32",p)}};class yV{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bV{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xV={kernelName:Kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=nc(r.shape,c,i,o,l,u,!0),d=new yV(h);return n.runWebGLProgram(d,[r,a],"float32")}};const wV={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=nc(c,a.shape,i,o,l,u,!0),d=new bV(h);return n.runWebGLProgram(d,[r,a],"float32")}};class vV{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const kV={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=pe(s.shape),i=ZP({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new vV(a),l=n.runWebGLProgram(o,[i],i.dtype),u=ZP({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class IV{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const NV={kernelName:Jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Qu(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new IV(u);c=n.runWebGLProgram(h,[r,a],"float32");const d=ZP({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}};const SV={kernelName:nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Lm(r,a.length);Pm(i.length,l,a);const{path:u,steps:c}=Bm(o,l),h=c.length;let d=null,p=i.length;const f=[];for(let m=0;m<h;++m){for(const e of c[m]){const{permutationIndices:t,expandDims:s}=zm(p,l[e]);let r;Wm(t)?r=a[e]:(r=lB({inputs:{x:a[e]},backend:n,attrs:{perm:t}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);ge(r.shape,i)||(r=ZP({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===d?d=r:(d=YP({inputs:{a:r,b:d},backend:n}),f.push(d))}m<h-1&&(u[m]>=0&&(d=iB({inputs:{x:d},backend:n,attrs:{axis:u[m]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const m of f)m!==d&&n.disposeIntermediateTensorInfo(m);return d}},TV=UP({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),CV={kernelName:sn,backendName:"webgl",kernelFunc:TV},$V={kernelName:rn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=Qe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new RP("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new EP("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},EV=GP({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:uz}),AV={kernelName:on,backendName:"webgl",kernelFunc:EV},RV=UP({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${xm};\n  float a1 = ${wm};\n  float a2 = ${vm};\n  float a3 = ${km};\n  float a4 = ${Im};\n  float a5 = ${Nm};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),FV={kernelName:an,backendName:"webgl",kernelFunc:RV},DV=UP({opSnippet:VP+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:cz,dtype:"float32"}),_V={kernelName:ln,backendName:"webgl",kernelFunc:DV};function OV(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(ce(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),ZP({inputs:{x:a},backend:s,attrs:{shape:o}})}const MV={kernelName:un,backendName:"webgl",kernelFunc:OV},LV="return exp(x) - 1.0;",zV=UP({opSnippet:LV,packedOpSnippet:LV,cpuKernelImpl:hz}),PV={kernelName:cn,backendName:"webgl",kernelFunc:zV};class BV{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function WV(e,t,n){const s=n.texData.get(e.dataId),r=pe(e.shape),a=e.shape[e.shape.length-1],i=ZP({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new BV("real",o,t),u=new BV("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),d=n.runWebGLProgram(u,c,"float32"),p=_P({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const f=ZP({inputs:{x:p},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(p),f}const VV={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return WV(s,!1,n)}};class UV{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function GV(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||Me(r),"string"===a){const e=Ce(a,pe(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new UV(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const HV={kernelName:dn,backendName:"webgl",kernelFunc:GV};class jV{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const qV={kernelName:pn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n}=e;const{image:s}=t,r=n,a=new jV(s.shape);return r.runWebGLProgram(a,[s],s.dtype)}},KV="return floor(x);",XV=UP({opSnippet:KV,packedOpSnippet:KV,cpuKernelImpl:dz}),YV={kernelName:fn,backendName:"webgl",kernelFunc:XV},JV=GP({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),ZV={kernelName:mn,backendName:"webgl",kernelFunc:JV};class QV{constructor(e){this.variableNames=["A"];const t=nL(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class eU{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=nL(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const tU={kernelName:br,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!==typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!==typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(o||i){const e=Qe().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=nU&&e===sU||(sU=e,nU=document.createElement("canvas").getContext("2d",{willReadFrequently:sU})),nU.canvas.width=l,nU.canvas.height=u,nU.drawImage(r,0,0,l,u),r=nU.canvas}const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=JO.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const p=Qe().getBool("WEBGL_PACK")?new eU(h):new QV(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let nU,sU=Qe().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const rU={kernelName:vr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=dc(c),g=nc(r.shape,a.shape,l,h,u,d,!1,m);let y;const b=[],x=null!=i,w=null!=o,v="leakyrelu"===p,k=()=>{const e=[r,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=ZP({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(i,c)),w&&e.push(t(o,c)),v){const t=n.makeTensorInfo([],"float32",Jr(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&Qe().getBool("WEBGL_EXP_CONV")){const e=p?HP(p,!0):null,t=new MW(g,x,e,w,v),s=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],r=k();y=n.runWebGLProgram(t,r,"float32",s)}else if(Qe().getBool("WEBGL_CONV_IM2COL"))y=BW({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});else{const e=p?HP(p,!1):null,t=new _W(g,x,e,w,v),s=k();y=n.runWebGLProgram(t,s,"float32")}else y=PW({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});const I=ZP({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};const aU={kernelName:kr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let m=c;null==m&&(m=[1,1]),ce(cc(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=nc(r.shape,a.shape,l,m,u,h,!0),y=Qe().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=d?HP(d,y):null,x=[r,a],w=null!=i,v=null!=o,k="leakyrelu"===d;if(w&&x.push(i),v&&x.push(o),k){const e=n.makeTensorInfo([],"float32",Jr(p,"float32"));x.push(e),f.push(e)}let I;I=y?new mV(g,w,b,v,k):new fV(g,w,b,v,k);const N=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(I,x,"float32",N);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class iU{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=xL(n.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const oU={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=pe(s.shape),[l,u,c,h]=nu(s,r),d=ZP({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),p=ZP({inputs:{x:s},backend:n,attrs:{shape:[pe(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=pz(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new iU(i,h,[u,c],s.shape),m=n.runWebGLProgram(f,[p,d],p.dtype),g=ZP({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),g}};class lU{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=xL(this.rank),s=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let s=0;s<e.length;s++)2===s?n.push("index"):n.push(`${t[s]}`);return n.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function uU(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=Ne(i,r.shape)[0];if(Qe().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];ce(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=rg(r,a,l,o),c=pe(a.shape),h=[],d=ZP({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=ZP({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(d),s=fz(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new lU(d.shape,f),g=n.runWebGLProgram(m,[d,p],d.dtype);h.push(g);const y=ZP({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const cU={kernelName:yn,backendName:"webgl",kernelFunc:uU},hU=GP({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:mz,dtype:"bool"}),dU={kernelName:xn,backendName:"webgl",kernelFunc:hU},pU=GP({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:gz}),fU={kernelName:wn,backendName:"webgl",kernelFunc:pU};const mU={kernelName:kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return WV(s,!0,n)}},gU=UP({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),yU={kernelName:Nn,backendName:"webgl",kernelFunc:gU},bU=UP({opSnippet:"return float(isinf(x));",dtype:"bool"}),xU={kernelName:Sn,backendName:"webgl",kernelFunc:bU},wU=UP({opSnippet:"return float(isnan(x));",dtype:"bool"}),vU={kernelName:Tn,backendName:"webgl",kernelFunc:wU},kU=GP({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:yz,dtype:"bool"}),IU={kernelName:$n,backendName:"webgl",kernelFunc:kU},NU=GP({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:bz,dtype:"bool"}),SU={kernelName:En,backendName:"webgl",kernelFunc:NU};const TU={kernelName:An,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=xz(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},CU=UP({opSnippet:VP+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:wz}),$U={kernelName:Rn,backendName:"webgl",kernelFunc:CU},EU=UP({opSnippet:VP+"\n  return log(1.0 + x);\n"}),AU={kernelName:Fn,backendName:"webgl",kernelFunc:EU},RU=GP({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),FU={kernelName:Dn,backendName:"webgl",kernelFunc:RU},DU=UP({opSnippet:"return float(!(x >= 1.0));"}),_U={kernelName:_n,backendName:"webgl",kernelFunc:DU},OU=GP({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),MU={kernelName:On,backendName:"webgl",kernelFunc:OU};class LU{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class zU{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const PU={kernelName:Pn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=Qe().getBool("WEBGL_PACK_NORMALIZATION")?new zU(r.shape,a,i,o,l):new LU(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class BU{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const WU={kernelName:Bn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new BU(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function VU(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=Ne(a,r.shape);let u=l;const c=dh(u,o),h=null!=c,d=n.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const e=n.texData.get(p.dataId).values,t=new Array(o);for(let n=0;n<t.length;n++)t[n]=r.shape[c[n]];const s=Xz(e,r.shape,r.dtype,c,t);p=n.makeTensorInfo(t,r.dtype);n.texData.get(p.dataId).values=s}else p=aB(r,c,n);u=fh(u.length,o)}hh("max",u,o);const[f,m]=uh(p.shape,u);let g,y=f;if(i&&(y=ch(f,l)),d){const e=n.texData.get(p.dataId).values,t=vz(e,pe(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=pe(t),a=ZP({inputs:{x:e},attrs:{shape:[pe(e.shape)/r,r]},backend:s}),i=nB(a,e.dtype,"max",s),o=ZP({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(p,m,y,n);return h&&n.disposeIntermediateTensorInfo(p),g}const UU={kernelName:Vn,backendName:"webgl",kernelFunc:VU},GU=GP({opSnippet:$P+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+AP+"\n  return result;\n",cpuKernelImpl:kz}),HU={kernelName:Un,backendName:"webgl",kernelFunc:GU};const jU={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;eL(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;ce(cc(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ec(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&ge(u.inShape,u.outShape))return FP({inputs:{x:r},backend:n});const c=new GB(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const qU={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=tc(r.shape,a,i,[1,1,1],o,u,l),h=new HB(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class KU{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class XU{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,d=u-1-e.padInfo.left,p=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const YU={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=tc(i.shape,o,l,[1,1,1],u,c),d=new HB(h,"max",!0),p=n.runWebGLProgram(d,[i],i.dtype),f=new XU(h),m=n.runWebGLProgram(f,[r,p],i.dtype);return n.disposeIntermediateTensorInfo(p),m}};const JU={kernelName:Hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;eL([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=ec(o.shape,l,u,1,c,h),p=new GB(d,"max",!0),f=n.runWebGLProgram(p,[o],o.dtype),m=new KU(d),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const ZU={kernelName:Kn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:s}=e;const{x:r}=t,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=n,u=s;ce(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const c=[1,1];ce(cc(i,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=ec(r.shape,a,i,c,o),[d,p]=function(e,t,n,s){let r=new GB(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new GB(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(r,l,h,u);return[d,p]}};const QU={kernelName:Xn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:s}=e;const{x:r}=t,{keepDims:a,axis:i}=n,o=s,l=r.shape.length,u=Ne(i,r.shape);let c=u;const h=dh(c,l),d=null!=h,p=o.shouldExecuteOnCPU([r]),f=[];let m=r;if(d){if(p){const e=o.texData.get(m.dataId).values,t=new Array(l);for(let s=0;s<t.length;s++)t[s]=r.shape[h[s]];const n=Xz(e,r.shape,r.dtype,h,t);m=o.makeTensorInfo(t,r.dtype);o.texData.get(m.dataId).values=n}else m=aB(r,h,o);f.push(m),c=fh(c.length,l)}hh("sum",c,l);const[g,y]=uh(m.shape,c);let b=g;a&&(b=ch(g,u));const x=function(e,t,n,s){const r=pe(t),a=ZP({inputs:{x:e},attrs:{shape:[pe(e.shape)/r,r]},backend:s}),i=nB(a,"float32","mean",s),o=ZP({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(m,y,b,o);for(const w of f)o.disposeIntermediateTensorInfo(w);return x}};const eG={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Ne(a,r.shape);let u=l;const c=dh(u,o);let h=r;null!=c&&(h=lB({inputs:{x:r},backend:n,attrs:{perm:c}}),u=fh(u.length,r.shape.length)),hh("min",u,o);const[d,p]=uh(h.shape,u),f=ZP({inputs:{x:h},backend:n,attrs:{shape:[-1,pe(p)]}}),m=nB(f,f.dtype,"min",n);let g;if(i){g=ZP({inputs:{x:m},backend:n,attrs:{shape:ch(d,l)}})}else g=ZP({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},tG=GP({opSnippet:$P+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+AP+"\n  return result;\n",cpuKernelImpl:Iz}),nG={kernelName:Jn,backendName:"webgl",kernelFunc:tG};class sG{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=xL(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class rG{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=xL(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=Zz("rc",s),l=Zz("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const aG={kernelName:Zn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:s}=e;const{x:r}=t,{paddings:a,mode:i}=s,o=Qe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new rG(r.shape,a,i):new sG(r.shape,a,i);return n.runWebGLProgram(o,[r],r.dtype)}},iG=GP({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+AP+"\n  return result;\n"}),oG={kernelName:Qn,backendName:"webgl",kernelFunc:iG};class lG{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const uG=GP({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),cG={kernelName:tn,backendName:"webgl",kernelFunc:uG},hG="return a - b;",dG=GP({opSnippet:hG,packedOpSnippet:hG,supportsComplex:!0,cpuKernelImpl:jz}),pG={kernelName:ar,backendName:"webgl",kernelFunc:dG};function fG(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=Ne([a],r.shape),o=VU({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=ch(o.shape,i),u=ZP({inputs:{x:o},backend:n,attrs:{shape:l}}),c=dG({inputs:{a:r,b:u},backend:n}),h=DV({inputs:{x:c},backend:n}),d=iB({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),p=ZP({inputs:{x:d},backend:n,attrs:{shape:l}}),f=uG({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const mG={kernelName:js,backendName:"webgl",kernelFunc:fG};const gG={kernelName:es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:fG({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new lG(u,c,a),d=[[i]],p=n.runWebGLProgram(h,[l],"int32",d);return o||n.disposeIntermediateTensorInfo(l),p}},yG=iP+"\n  return -x;\n";const bG={kernelName:ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=Sz(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=Qe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new xP(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new aP(s.shape,yG),n.runWebGLProgram(r,[s],s.dtype)}},xG=lf;const wG={kernelName:rs,backendName:"webgl",kernelFunc:function(e){Ir("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=xG(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},vG=uf;const kG={kernelName:as,backendName:"webgl",kernelFunc:function(e){Ir("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=vG(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},IG=cf;const NG={kernelName:is,backendName:"webgl",kernelFunc:function(e){Ir("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),d=i,p=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=IG(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class SG{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const TG={kernelName:ls,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s,u=pe(r.shape),c=new SG(u,i,o,l),h=ZP({inputs:{x:r},backend:n,attrs:{shape:[u]}}),d=n.runWebGLProgram(c,[h],a);n.disposeIntermediateTensorInfo(h);const p=ZP({inputs:{x:d},backend:n,attrs:{shape:[...r.shape,i]}});return n.disposeIntermediateTensorInfo(d),p}};function CG(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=pW({inputs:{input:s},backend:n}),t=CG({inputs:{x:e},backend:n}),r=EW({inputs:{input:s},backend:n}),a=CG({inputs:{x:r},backend:n}),i=_P({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return GV({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const $G={kernelName:gr,backendName:"webgl",kernelFunc:CG};const EG={kernelName:os,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=pW({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=EW({inputs:{input:r},backend:s}),i=CG({inputs:{x:a},backend:s}),o=_P({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return GV({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const AG={kernelName:us,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return OV({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{he(a,e.shape,"All tensors passed to stack must have matching shapes"),ce(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=FW({inputs:t.map((e=>{const t=OV({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class RG{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=xL(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class FG{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=xL(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=Zz("rc",s),l=Zz("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let f=0,m=1===s?2:4;f<m;f++)p+=`\n        ${h[f]}\n        if (${d}) {\n          result[${f}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${f}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const DG=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===pe(r.shape)){const e=a.map(((e,t)=>e[0]+r.shape[t]+e[1]));return GV({backend:n,attrs:{shape:e,value:i,dtype:r.dtype}})}const o=Qe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new FG(r.shape,a,i):new RG(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},_G={kernelName:cs,backendName:"webgl",kernelFunc:DG},OG=GP({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+AP+"\n  return result;\n"}),MG={kernelName:ds,backendName:"webgl",kernelFunc:OG};const LG={kernelName:fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=Ne(a,r.shape);let c=u;const h=dh(c,o);let d,p=r;if(null!=h&&(p=lB({inputs:{x:r},backend:n,attrs:{perm:h}}),c=fh(c.length,o),l.push(p)),hh("prod",c,o),n.shouldExecuteOnCPU([p])){const e=n.texData.get(p.dataId).values,{outVals:t,outShape:s,outDtype:r}=Cz(p.shape,p.dtype,e,c);d=n.makeTensorInfo(s,r,t)}else{const[e,t]=uh(p.shape,c),s=pe(t),a=ZP({inputs:{x:p},backend:n,attrs:{shape:[-1,s]}}),i=nB(a,Aa(r.dtype),"prod",n);d=ZP({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(d);const e=ch(d.shape,u);d=ZP({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}};const zG={kernelName:ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map((e=>n.readSync(e.dataId))),u=r.map((e=>e.shape)),c=n.readSync(a.dataId),h=n.readSync(i.dataId),[d,p,f]=$z(l,u,c,a.shape,a.dtype,h,i.shape,o),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}};const PG={kernelName:gs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Ez(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};const BG={kernelName:ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),h=n.readSync(i.dataId),d=o.map((e=>n.readSync(e.dataId))),p=o.map((e=>e.shape)),[f,m]=Az(u,r.shape,c,a.shape,a.dtype,h,i.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,m)}},WG=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=Rz(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},VG={kernelName:bs,backendName:"webgl",kernelFunc:WG},UG=UP({opSnippet:"return 1.0 / x;"}),GG={kernelName:ws,backendName:"webgl",kernelFunc:UG},HG=UP({opSnippet:iP+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),jG={kernelName:vs,backendName:"webgl",kernelFunc:HG},qG=UP({opSnippet:iP+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),KG={kernelName:Cs,backendName:"webgl",kernelFunc:qG};class XG{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class YG{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const JG={kernelName:Ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=Qe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new YG(r.shape,l,u,a,i):new XG(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class ZG{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const QG={kernelName:Ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new ZG(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class eH{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class tH{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const nH={kernelName:Is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=Qe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new tH(r.shape,l,u,a,i):new eH(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class sH{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const rH={kernelName:Ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new sH(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class aH{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=xL(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class iH{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=Zz("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=xL(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const oH={kernelName:$s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=Ne(a,r.shape);if(0===i)return FP({inputs:{x:r},backend:n});const l=Qe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iH(r.shape,o):new aH(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class lH{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"===typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const uH={kernelName:xr,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:s}=e;const{image:r}=t,{radians:a,fillValue:i,center:o}=n,l=s,u=new lH(r.shape,i),[c,h]=hm(o,r.shape[1],r.shape[2]),d=[[c,h,Math.sin(a),Math.cos(a)]];return l.runWebGLProgram(u,[r],r.dtype,d)}},cH=UP({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),hH={kernelName:Es,backendName:"webgl",kernelFunc:cH},dH=UP({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Fz}),pH={kernelName:As,backendName:"webgl",kernelFunc:dH};class fH{constructor(e,t,n,s,r,a){let i=arguments.length>7&&void 0!==arguments[7]&&arguments[7];this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=xL(r.length),l=xL(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const d=`getUpdates(${h})`;let p="";i&&(p="coords[0], coords[1]");const f=`getDefaultValue(${p})`,m=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${m};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(${f}, sum, float(found)));\n        }\n      `}}class mH{constructor(e,t,n,s,r,a){let i=arguments.length>7&&void 0!==arguments[7]&&arguments[7];this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const o=xL(r.length),l=xL(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const d=`getUpdates(${h})`;let p="";i&&(p="coords[0], coords[1]");const f=`getDefaultValue(${p})`,m=t>1?"strides[j]":"strides",g=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${c});\n              flattenedIndex += index.xz * ${m};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${g};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${d};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${f}, sum, found));\n        }\n      `}}const gH={kernelName:Rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=au(0,r,i),d=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const p=ZP({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=ZP({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=Qe().getBool("WEBGL_PACK")?new mH(l,o,p.shape.length,f.shape.length,c,d):new fH(l,o,p.shape.length,f.shape.length,c,d);const y=n.runWebGLProgram(g,[f,p,m],f.dtype),b=ZP({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class yH{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===Qe().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const bH={kernelName:Ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=new yH(r.shape[0],r.shape[1],a.shape[1],i),l=[[r.shape[1]]];return n.runWebGLProgram(o,[r,a],"int32",l)}};class xH{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=xL(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const wH={kernelName:_s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new xH(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Ea(r.dtype,a.dtype))}},vH=UP({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${ym};\n  float scale = ${bm};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),kH={kernelName:Os,backendName:"webgl",kernelFunc:vH},IH=UP({opSnippet:VP+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:_z}),NH={kernelName:Bs,backendName:"webgl",kernelFunc:IH},SH=UP({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),TH={kernelName:Ps,backendName:"webgl",kernelFunc:SH},CH=UP({opSnippet:VP+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${AP}\n  return result;\n`}),$H={kernelName:Ls,backendName:"webgl",kernelFunc:CH},EH=UP({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),AH={kernelName:zs,backendName:"webgl",kernelFunc:EH},RH=UP({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),FH={kernelName:Ws,backendName:"webgl",kernelFunc:RH},DH={kernelName:Gs,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;ce(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let y=1+a.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=DG({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=dm(c.shape,a,o,!1),d=pm(h.length,a.length,!1),p=fm(c.shape,a,o,!1),f=ZP({inputs:{x:c},backend:n,attrs:{shape:h}}),m=lB({inputs:{x:f},backend:n,attrs:{perm:d}}),g=ZP({inputs:{x:m},backend:n,attrs:{shape:p}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const _H={kernelName:qs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,d,p,f,m]=Lz(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const OH={kernelName:Ks,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=zz(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const MH={kernelName:Xs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Pz(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const LH={kernelName:Ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Pz(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const zH={kernelName:Js,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=au(0,r,o),p=!1;if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=na(n.readSync(i.dataId)[0]),f=Dz(e,t,o,d,c,u,l,h,s,p);return n.makeTensorInfo(o,f.dtype,f.values)}const f=new fH(u,l,r.shape.length,a.shape.length,h,[d,1],p),m=n.runWebGLProgram(f,[a,r,i],a.dtype),g=ZP({inputs:{x:m},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(m),g}};const PH={kernelName:Hs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Ne(i,r.shape)[0],l=Um(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=aW({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},BH="return sqrt(x);",WH=UP({opSnippet:BH,packedOpSnippet:BH,cpuKernelImpl:Bz}),VH={kernelName:Vs,backendName:"webgl",kernelFunc:WH},UH=UP({opSnippet:"return x * x;"}),GH={kernelName:Qs,backendName:"webgl",kernelFunc:UH},HH="return (a - b) * (a - b);",jH=GP({opSnippet:HH,packedOpSnippet:HH}),qH={kernelName:Zs,backendName:"webgl",kernelFunc:jH};const KH={kernelName:er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=ag(n.readSync(r.dataId)),i=Wz(a,"string",s);return n.makeTensorInfo(r.shape,"string",i)}};const XH={kernelName:yr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:n,backend:s}=e;const{x:r}=t,a=iP+`\n    return x > 0.0 ? 1.0 : float(${n.alpha});\n  `,i=new aP(r.shape,a);return s.runWebGLProgram(i,[r],r.dtype)}};class YH{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=xL(n.length),a=xL(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const JH={kernelName:tr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Iu(r.shape,a,i,o,l,u,c,h,d);let v;if(m)v=ZP({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){ce(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=cu(b,x,w),t=aW({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=ZP({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=Ro(r.shape,r.dtype,e),s=Vz(p,t,w,b);v=n.makeTensorInfo(f,r.dtype,s.values)}else{const e=new YH(b,w,p);v=n.runWebGLProgram(e,[r],r.dtype)}}const k=ZP({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),k}};const ZH={kernelName:nr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=Uz(d,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const QH={kernelName:sr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=Gz(o,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const ej={kernelName:rr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=Hz(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},tj=UP({opSnippet:"return tan(x);"}),nj={kernelName:ir,backendName:"webgl",kernelFunc:tj},sj=UP({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),rj={kernelName:or,backendName:"webgl",kernelFunc:sj};const aj={kernelName:Fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{tensor:r,indices:a,updates:i}=t,{}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=au(0,a,r.shape),d=[h/u,u];if(0===h)return n.makeTensorInfo(r.shape,a.dtype);const p=ZP({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=ZP({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),m=ZP({inputs:{x:r},backend:n,attrs:{shape:d}}),g=new fH(l,o,p.shape.length,f.shape.length,c,d,!1,!0),y=n.runWebGLProgram(g,[f,p,m],m.dtype),b=ZP({inputs:{x:y},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),b}};class ij{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const s=xL(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<e.length;r++)s.push(`imod(${n[r]}, ${e[r]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function oj(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>na(e))):e,s=Ro(r.shape,r.dtype,t),i=qz(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new ij(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const lj={kernelName:lr,backendName:"webgl",kernelFunc:oj};class uj{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class cj{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function hj(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function dj(e){let t=1;for(;t<e;)t*=2;return t}const pj={kernelName:ur,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=Qe().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=Qe().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=Kz(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,GV({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(r):r,f=pe(u)/c,m=ZP({inputs:{x:p},attrs:{shape:[f,c]},backend:n});d&&hj(n,p);const g=dj(a),y=dj(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,s)=>{const r=x(),a=new uj(s),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(a,r,"int32",i),hj(n,o)};for(let S=1;S<g;S*=2){const e=2*S;for(let t=S;t>=1;t/=2)w(e,t,[f,y])}for(let S=y;S>g;S/=2){const e=x(),t=new cj([f,S/2]),s=[[c],[null===b?1:0],[g]],r=b;b=n.runWebGLProgram(t,e,"int32",s),hj(n,r);const a=g/2,i=2*a;for(let n=a;n>=1;n/=2)w(i,n,b.shape)}let v=b;b=aW({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),hj(n,v);let k=uU({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});hj(n,m);const I=u.slice(0,-1);I.push(a),v=b,b=ZP({inputs:{x:b},attrs:{shape:I},backend:n}),hj(n,v);const N=k;return k=ZP({inputs:{x:k},attrs:{shape:I},backend:n}),hj(n,N),[k,b]}};class fj{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const mj={kernelName:cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,m]=null!=u?u:[h,d],g=new fj(h,d,i,o,l,[c,f,m,p]);return n.runWebGLProgram(g,[r,a],"float32")}};const gj={kernelName:dr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;eL(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=Yz(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const yj={kernelName:pr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let m=0;m<o;m++)m!==a&&(u[c++]=i.shape[m]);const h=[],d=new Array(o).fill(0),p=i.shape.slice();p[a]=1;const f=new Array(l);for(let m=0;m<f.length;m++){d[a]=m;const e=aW({inputs:{x:i},backend:n,attrs:{begin:d,size:p}}),t=ZP({inputs:{x:e},backend:n,attrs:{shape:u}});f[m]=t,h.push(e)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class bj{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const xj={kernelName:fr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=dh([u],o);let h=r;null!=c&&(h=lB({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=fh(1,o)[0]);const d=sg(h.shape,u,i),p=pe([h.shape[u]]),f=ZP({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});l.push(f);const m=Aa(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=ng(o,a),c=new bj({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const d=WG({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),p=oj({inputs:{x:d},backend:n,attrs:{reps:[o/u]}});l.push(d),l.push(p);return g(h,t,p,r,a)},y=ZP({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:d}});let b=y;if(null!=c){l.push(y);const e=ph(c);b=lB({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},wj=[dB,fB,gB,bB,vB,NB,SB,TB,FB,DB,OB,LB,PB,WB,UB,jB,qB,YB,JB,ZB,tW,oW,lW,uW,cW,gW,xW,kW,OP,SW,DW,WW,jW,KW,XW,YW,JW,QW,tV,sV,uV,cV,hV,pV,gV,xV,wV,kV,NV,SV,CV,$V,AV,FV,_V,MV,PV,VV,HV,qV,YV,ZV,tU,rU,aU,oU,cU,dU,fU,DP,mU,AW,yU,xU,vU,zP,IU,SU,TU,$U,AU,FU,_U,MU,PU,WU,UU,HU,jU,qU,YU,JU,ZU,QU,eG,nG,aG,oG,gG,JP,bG,wG,kG,NG,dW,TG,EG,AG,_G,MG,WP,LG,zG,PG,BG,VG,fW,cG,GG,jG,KG,QP,JG,QG,nH,rH,oH,uH,hH,pH,gH,bH,wH,kH,NH,TH,$H,AH,iW,mG,FH,DH,_H,OH,MH,LH,zH,PH,VH,GH,qH,KH,XH,JH,ZH,QH,ej,pG,oB,nj,rj,aj,lj,pj,mj,uB,gj,yj,xj,$G];for(const Dj of wj)Ar(Dj);const vj={"tfjs-core":Pu,"tfjs-backend-cpu":BR,"tfjs-backend-webgl":SP,"tfjs-data":cE,"tfjs-layers":Hv,"tfjs-converter":e$,tfjs:"4.22.0"},kj=e=>"tensor"===e?"tensor":"base64",Ij={jsdelivr:(e,t,n)=>`https://cdn.jsdelivr.net/npm/${e}@${t}/${n}`,unpkg:(e,t,n)=>`https://unpkg.com/${e}@${t}/${n}`},Nj=["jsdelivr","unpkg"];async function Sj(e,t){const{modelType:n,_internals:s,path:r}=t;if(r)return await Wg(e,r,n);if(!s)throw new Error(Ag);const a=[];for(const i of Nj){const t=Ij[i];try{const r=t(s.name,s.version,s.path);return await Wg(e,r,n)}catch(Fj){a.push([i,Fj instanceof Error?Fj:new Error(`There was an unknown error: ${JSON.stringify(Fj)}`)])}}throw((e,t,n)=>new Error([`Could not resolve URL ${t} for package ${n?.name}@${n?.version}`,"Errors include:",...e.map((e=>{let[t,n]=e;return`- ${t}: ${n.message}`}))].join("\n")))(a,r||s.path,s)}const Tj=()=>new Error(["Environment does not support a string URL as an input format.","For more information, see https://upscalerjs.com/documentation/troubleshooting#environment-disallows-string-input."].join("\n")),Cj=()=>new Error(["Environment does not support base64 as an output format.","For more information, see https://upscalerjs.com/documentation/troubleshooting#environment-disallows-base64."].join("\n")),$j=e=>new Promise(((t,n)=>{const s=new Image;s.src=e,s.crossOrigin="anonymous",s.onload=()=>t(s),s.onerror=()=>n(new Error(["Failed to load image"].join(" ")))})),Ej=e=>Jl(e),Aj=e=>{try{if(!0!==(new Image&&"createElement"in document))throw e()}catch(Fj){throw e()}},Rj=function(e){let{tf:t,getUpscaleOptions:n,checkValidEnvironment:s,getImageAsTensor:r,tensorAsBase64:a,loadModel:i}=e;return class{_opts;_model;ready;_abortController=(()=>new AbortController)();constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._opts={...e},this._model=i(t,Bg(t,this._opts.model||ty)),this.ready=new Promise(((e,n)=>{this._model.then((()=>Pg(t,this._model,this._opts.warmupSizes||[],void 0,{signal:this._abortController.signal}))).then(e).catch(n)}))}async execute(e,i){const o={checkValidEnvironment:s,getImageAsTensor:r,tensorAsBase64:a};await this.ready;const l=await this._model;return async function(e,t,n,s,r){let{signal:a,awaitNextFrame:i,...o}=n,{checkValidEnvironment:l,...u}=r;l(t,{output:o.output,progressOutput:o.progressOutput});const c=_g(e,a||s.signal,i);await c();const h=await vg(ey(e,t,o,s,u),c);return await c(),h}(t,e,n(i),{...l,signal:this._abortController.signal},o)}upscale=this.execute.bind(this);warmup=(()=>{var e=this;return async function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],s=arguments.length>1?arguments[1]:void 0;return await e.ready,Pg(t,e._model,n,s,{signal:e._abortController.signal})}})();abort=()=>{this._abortController.abort(),this._abortController=new AbortController};dispose=async()=>{await this.ready;const{model:e,modelDefinition:n}=await this._model;n.teardown&&await n.teardown(t),e.dispose()};getModel=()=>this._model}}({tf:X,getUpscaleOptions:function(){let{output:e,progressOutput:t,...n}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{...n,output:kj(e),progressOutput:kj(t||e)}},loadModel:async(e,t)=>{const n=await t;try{(e=>{if(void 0===e)throw new fg(og.UNDEFINED);if("string"!==typeof(t=e.modelType??"layers")||!["layers","graph"].includes(t))throw new fg(og.INVALID_MODEL_TYPE);var t;if(!e.path&&!e._internals?.path)throw new fg(og.MISSING_PATH)})(n)}catch(Fj){if((e=>e instanceof fg)(Fj))throw Dg(Fj.type,n);throw new Error(Ag)}const s=(e=>({...e}))(n);return{model:await Sj(e,s),modelDefinition:s}},getImageAsTensor:async(e,t)=>{const n=await(async e=>{if(pg(e))return e;if("string"===typeof e){const t=await $j(e);return Ej(t)}return Ej(e)})(t);if(dg(n)){const e=n.expandDims(0);return n.dispose(),e}if(hg(n))return n;throw(e=>new Error([`Unsupported dimensions for incoming pixels: ${e.shape.length}.`,"Only 3 or 4 rank tensors are supported."].join("\n")))(n)},tensorAsBase64:(e,t)=>{const n=((e,t)=>e.tidy((()=>{const[n,s]=t.shape,r=e.fill([n,s],255).expandDims(2);return t.clipByValue(0,255).concat([r],2).dataSync()})))(e,t),[s,r]=t.shape,a=new ImageData(r,s);a.data.set(n);const i=document.createElement("canvas");i.width=r,i.height=s;const o=i.getContext("2d");if(!o)throw new Error("No context found");return o.putImageData(a,0,0),i.toDataURL()},checkValidEnvironment:(e,t)=>{let{output:n="base64",progressOutput:s}=t;"string"===typeof e&&Aj(Tj),"base64"!==s&&"base64"!==n||Aj(Cj)}})}}]);
//# sourceMappingURL=403.b47dd726.chunk.js.map