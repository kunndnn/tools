{"version":3,"file":"static/js/569.f1bb476b.chunk.js","mappings":"kJAEA,MAyGA,EAzGqBA,KACnB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,GACzCG,GAAiBC,EAAAA,EAAAA,QAAO,MA2C9B,OACEC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,UAAW,UAAWC,SAAA,EACnDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uCACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4EAIHC,EAAAA,EAAAA,KAAA,OAAKJ,MAAO,CAAEK,OAAQ,UAAWF,SAC7BR,GAgBAS,EAAAA,EAAAA,KAAA,UACEE,QAhCYC,KAChBV,EAAeW,SACjBX,EAAeW,QAAQC,OAEzBb,GAAe,EAAM,EA6BbI,MAAO,CACLC,QAAS,YACTS,SAAU,OACVC,WAAY,UACZC,MAAO,QACPC,OAAQ,OACRC,aAAc,MACdC,OAAQ,WACRZ,SACH,2BA1BDC,EAAAA,EAAAA,KAAA,UACEE,QAlDaU,KACrB,KAAM,4BAA6BC,QAEjC,YADAC,MAAM,iEAIR,MAAMC,EAAc,IAAIF,OAAOG,wBAC/BD,EAAYE,YAAa,EACzBF,EAAYG,gBAAiB,EAC7BH,EAAYI,KAAO,QAEnBJ,EAAYK,SAAYC,IACtB,IAAIC,EAAa,GACjB,IAAK,IAAIC,EAAIF,EAAMG,YAAaD,EAAIF,EAAMI,QAAQC,OAAQH,IACxDD,GAAcD,EAAMI,QAAQF,GAAG,GAAGD,WAEpCjC,EAAQiC,EAAW,EAGrBP,EAAYY,QAAWN,IACrBO,QAAQC,MAAM,4BAA6BR,EAAMQ,MAAM,EAGzDd,EAAYe,MAAQ,KAClBtC,GAAe,EAAM,EAGvBuB,EAAYgB,QACZtC,EAAeW,QAAUW,EACzBvB,GAAe,EAAK,EAsBZI,MAAO,CACLC,QAAS,YACTS,SAAU,OACVC,WAAY,UACZC,MAAO,QACPC,OAAQ,OACRC,aAAc,MACdC,OAAQ,WACRZ,SACH,8BAqBLC,EAAAA,EAAAA,KAAA,YACEgC,MAAO5C,EACP6C,SAAWC,GAAM7C,EAAQ6C,EAAEC,OAAOH,OAClCI,YAAY,kCACZC,KAAK,IACLzC,MAAO,CACL0C,MAAO,OACPC,SAAU,QACV1C,QAAS,OACTS,SAAU,OACVI,aAAc,MACdD,OAAQ,sBAGR,C","sources":["Components/SpeechToText.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\nconst SpeechToText = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognitionRef = useRef(null);\r\n\r\n  // Start speech recognition\r\n  const startListening = () => {\r\n    if (!(\"webkitSpeechRecognition\" in window)) {\r\n      alert(\"Speech recognition not supported in this browser üò¢\");\r\n      return;\r\n    }\r\n\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = true;\r\n    recognition.lang = \"en-US\";\r\n\r\n    recognition.onresult = (event) => {\r\n      let transcript = \"\";\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        transcript += event.results[i][0].transcript;\r\n      }\r\n      setText(transcript);\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      setIsListening(false);\r\n    };\r\n\r\n    recognition.start();\r\n    recognitionRef.current = recognition;\r\n    setIsListening(true);\r\n  };\r\n\r\n  // Stop speech recognition\r\n  const stopListening = () => {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n    }\r\n    setIsListening(false);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\r\n      <h2>üéôÔ∏è Speech to Text</h2>\r\n      <p>\r\n        Click start and begin speaking. Your speech will be transcribed below.\r\n      </p>\r\n\r\n      <div style={{ margin: \"1rem 0\" }}>\r\n        {!isListening ? (\r\n          <button\r\n            onClick={startListening}\r\n            style={{\r\n              padding: \"10px 20px\",\r\n              fontSize: \"1rem\",\r\n              background: \"#28a745\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              borderRadius: \"6px\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          >\r\n            ‚ñ∂ Start Listening\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={stopListening}\r\n            style={{\r\n              padding: \"10px 20px\",\r\n              fontSize: \"1rem\",\r\n              background: \"#dc3545\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              borderRadius: \"6px\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          >\r\n            ‚èπ Stop Listening\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      <textarea\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Your speech will appear here...\"\r\n        rows=\"8\"\r\n        style={{\r\n          width: \"100%\",\r\n          maxWidth: \"600px\",\r\n          padding: \"10px\",\r\n          fontSize: \"1rem\",\r\n          borderRadius: \"6px\",\r\n          border: \"1px solid #ccc\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n"],"names":["SpeechToText","text","setText","useState","isListening","setIsListening","recognitionRef","useRef","_jsxs","style","padding","textAlign","children","_jsx","margin","onClick","stopListening","current","stop","fontSize","background","color","border","borderRadius","cursor","startListening","window","alert","recognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","i","resultIndex","results","length","onerror","console","error","onend","start","value","onChange","e","target","placeholder","rows","width","maxWidth"],"sourceRoot":""}