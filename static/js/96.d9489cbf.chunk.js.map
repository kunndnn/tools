{"version":3,"file":"static/js/96.d9489cbf.chunk.js","mappings":"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","sources":["../node_modules/marked/src/defaults.ts","../node_modules/marked/src/rules.ts","../node_modules/marked/src/helpers.ts","../node_modules/marked/src/Tokenizer.ts","../node_modules/marked/src/Lexer.ts","../node_modules/marked/src/Renderer.ts","../node_modules/marked/src/TextRenderer.ts","../node_modules/marked/src/Parser.ts","../node_modules/marked/src/Hooks.ts","../node_modules/marked/src/marked.ts","../node_modules/marked/src/Instance.ts"],"sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nexport const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n","import { other } from './rules.ts';\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(other.unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, findClosingBracket, } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape, } from './helpers.ts';\nimport { other } from './rules.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nexport class _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults, } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","arguments","length","undefined","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","hr","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","_blockLabel","def","list","_tag","_comment","html","paragraph","blockNormal","blockquote","code","fences","heading","newline","table","text","gfmTable","blockGfm","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","inlineNormal","_backpedal","blockSkip","del","escape","reflinkSearch","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","i","trim","shift","at","pop","splice","push","rtrim","c","invert","l","suffLen","charAt","slice","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","options","constructor","this","space","src","codeBlockStyle","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","row","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","links","emStrong","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","inlineText","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","_ref","langString","_ref2","parse","_ref3","_ref4","parseInline","body","j","listitem","itemBody","checkbox","unshift","_ref5","_ref6","tablecell","tablerow","k","_ref7","content","strong","_ref8","em","_ref9","_ref10","_ref11","_ref12","cleanHref","out","image","_ref13","_TextRenderer","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","markedInstance","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","values","concat","tableToken","listToken","childTokens","flat","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","_key2","apply","extLevel","prop","rendererProp","rendererFunc","_len3","_key3","tokenizerProp","tokenizerFunc","prevTokenizer","_len4","_key4","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","_len5","_key5","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","marked","getDefaults"],"sourceRoot":""}