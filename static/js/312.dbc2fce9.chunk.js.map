{"version":3,"file":"static/js/312.dbc2fce9.chunk.js","mappings":"yLAMA,MA8DA,EA9DyBA,KACvB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IACrCC,GAAaC,EAAAA,EAAAA,QAAO,OACpB,QAAEC,GAAYC,EAAAA,GACdC,EAAkBA,KACtBF,IACIL,GAEFQ,IAAUL,EAAWM,QAAST,EAAW,CACvCU,OAAQ,UACRC,UAAW,OACXC,MAAO,EACPC,OAAQ,IACRC,cAAc,IAEhBb,EAAa,IACbK,EAAAA,GAAMS,QAAQ,6BAA8B,CAAEC,MAAO,UAErDV,EAAAA,GAAMW,MAAM,6BAA8B,CACxCD,MAAO,QAEX,EAIF,OACEE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACxBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,UAASD,SAAC,uBACxBE,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,MAAOxB,EACPyB,SAAWC,GAAMzB,EAAayB,EAAEC,OAAOH,OACvCI,UATYC,IAAA,IAAC,IAAEC,GAAKD,EAAA,MAAa,UAARC,GAAmBvB,GAAiB,EAU7DwB,YAAY,aACZV,UAAU,WAEZC,EAAAA,EAAAA,KAAA,UAAQD,UAAU,SAASW,QAASzB,EAAgBa,SAAC,sBAGrDE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,oBAAmBD,UAEhCE,EAAAA,EAAAA,KAAA,OAAKW,IAAK9B,UAGdmB,EAAAA,EAAAA,KAACY,EAAAA,GAAc,CACbC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,EACZ3B,MAAM,QACN4B,WAAYC,EAAAA,OAEb,C","sources":["Components/BarCodeGenerator.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport JsBarcode from \"jsbarcode\";\r\nimport \"../Styles/BarCodeGenerator.css\"; // Importing the CSS file\r\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst BarCodeGenerator = () => {\r\n  const [inputText, setInputText] = useState(\"\"); // Store input text\r\n  const barcodeRef = useRef(null); // Reference to the SVG element\r\n  const { dismiss } = toast;\r\n  const generateBarcode = () => {\r\n    dismiss(); // Dismiss any existing toast notifications\r\n    if (inputText) {\r\n      // Generate barcode when the button is clicked and inputText is not empty\r\n      JsBarcode(barcodeRef.current, inputText, {\r\n        format: \"CODE128\", // Barcode format\r\n        lineColor: \"#000\",\r\n        width: 2,\r\n        height: 100,\r\n        displayValue: true,\r\n      });\r\n      setInputText(\"\");\r\n      toast.success(\"Your bar code is ready !!!\", { theme: \"dark\" });\r\n    } else {\r\n      toast.error(`Please enter some text !!!`, {\r\n        theme: \"dark\",\r\n      });\r\n    }\r\n  };\r\n  //on input\r\n  const onInputCall = ({ key }) => key === \"Enter\" && generateBarcode();\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h3 className=\"heading\">Barcode Generator</h3>\r\n        <input\r\n          type=\"text\"\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          onKeyDown={onInputCall}\r\n          placeholder=\"Enter text\"\r\n          className=\"input\"\r\n        />\r\n        <button className=\"button\" onClick={generateBarcode}>\r\n          Generate Barcode\r\n        </button>\r\n        <div className=\"barcode-container\">\r\n          {/* This is where the barcode will be rendered */}\r\n          <svg ref={barcodeRef}></svg>\r\n        </div>\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"light\"\r\n        transition={Zoom}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarCodeGenerator;\r\n"],"names":["BarCodeGenerator","inputText","setInputText","useState","barcodeRef","useRef","dismiss","toast","generateBarcode","JsBarcode","current","format","lineColor","width","height","displayValue","success","theme","error","_jsxs","_Fragment","children","className","_jsx","type","value","onChange","e","target","onKeyDown","_ref","key","placeholder","onClick","ref","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Zoom"],"sourceRoot":""}